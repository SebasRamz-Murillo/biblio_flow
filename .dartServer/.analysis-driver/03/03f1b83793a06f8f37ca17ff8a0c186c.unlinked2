ÅnametoStringlabelhintactionhashCode==_nextId_actions_idsgetIdentifier	getActionstring
attributes+showWhenEmptyisInterestingvalueToStringflagsactionsattributedLabelvalueattributedValueincreasedValueattributedIncreasedValuedecreasedValueattributedDecreasedValueattributedHinttooltiptextDirectiontextSelectionscrollChildCountscrollIndexscrollPositionscrollExtentMaxscrollExtentMinplatformViewIdmaxValueLengthcurrentValueLengthrecttags	transform	elevation	thicknesscustomSemanticsActionIdshasFlag	hasActiontoStringShortdebugFillProperties_sortedListsEqual
childOrdergetChildren	onTapHintonLongPressHint
isNotEmptyenabledcheckedmixedtoggledselectedbuttonlinkheader	textFieldsliderkeyboardKeyreadOnly	focusablefocusedinMutuallyExclusiveGrouphiddenobscured	multilinescopesRoute
namesRouteimage
liveRegionhintOverridessortKeytagForChildrenonTaponLongPressonScrollLeftonScrollRight
onScrollUponScrollDown
onIncrease
onDecreaseonCopyonCutonPasteonMoveCursorForwardByCharacteronMoveCursorBackwardByCharacteronMoveCursorForwardByWordonMoveCursorBackwardByWordonSetSelection	onSetTextonDidGainAccessibilityFocusonDidLoseAccessibilityFocus	onDismisscustomSemanticsActions$_maxFrameworkAccessibilityIdentifier_lastIdentifier_generateNewIdkeyid_id_showOnScreen
_transform_rectparentSemanticsClipRectparentPaintClipRectelevationAdjustmentindexInParentisInvisibleisMergedIntoParent_isMergedIntoParentisPartOfNodeMergingmergeAllDescendantsIntoThisNode _mergeAllDescendantsIntoThisNode	_children_debugPreviousSnapshot_replaceChildrenhasChildren_deadchildrenCountvisitChildren_visitDescendantsownerparentredepthChildrenattachdetach_dirty
_markDirty)_isDifferentFromCurrentSemanticAnnotation_customSemanticsActions_actionsAsBitsisTagged_flags_attributedLabel_attributedValue_attributedIncreasedValue_attributedDecreasedValue_attributedHint_tooltip
_elevation
_thickness_hintOverrides_textDirection_sortKey_textSelectionisMultiline_isMultiline_scrollChildCount_scrollIndex_scrollPosition_scrollExtentMax_scrollExtentMin_platformViewId_maxValueLength_currentValueLength_canPerformAction_kEmptyConfig
updateWithgetSemanticsData_initIdentityTransform_kEmptyChildList!_kEmptyCustomSemanticsActionsList_kIdentityTransform_addToUpdate_childrenInTraversalOrder	sendEventtoStringDeeptoDiagnosticsNodedebugDescribeChildrendebugListChildrenInOrderisLeadingEdgeoffsetnode	compareTostartOffsetnodessortedWithinVerticalGroupsortedWithinKnotpositiononSemanticsUpdate_dirtyNodes_nodes_detachedNodesrootSemanticsNodedisposesendSemanticsUpdate_getSemanticsActionHandlerForIdperformAction%_getSemanticsActionHandlerForPositionperformActionAtisSemanticBoundary_isSemanticBoundaryexplicitChildNodes+isBlockingSemanticsOfPreviouslyPaintedNodeshasBeenAnnotated_hasBeenAnnotated
_addAction_addArgumentlessAction_onTap_onLongPress_onScrollLeft
_onDismiss_onScrollRight_onScrollUp_onScrollDown_onIncrease_onDecrease_onCopy_onCut_onPasteonShowOnScreen_onShowOnScreen_onMoveCursorForwardByCharacter _onMoveCursorBackwardByCharacter_onMoveCursorForwardByWord_onMoveCursorBackwardByWord_onSetSelection
_onSetText_onDidGainAccessibilityFocus_onDidLoseAccessibilityFocusgetActionHandler_indexInParentisMergingSemanticsOfDescendants _isMergingSemanticsOfDescendants_onCustomSemanticsActionisImage
isSelected	isEnabled	isCheckedisCheckStateMixed	isToggledisInMutuallyExclusiveGroupisFocusable	isFocusedisButtonisLinkisHeaderisSliderisKeyboardKeyisHiddenisTextField
isReadOnly
isObscuredhasImplicitScrollingtagsForChildren_tagsForChildrenaddTagForChildren_setFlag_hasFlagisCompatibleWithabsorbcopyinverseHitTesttraversalOrder	doCompareorderSemanticsNodeVisitorMoveCursorHandlerSetSelectionHandlerSetTextHandlerSemanticsActionHandlerSemanticsUpdateCallbackSemanticsTagCustomSemanticsActionAttributedStringAttributedStringPropertySemanticsData_SemanticsDiagnosticableNodeSemanticsHintOverridesSemanticsPropertiesdebugResetSemanticsIdCounterSemanticsNode_BoxEdge_SemanticsSortGroup_pointInParentCoordinates_childrenInDefaultOrder_TraversalSortNodeSemanticsOwnerSemanticsConfigurationDebugSemanticsDumpOrder_concatAttributedStringSemanticsSortKeyOrdinalSortKeyÅîOffsetRectSemanticsActionSemanticsFlagStringAttributeTextDirectionMatrixUtilsTransformPropertySemanticsBindingVoidCallbackDiagnosticLevelDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsTreeStyleKeyTextTreeConfigurationTextSelectionMatrix4SemanticsEventvisitChildrenboolvoidsetSelectionsetTextStringgetActionHandlerObjectonSemanticsUpdateSemanticsUpdateRenderSemanticsGestureHandleroverrideobjectRuntimeType	immutableinthashruntimeTypelabelhintactionMap	TextRange
isNotEmptyisEmptylength	attributerangestartendListstringof
attributescopyadd
listEqualsDiagnosticsPropertyshowNamelevelvaluedefaultValueisInterestingparentConfigurationlineBreakProperties
replaceAllmergeAllDescendantsIntoThisNodegetSemanticsDataDiagnosticableincreasedecreaseScrollPositionpixelsdoublemaxScrollExtentminScrollExtentAndroidView	UiKitViewisTextFieldSet	elevation	thicknessindexdebugFillPropertiesDoublePropertyvaluesdescribeEnummap	getActionactionIdtoListIterablePropertyifEmptyflagStringPropertyEnumPropertyisValidMessagePropertyIntPropertyflagsactionsattributedLabelattributedValueattributedIncreasedValueattributedDecreasedValueattributedHinttooltiptextDirectionrect	setEqualstagsscrollChildCountscrollIndextextSelectionscrollPositionscrollExtentMaxscrollExtentMinplatformViewIdmaxValueLengthcurrentValueLength	transformcustomSemanticsActionIdshashAlliDiagnosticableNodedebugDescribeChildren
childOrderDiagnosticableTree	onTapHintonLongPressHintCheckboxtristateexplicitChildNodesscopesRoute
namesRouteisImageSnackBarisLiveRegion
liveRegionDirectionalityincreasedValuedecreasedValueRenderObjectaddTagForChildrentap	longPress
scrollLeftscrollRightscrollUp
scrollDowncutpastemoveCursorForwardByCharactermoveCursorBackwardByCharactermoveCursorForwardByWordmoveCursorBackwardByWorddidGainAccessibilityFocus	FocusNode
FocusScopeFocusManagerdidLoseAccessibilityFocusdismisscustomActionid_lastIdentifierPipelineOwnerflushSemanticsAbstractNodeDiagnosticableTreeMixinshowOnScreenmatrixEquals
isIdentityzeroisFiniteisMergingSemanticsOfDescendantsanychild	identicalErrorDescriptionErrorSpacertoDiagnosticsNodenamestyle
singleLineFlutterError	fromPartsErrorSummary	ErrorHintnodeisMergedIntoParentparent_deadisInvisible	dropChildattached
adoptChild_visitDescendantsownerforEachredepthChildattach_nodescontainsKey_detachedNodesremovecontainsdetach_dirtyNodes_flags_sortKey_textSelection_scrollPosition_scrollExtentMax_scrollExtentMin_actionsAsBitsindexInParent_maxValueLength_currentValueLength_actions_customSemanticsActionsPhysicalModelAconfigchildrenInInversePaintOrderhintOverridessortKeyisMultiline_platformViewIdkeysgetIdentifieroverridingAction_textDirection_scrollChildCount_scrollIndex_attributedValue_attributedIncreasedValue_attributedDecreasedValue_tooltipaddAllthisAttributedStringthisTextDirectionotherAttributedString_attributedLabelotherTextDirection_attributedHintmax
_thickness
_elevationsortFloat64Listidentitystorage	Int32ListSemanticsUpdateBuilder
updateNodelabelAttributesvalueAttributesincreasedValueAttributesdecreasedValueAttributeshintAttributestextSelectionBase
baseOffsettextSelectionExtentextentOffsetscrollChildrennanchildrenInTraversalOrderchildrenInHitTestOrderadditionalActionspositionclearsortNodeSystemChannelsaccessibilitysendtoMapnodeIdFlagPropertyifTrueifFalsehiddeninfogetAsTranslationshift
getAsScaletoStringAsFixedtoStringsplittakeline	substringjoindescriptiontagwhereisHiddendebugtraversalOrdertoStringDeepprefixLineOneprefixOtherLinesminLevelsparseinverseHitTest
Comparable	compareTooffsetstartOffsetdeflateisLeadingEdgetopLeftdxbottomRightedgenodesrtlreversedexpandsortedWithinKnot	directioncenternextNodeltrpiabdyVector3
transform3xysortedWithinVerticalGroupensureSemanticsSemanticsHandleChangeNotifierFlutterViewdisposedepth_dirtyisPartOfNodeMerging
_markDirtyinstancecreateSemanticsUpdateBuilder_addToUpdateupdateCustomAction
overrideIdbuildnotifyListeners_canPerformActionargs_showOnScreencopyInversetransformPointhasChildren	_childrendescribeIdentityvisitChildrenForSemantics	addActionGestureDetectordynamiccastListTileselected
isSelectedExcludeSemanticshasEnabledState	isEnabledhasCheckedState	isCheckedisCheckStateMixedhasToggledState	isToggledRadioisInMutuallyExclusiveGroupisFocusable	isFocusedisButtonisLinkisHeaderisSliderisKeyboardKey
isReadOnly
isObscuredListViewTabBarhasImplicitScrollingIterableRenderViewportexcludeFromScrollinghasBeenAnnotated_hintOverrides_hasBeenAnnotated_isSemanticBoundary+isBlockingSemanticsOfPreviouslyPaintedNodes _isMergingSemanticsOfDescendants_tagsForChildren_indexInParentdebugDumpSemanticsTreeUnicodeRLEPDFLRE	protectedinfinitynegativeInfinityorder	DiagnosticsPropertyDiagnosticableDiagnosticableNodeDiagnosticableTreeAbstractNodeDiagnosticableTreeMixin
ComparableChangeNotifierSemanticsSortKeysHÿÚÂ¶.%ªE†¥  ÇmÇÃOffsetRectSemanticsActionSemanticsFlagStringAttributeTextDirectionVoidCallback Ç\dart:uiÇ¯ÉlDiagnosticLevelDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsTreeStyleKeyTextTreeConfiguration Çœpackage:flutter/foundation.dartÉïÉßTextSelection Énpackage:flutter/services.dartÉ⁄ÉÊMatrix4 É©'package:vector_math/vector_math_64.dartÑÑSemanticsEvent ÉÈsemantics_event.dart
  Ä¶  Ä∏mathÄª	dart:math  Ä¬  Ä“uiÄ’dart:uiÄÍÅ;OffsetRectSemanticsActionSemanticsFlagStringAttributeTextDirection Ä⁄  dart:ui  Å?  package:flutter/foundation.dartÅèÅ≤MatrixUtilsTransformProperty Åi  package:flutter/painting.dart  Åµ  package:flutter/services.dart  Å›  'package:vector_math/vector_math_64.dartÇ%Ç:SemanticsBinding Ç  binding.dart  Ç=  semantics_event.dart    	dart:core¿÷ì ¿ﬁQí≥ <ÄÜÄ§Ä•Ä¡ÄŸÅ=Å>ÅhÅ¥Å‹ÇÇÇ<Ç[Ç\ÇŒÇœÉnÉ©ÉËÉÈÑÑÑcÑgÑêÑîÑøÖÖÖ=ÖAÖèÖﬁÜÜ ÜlÜ´ÜÒÜÚá:ábáóáòáÃá–ààIàJàüà£à”ââ âAâEâÑâ—ää!äoäºä äŒããjã∏ã«ã‹ã¸ååRå¢åÚçç$ç%çbçhçÆç√çƒç–ééééOéSéïé›è%èmèºêêêêlê†ê§êÛëë
ëRë}ëÅëèëìë‰ëÔíí:í@íxí¥í—íÏíˇìììeìsìyì∞î"î>îXîvîäîãî…î‡î·ïï3ï4ïnïèïêïúï‘ï’ï·ññ0ñDñJñtñîñ≤ñ’ñŸñ⁄ñÊñ¸óYó]ó^óßó¿ó⁄ò4òäòãò∫òıôô/ôIôfôáôçô†ô§ô•ô‘öö!ö%ö'ö(ö`ököÑößö≠ö¯õõõXõgõ{õéõøõ˜ú
úHúZúêú¬ù
ùù!ù6ùBùCù{ùíùìùΩù√ûû/û0ûsûyû üüKüeüyüüüü≤ü∏üπüﬁ††h†è†∑†˘°'°X°Ö°ê°„¢¢¢¢b¢f¢g¢≥¢ø¢‚££3£U£õ£ü£†£¨£‰£Â£Ò§§h§l§n§o§π§˜•F•å•í•œ•Î¶¶¶)¶I¶a¶r¶â¶™¶»¶…ßßQßWß|ßòßôß•®®®%®l®Ö®ö®†®¡®Ë©©W©Ç©à©≠©≈©À™8™<™>™?™w™{™«´´h´z´~´º´«´Ò¨¨¨l¨r¨Ω¨œ¨Ë≠≠&≠I≠u≠°≠√≠ﬁ≠ˇÆÆ4ÆQÆrÆëÆµÆ◊Æ˙ØØ?ØaØáØñØ™ØÕØÎ∞∞3∞[∞å∞Ω∞‰±g≤≤©≥e¥!¥ø¥‹¥›µµ/µ0µqµÜµáµ∆µÃ∂∂∂E∂s∂t∂µ∂÷∂‹∑∑∑T∑~∑∑æ∑ƒ∑˝∏∏=∏k∏l∏≠∏Œ∏‘πππLπvπwπ≥π‹π‚∫∫!∫d∫§∫•∫·ª'ª-ªfªlªÆª·ª‚ººGºMºÜºåºœΩΩΩLΩíΩòΩ—Ω◊ææLæMæõæ°æ⁄æ‡øøEøFøìø∑øΩøˆø¸¿ @4¿ @]¿ @^¿ @ì¿ @ô¿ @“¿ @Í¿ @Î¿ A)¿ A_¿ AÖ¿ AÜ¿ A◊¿ B¿ B)¿ B*¿ Bv¿ B|¿ B…¿ B’¿ BÙ¿ Bı¿ C;¿ CU¿ CV¿ C¶¿ C∏¿ Cæ¿ D¿ DZ¿ D†¿ D¶¿ D∂¿ Dº¿ E¿ E&¿ E'¿ Ev¿ Eà¿ Eé¿ E…¿ Eœ¿ Eﬂ¿ EÂ¿ F8¿ FY¿ FZ¿ F©¿ Fª¿ F¡¿ F¸¿ G¿ G¿ G¿ Gk¿ Gå¿ Gç¿ G◊¿ GÙ¿ G˙¿ HH¿ Hí¿ Hß¿ H≠¿ HΩ¿ H√¿ I¿ I=¿ IZ¿ I[¿ Iß¿ Iπ¿ Iø¿ J¿ J ¿ J&¿ Jv¿ J∏¿ J’¿ J÷¿ K%¿ K7¿ K=¿ Kä¿ Kû¿ K§¿ Kı¿ L ¿ LA¿ LB¿ LÅ¿ Lî¿ Lï¿ L—¿ LÚ¿ LÛ¿ MM¿ MS¿ Mö¿ MÎ¿ M˙¿ N¿ N¿ N_¿ Ne¿ Nu¿ N{¿ NÀ¿ NÌ¿ O¿ O¿ ON¿ OT¿ Od¿ Oj¿ O∂¿ O–¿ O—¿ P¿ P;¿ PA¿ Pt¿ Pz¿ Pä¿ Pê¿ Pÿ¿ Q¿ Q¿ Q5¿ Qv¿ Qw¿ Q™¿ Qı¿ Qˆ¿ R¿ RH¿ RI¿ RU¿ Rö¿ R≈¿ S¿ Sw¿ S∆¿ T¿ TF¿ Tê¿ Tª¿ T€¿ T‚¿ U3¿ Uã¿ Uú¿ UÛ¿ V`¿ Va¿ Vê¿ V‘¿ V˚¿ W¿ W ¿ Ws¿ Wª¿ X¿ X]¿ X∑¿ X˝¿ YG¿ Y¨¿ Y◊¿ ZC¿ ZI¿ Z†¿ Z˜¿ [V¿ [Ø¿ \ ¿ \\¿ \∂¿ ]¿ ]¿ ]¿ ]#¿ ]F¿ ]h¿ ]à¿ ]¨¿ ]‡¿ ^¿ ^Z¿ ^†¿ ^“¿ ^ˆ¿ _&¿ _D¿ _k¿ _°¿ _Õ¿ _˝¿ `/¿ `c¿ `ó¿ `…¿ `˚¿ a5¿ a]¿ aÖ¿ a≠¿ b¿ b	¿ b
¿ b¿ b9¿ bD¿ bQ¿ bf¿ b{¿ bô¿ b∑¿ bÀ¿ bÿ¿ bÎ¿ bı¿ bˇ¿ c¿ c(¿ c9¿ cM¿ cb¿ cw¿ cã¿ cü¿ c∞¿ c ¿ c€¿ cÏ¿ c˝¿ dX¿ d_¿ dd¿ de¿ d™¿ d”¿ dÊ¿ dÏ¿ e¿ e>¿ eT¿ e\¿ eä¿ e≠¿ e≈¿ eÕ¿ e◊¿ eÍ¿ e¿ f¿ f¿ f¿ f	¿ fX¿ fy¿ fâ¿ f£¿ fΩ¿ f€¿ f·¿ f‚¿ g¿ g¿ g¿ gy¿ g{¿ g|¿ g√¿ g“¿ g÷¿ h¿ h¿ hH¿ hr¿ hì¿ hß¿ h¡¿ h·¿ i¿ i¿ i.¿ i4¿ if¿ il¿ i≥¿ i‡¿ iÊ¿ j¿ j)¿ jD¿ jE¿ jr¿ jx¿ j™¿ j∞¿ j˙¿ k4¿ k:¿ kl¿ kà¿ k©¿ k™¿ k‹¿ l#¿ l$¿ l0¿ lo¿ lp¿ l|¿ lü¿ lÀ¿ lﬂ¿ lÂ¿ m¿ m8¿ mm¿ mq¿ mr¿ m~¿ m√¿ mÓ¿ n>¿ nö¿ nû¿ n†¿ n°¿ n¿ o¿ o	¿ oY¿ om¿ ox¿ oØ¿ o‘¿ oÚ¿ p¿ p¿ p&¿ p9¿ pK¿ p\¿ pk¿ p|¿ pê¿ p°¿ p∑¿ p ¿ pﬁ¿ p¿ q¿ q$¿ q7¿ qK¿ qa¿ qv¿ qÜ¿ qõ¿ q¥¿ q—¿ q·¿ q˚¿ r¿ r%¿ r>¿ ra¿ rz¿ rù¿ r¨¿ ræ¿ r◊¿ rÔ¿ s¿ s¿ s2¿ sB¿ sX¿ so¿ sá¿ sú¿ s≥¿ s»¿ s›¿ sÓ¿ s˛¿ t¿ t9¿ tc¿ tá¿ t¨¿ t≈¿ tŸ¿ tˇ¿ u%¿ u9¿ uZ¿ uŒ¿ vB¿ v⁄¿ wr¿ w‚¿ w„¿ x3¿ xZ¿ x`¿ xÆ¿ x˘¿ y+¿ yB¿ yC¿ yà¿ yÕ¿ y›¿ y„¿ z#¿ zg¿ zâ¿ zè¿ zÃ¿ z„¿ z‰¿ {)¿ {m¿ {ß¿ {≠¿ {Î¿ |$¿ |`¿ |p¿ |v¿ |µ¿ | ¿ |À¿ }¿ }V¿ }f¿ }l¿ }©¿ }¿¿ }¡¿ ~¿ ~X¿ ~^¿ ~Æ¿ ~”¿ ~Î¿ ~Ï¿ 0¿ 6¿ É¿ ï¿ ´¿ ¨¿ Ó¿ Ù¿ ÄD¿ Äé¿ Äú¿ Ä∞¿ Ä±¿ Äı¿ Ä˚¿ ÅJ¿ Åò¿ ÅΩ¿ Å”¿ Å‘¿ Ç¿ Ç"¿ Çl¿ Ç~¿ Çó¿ Çò¿ Ç‹¿ Ç‚¿ É)¿ ÉB¿ ÉX¿ ÉY¿ É£¿ Éæ¿ Éø¿ É¸¿ Ñ¿ Ñ2¿ Ñ8¿ Ñ{¿ Ñì¿ Ñî¿ Ñ’¿ Ñ€¿ Ö"¿ Ö(¿ Öz¿ Öƒ¿ Ü¿ ÜT¿ Üm¿ Ün¿ ÜØ¿ Üµ¿ á¿ áF¿ áL¿ áû¿ áË¿ à9¿ àx¿ àè¿ àê¿ à›¿ à„¿ â3¿ ât¿ âú¿ âù¿ â◊¿ â›¿ ä,¿ ä}¿ äÉ¿ ä”¿ ã ¿ ã2¿ ã8¿ ãà¿ ãß¿ ã≠¿ ã˛¿ åL¿ åô¿ å—¿ åÁ¿ åË¿ ç¿ ç%¿ çr¿ ç¬¿ é¿ é¿ é ¿ én¿ é}¿ éÉ¿ éÕ¿ è¿ è¿ èB¿ è[¿ è\¿ è©¿ è◊¿ è›¿ ê¿ ê\¿ êí¿ êò¿ ê®¿ êÆ¿ ê˙¿ ë¿ ë1¿ ë2¿ ë¿ ëÖ¿ ëï¿ ëõ¿ ëÍ¿ í¿ í¿ í>¿ íD¿ íT¿ íZ¿ í†¿ íµ¿ í∂¿ í˛¿ ì¿ ìP¿ ìù¿ ì–¿ ì÷¿ î$¿ îr¿ î¿¿ ï¿ ïT¿ ï~¿ ïÑ¿ ïî¿ ïö¿ ïÎ¿ ñB¿ ñ\¿ ñ]¿ ñ©¿ ñª¿ ñ¡¿ ó¿ ó"¿ ó(¿ ór¿ ó´¿ ó»¿ ó…¿ ò¿ ò*¿ ò0¿ ò}¿ òë¿ òó¿ ò‡¿ òˇ¿ ô ¿ ô!¿ ôU¿ ô[¿ ô™¿ ô„¿ ôÈ¿ ö8¿ öL¿ öR¿ öb¿ öh¿ öπ¿ ö›¿ õ,¿ õC¿ õD¿ õó¿ õù¿ õÁ¿ ú1¿ ú7¿ úÜ¿ úö¿ ú†¿ ú∞¿ ú∂¿ ù¿ ù5¿ ùs¿ ùû¿ ùü¿ ù‡¿ ùÊ¿ û5¿ ûn¿ ût¿ û√¿ û◊¿ û›¿ ûÌ¿ ûÛ¿ üD¿ üh¿ ü∑¿ üŒ¿ üœ¿ † ¿ †5¿ †;¿ †Ö¿ †œ¿ †’¿ °$¿ °8¿ °>¿ °N¿ °T¿ °§¿ °”¿ ¢¿ ¢<¿ ¢=¿ ¢É¿ ¢Œ¿ ¢‘¿ £¿ £j¿ £Ç¿ £à¿ £¡¿ £˝¿ §¿ §¿ §¿ §h¿ §ó¿ §Â¿ §¯¿ •¿ •¿ •j¿ •∑¿ •Ω¿ ¶¿ ¶X¿ ¶Ä¿ ¶Ü¿ ¶ø¿ ¶˚¿ ß¿ ß¿ ß¿ ßg¿ ßü¿ ßÊ¿ ®¿ ®¿ ®a¿ ®¨¿ ®≤¿ ®˝¿ ©H¿ ©`¿ ©f¿ ©ü¿ ©€¿ ©·¿ ©Ò¿ ©˜¿ ™F¿ ™u¿ ™√¿ ™÷¿ ™ˆ¿ ™˜¿ ´H¿ ´ï¿ ´õ¿ ´Ï¿ ¨6¿ ¨^¿ ¨d¿ ¨ù¿ ¨Â¿ ¨Î¿ ¨˚¿ ≠¿ ≠Q¿ ≠â¿ ≠–¿ Æ¿ Æ¿ ÆU¿ Æj¿ Æp¿ Ææ¿ Æ˜¿ Æ˝¿ ØJ¿ Ø^¿ Ød¿ Øt¿ Øz¿ Ø ¿ ØÓ¿ ∞<¿ ∞R¿ ∞S¿ ∞§¿ ∞◊¿ ∞›¿ ±&¿ ±p¿ ±v¿ ±√¿ ±◊¿ ±›¿ ±Ì¿ ±Û¿ ≤B¿ ≤q¿ ≤Æ¿ ≤ÿ¿ ≤Ÿ¿ ≥¿ ≥¿ ≥n¿ ≥®¿ ≥€¿ ≥·¿ ¥#¿ ¥m¿ ¥Ü¿ ¥á¿ ¥–¿ ¥·¿ ¥Á¿ µ3¿ µÇ¿ µπ¿ µø¿ ∂¿ ∂=¿ ∂>¿ ∂Ö¿ ∂©¿ ∂Ø¿ ∂ﬂ¿ ∑¿ ∑¿ ∑U¿ ∑g¿ ∑m¿ ∑ª¿ ∏	¿ ∏0¿ ∏S¿ ∏T¿ ∏ú¿ ∏¢¿ ∏Ì¿ π<¿ π]¿ πc¿ π≠¿ π˛¿ ∫G¿ ∫M¿ ∫]¿ ∫c¿ ∫≥¿ ∫—¿ ∫˜¿ ∫¯¿ ª%¿ ª+¿ ª{¿ ªÀ¿ ªŸ¿ ªﬂ¿ º+¿ ºr¿ ºè¿ ºê¿ º√¿ º…¿ Ω¿ ΩT¿ ΩZ¿ Ω¶¿ Ωı¿ æ¿ æ*¿ æ+¿ æ_¿ æe¿ æ¥¿ ø¿ ø!¿ ø'¿ øw¿ ø√¿ ¿¿ ¿]¿ ¿p¿ ¿î¿ ¿ï¿ ¿ ¿ ¿–¿ ¡¿ ¡m¿ ¡å¿ ¡í¿ ¡„¿ ¬/¿ ¬|¿ ¬Ã¿ ¬ﬂ¿ √¿ √¿ √7¿ √=¿ √å¿ √⁄¿ √˜¿ √˝¿ ƒK¿ ƒó¿ ƒ‚¿ ≈1¿ ≈D¿ ≈f¿ ≈g¿ ≈õ¿ ≈°¿ ≈¿ ∆>¿ ∆[¿ ∆a¿ ∆±¿ ∆˝¿ «J¿ «ö¿ «≠¿ «—¿ «“¿ »¿ »
¿ »W¿ »õ¿ »°¿ »Á¿ …4¿ …:¿ …Ü¿ …÷¿ …Ó¿  ¿  ¿  C¿  I¿  ñ¿  ⁄¿  ‡¿ À&¿ Às¿ Ày¿ À«¿ Ã¿ Ã1¿ ÃS¿ ÃT¿ ÃÇ¿ Ãà¿ Ã–¿ Ã÷¿ Õ%¿ ÕN¿ Õl¿ Õm¿ Õö¿ Õ†¿ ÕÈ¿ Õ˙¿ Œ ¿ ŒO¿ Œx¿ Œï¿ Œñ¿ Œ≈¿ ŒÀ¿ œ¿ œ¿ œg¿ œê¿ œØ¿ œ∞¿ œˆ¿ œ¸¿ –F¿ –q¿ –w¿ –≈¿ –Î¿ —&¿ —'¿ —n¿ —t¿ —æ¿ —Í¿ —¿ “@¿ “f¿ “¢¿ “£¿ “‰¿ “Í¿ ”4¿ ”[¿ ”a¿ ”±¿ ”◊¿ ‘¿ ‘¿ ‘P¿ ‘V¿ ‘†¿ ‘«¿ ‘Õ¿ ’¿ ’C¿ ’z¿ ’{¿ ’±¿ ’∑¿ ÷¿ ÷R¿ ÷X¿ ÷£¿ ÷Â¿ ◊¿ ◊¿ ◊D¿ ◊J¿ ◊õ¿ ◊¡¿ ◊«¿ ÿ¿ ÿ3¿ ÿV¿ ÿW¿ ÿö¿ ÿ†¿ ÿÓ¿ Ÿ,¿ Ÿt¿ Ÿæ¿ ŸË¿ ŸÓ¿ ⁄?¿ ⁄ê¿ ⁄ﬁ¿ ⁄‰¿ ⁄Ù¿ ⁄˙¿ €J¿ €s¿ €≈¿ €¯¿ €˘¿ ‹<¿ ‹B¿ ‹ä¿ ‹ ¿ ›¿ ›`¿ ›ä¿ ›ê¿ ›·¿ ﬁ2¿ ﬁÄ¿ ﬁÜ¿ ﬁñ¿ ﬁú¿ ﬁÈ¿ ﬂ¿ ﬂY¿ ﬂå¿ ﬂç¿ ﬂæ¿ ﬂƒ¿ ‡¿ ‡	¿ ‡V¿ ‡•¿ ‡√¿ ‡‰¿ ‡Â¿ ·4¿ ·:¿ ·Ñ¿ ·”¿ ‚!¿ ‚r¿ ‚x¿ ‚à¿ ‚é¿ ‚÷¿ „ ¿ „!¿ „-¿ „r¿ „ù¿ „Ù¿ ‰G¿ ‰†¿ ‰Ë¿ ÂN¿ Âñ¿ Â¸¿ ÊM¿ Ê≈¿ Á¿ Áé¿ Á‘¿ Ë8¿ Ëp¿ Ë’¿ È8¿ È≠¿ È±¿ È≤¿ Èæ¿ Í@¿ ÍB¿ ÍC¿ Íà¿ Í†¿ Í∆¿ ÍÎ¿ ÍÌ¿ ÍÓ¿ Î¿ Î!¿ Îq¿ Î∏¿ Ï¿ Ï"¿ Ïj¿ Ïâ¿ Ïè¿ Ïﬂ¿ ÏÒ¿ Ì¿ Ì¿ Ì1¿ ÌP¿ Ìu¿ Ìv¿ Ì¡¿ Ì«¿ Ì˛¿ Ó¿ Ó#¿ ÓC¿ Óf¿ Óv¿ Óú¿ ÓØ¿ Ó≥¿ Ó¥¿ Óµ¿ Ó˚¿ Ô ¿ Ôc¿ Ô≈¿ Ôˆ¿ =¿ >¿ `¿ Ä¿ ‘¿ ¿ Ù¿ ı¿ Ò7¿ Ò=¿ Òç¿ ÒÆ¿ Ò¿¿ Ò¡¿ ÒÏ¿ ÒÚ¿ Ú;¿ Úã¿ Úπ¿ Úø¿ Û¿ ÛS¿ Ûç¿ Û¢¿ Û≠¿ ÛÆ¿ Û”¿ Û‘¿ Û‚¿ Û„¿ Ù=¿ ÙC¿ Ùä¿ Ù€¿ ÙÍ¿ ı¿ ı)¿ ıK¿ ıÉ¿ ı’¿ ıÈ¿ ıÔ¿ ıÛ¿ ıÙ¿ ˆ3¿ ˆM¿ ˆg¿ ˆÄ¿ ˆõ¿ ˆÓ¿ ˜¿ ˜¿ ˜1¿ ˜7¿ ˜;¿ ˜<¿ ˜Ñ¿ ˜ä¿ ˜€¿ ˜Ô¿ ˜ı¿ ¯E¿ ¯ï¿ ¯Â¿ ˘3¿ ˘b¿ ˘h¿ ˘Ø¿ ˘Î¿ ˘Ò¿ ˙-¿ ˙|¿ ˙ç¿ ˙Æ¿ ˙Ø¿ ˙Ù¿ ˙˙¿ ˚K¿ ˚_¿ ˚e¿ ˚µ¿ ¸¿ ¸S¿ ¸ì¿ ¸ô¿ ¸ﬁ¿ ¸‰¿ ˝.¿ ˝K¿ ˝L¿ ˝ë¿ ˝ó¿ ˝·¿ ˛+¿ ˛s¿ ˛Ω¿ ˇ¿ ˇ¿ ˇ ¿ ˇm¿ ˇµ¿ ˇª¿ ˇÀ¿ ˇ—¿ ¿ 4¿ 5¿ Å¿ á¿ œ¿¿n¿†¿∂¿∑¿‹¿‚¿1¿¿≈¿·¿Á¿4¿É¿§¿„¿‰¿Ò¿Ú¿A¿w¿õ¿¬¿›¿¿¿¿:¿L¿P¿Q¿ú¿¢¿Û¿#¿)¿9¿?¿]¿à¿·¿‚¿>¿é¿Á¿Ë¿È¿˜¿¯¿B¿d¿e¿¥¿	¿	¿	I¿	J¿	Ö¿	À¿	€¿

¿
T¿
ó¿
∆¿¿B¿P¿a¿ö¿„¿¿E¿U¿¥¿8¿¬¿–¿‹¿Ê¿¿I¿¿¿<¿l¿ã¿ô¿£¿´¿¿¿X¿Y¿~¿Ø¿‘¿‹¿(¿;¿E¿U¿ñ¿Õ¿ˆ¿¿-¿7¿8¿p¿ç¿√¿ﬂ¿Á¿Ì¿"¿é¿©¿Ø¿À¿Ë¿¿9¿_¿§¿‹¿˙¿¿"¿,¿4¿:¿o¿ë¿µ¿¿J¿ê¿ÿ¿¿:¿D¿e¿Ä¿ö¿¢¿®¿”¿ˆ¿-¿L¿Ä¿µ¿—¿‚¿Ï¿Ù¿˙¿¿,¿@¿F¿J¿K¿Ü¿¿¿÷¿◊¿¿C¿D¿v¿|¿Õ¿¿.¿c¿Ä¿∂¿’¿Á¿Ò¿˘¿ˇ¿¿¿2¿8¿á¿–¿˛¿7¿T¿ä¿Œ¿Ê¿¿¯¿˛¿¿¿¿0¿1¿=¿|¿}¿â¿»¿…¿’¿¿¿¿¿'¿M¿f¿ë¿‚¿ &¿ D¿ J¿ g¿ é¿ †¿ ∂¿  ¿ –¿ Ì¿!#¿!@¿!H¿!N¿!R¿!S¿!_¿!q¿!ú¿!œ¿!Ì¿"¿"&¿"A¿"^¿"î¿"·¿#¿#5¿#O¿#Y¿#a¿#g¿#´¿#Ï¿$¿$ ¿$$¿$%¿$;¿$<¿$S¿$i¿${¿$â¿$è¿$¢¿$∂¿$Î¿%¿%¿%¿%¿%l¿%¢¿%÷¿& ¿&*¿&`¿&®¿&¿'¿'9¿'k¿'í¿'≈¿'˙¿(1¿(h¿(õ¿(Ã¿(ˇ¿)4¿)q¿)»¿)Ã¿)Õ¿)Ë¿)È¿*;¿*ß¿*®¿*›¿*ﬁ¿+¿+¿+h¿+â¿+§¿+•¿+”¿,¿,¿,C¿,D¿,É¿,√¿,ƒ¿,Ó¿,Ù¿--¿-3¿-m¿-ú¿-ù¿-‰¿-Í¿.#¿.)¿.b¿.û¿.„¿.‰¿/#¿/)¿/b¿/h¿/¢¿/—¿/“¿0¿04¿0:¿0s¿0y¿0≤¿0Ó¿13¿14¿1Ö¿1ü¿1•¿1Û¿2¿2¿2P¿2V¿2ô¿2⁄¿2€¿3*¿3x¿3~¿3Ã¿3Í¿3¿4)¿4/¿4q¿4ø¿5¿5¿5h¿5Ç¿5à¿5÷¿5Ù¿5˙¿63¿69¿6|¿6Ω¿6æ¿7¿7[¿7a¿7Ø¿7Õ¿7”¿8¿8¿8T¿8¢¿8˘¿8˙¿9H¿9N¿9á¿9ç¿9∆¿9Û¿9Ù¿:A¿:e¿:k¿:§¿:™¿:‚¿;¿;_¿;`¿;ï¿;õ¿;‘¿;ˆ¿<!¿<"¿<s¿<ñ¿<ú¿<‰¿=4¿=]¿=c¿=s¿=y¿=¬¿>¿>O¿>u¿>§¿>•¿>Û¿>˘¿?C¿?ê¿?ﬂ¿@(¿@x¿@¡¿@«¿@›¿A)¿AQ¿AW¿Aß¿AÏ¿B¿B¿Bh¿BÈ¿BÔ¿C?¿Cå¿CŸ¿C˝¿D¿D%¿DB¿D\¿DÄ¿D´¿DÃ¿DË¿E¿E1¿EP¿Et¿EÉ¿Eê¿Eõ¿E£¿E≠¿Eø¿E≈¿E’¿E€¿F%¿Fu¿Fõ¿F ¿FÀ¿G¿G%¿Gd¿Gé¿Gè¿Gﬂ¿G˜¿H-¿Hl¿Hm¿Hº¿HŒ¿H‘¿I"¿Ip¿Ió¿Iƒ¿I‚¿I„¿J4¿J`¿Jñ¿J∑¿J∏¿K¿K%¿KN¿Kd¿Ke¿K±¿K∑¿L¿L¿LB¿L\¿L]¿L£¿LÀ¿L‡¿L·¿M1¿MC¿MI¿Mô¿MÂ¿N+¿N1¿NA¿NG¿Në¿N¬¿N›¿Nﬁ¿O-¿O?¿OE¿OÄ¿OÜ¿Oñ¿Oú¿OÔ¿P"¿P>¿P?¿Pé¿P†¿P¶¿P·¿PÁ¿P˜¿P˝¿QO¿QÇ¿Qû¿Qü¿QÈ¿R¿R¿RZ¿R§¿Rπ¿Rø¿Rœ¿R’¿S¿SO¿S}¿Sï¿Sñ¿S‚¿SÙ¿S˙¿TG¿T[¿Ta¿T±¿TÛ¿U!¿U9¿U:¿Uâ¿Uõ¿U°¿UÓ¿V¿V¿VW¿V¿Vµ¿V—¿V“¿W$¿W%¿Wu¿Wv¿W≈¿X¿X:¿X@¿Xç¿Xª¿X¡¿Y¿Y`¿Yt¿Y°¿Y◊¿Yﬁ¿Y¸¿Z9¿ZM¿ZS¿ZT¿Z`¿Z”¿[¿[#¿[$¿[S¿[Ç¿[√¿\¿\1¿\P¿\{¿\û¿\¡¿\›¿]¿]'¿]x¿]„¿^¿^;¿^b¿^ê¿^¿¿^¿_?¿_p¿_ó¿_¡¿_Ô¿`¿`S¿`°¿`¢¿`Æ¿a¿aå¿aì¿aü¿a˛¿b}¿bÑ¿bà¿bâ¿bä¿b¬¿b»¿c¿ce¿cò¿cΩ¿c’¿c˜¿d0¿di¿d¥¿dˇ¿e6¿eU¿eà¿eﬂ¿f¿fA¿ff¿fî¿fƒ¿fÙ¿g¿gJ¿g}¿g¶¿g…¿h ¿hO¿h†¿h¶¿h«¿hı¿iJ¿iu¿iú¿iß¿i˙¿j¿j6¿jã¿jº¿jÈ¿jÙ¿kG¿kO¿kU¿kV¿kÅ¿k∞¿kŸ¿k˜¿l¿lN¿l}¿l≤¿l›¿m¿mA¿mt¿m•¿m÷¿n¿nV¿nâ¿nì¿nÏ¿o1¿o;¿oî¿oŸ¿o„¿p ¿p#¿p-¿pN¿py¿p£¿p≠¿q ¿qU¿q_¿qâ¿q¿¿r¿rM¿rx¿rá¿rﬁ¿rÍ¿s'¿sÄ¿s∫¿sÎ¿s˙¿tQ¿t]¿tg¿tö¿tÀ¿t˜¿u/¿ub¿um¿uü¿uœ¿u˚¿v2¿ve¿vp¿vq¿vΩ¿væ¿v”¿v›¿v„¿v‰¿v˛¿w¿w*¿wR¿wz¿w¥¿wÓ¿x¿x,¿xP¿xb¿x~¿xö¿x∂¿xŒ¿xÚ¿y¿y<¿yb¿yä¿y≤¿yÿ¿y˛¿z,¿zw¿z~¿zÇ¿zÉ¿z≥¿z⁄¿zﬁ¿zﬂ¿{¿{d¿{Ø¿{∞¿|¿|&¿|Y¿|á¿|≥¿|Ó¿}!¿}R¿}_¿}è¿}›¿~¿~E¿~Å¿~â¿~⁄¿~Í¿ ¿U¿ú¿§¿™¿”¿Ä¿Äd¿Ä¨¿Äı¿ÅD¿ÅL¿ÅR¿Åj¿Åx¿Åë¿ÅÆ¿Å≈¿ÅÔ¿Ç'¿ÇQ¿Çâ¿Ç≈¿É¿ÉK¿Éï¿ÉΩ¿ÉÛ¿Ñ¿Ñ9¿Ñî¿ÑÛ¿Ö$¿ÖU¿Öé¿Ö¿¿ÖÎ¿Ü$¿Ü_¿Üö¿Ü€¿Ü¸¿á¿áW¿áç¿áÂ¿áÏ¿à ¿à¿à¿àU¿àâ¿àƒ¿àÍ¿â+¿âb¿âÑ¿âä¿âã¿âº¿âÊ¿äB¿äO¿äë¿äª¿ä¡¿ä¬¿ã¿ã`¿ã≠¿ãÙ¿åB¿åâ¿å¨¿ç¿çG¿ç~¿çü¿çÿ¿çÍ¿é.¿éj¿é¨¿éÚ¿èB¿èb¿èÖ¿è°¿è´¿è◊¿èÚ¿è˙¿è˚¿ê#¿ê8¿êR¿ên¿êx¿ê~¿ê¿êÀ¿êÁ¿ë¿ë¿ë$¿ëL¿ëM¿ëi¿ë≥¿ëƒ¿ë»¿ë…¿í¿í¿í]¿íÆ¿í◊¿íÏ¿í˙¿ì ¿ì@¿ìD¿ìE¿ìQ¿ì†¿ì°¿ì≠¿ìÚ¿î¿î8¿îJ¿îû¿ï
¿ï*¿ï0¿ïª¿ñ&¿ñ∞¿ó¿ó*¿óà¿óï¿ó¿ò¿ò&¿òl¿òπ¿ô<¿ôt¿ô|¿ôÊ¿ôÏ¿öa¿ö‡¿õ.¿õr¿õÉ¿õ‘¿ú;¿ú˝¿ùJ¿ù§¿û¿ûU¿ûû¿û˘¿üT¿üõ¿üÊ¿†L¿†Ø¿†€¿°J¿°P¿°ß¿°˛¿¢]¿¢∂¿£¿£c¿£Ω¿§¿§h¿§∑¿§ª¿§º¿•¿•
¿•Z¿•ä¿•ñ¿•Æ¿•Õ¿•Î¿¶!¿¶r¿¶y¿¶ô¿ß2¿ß6¿ß7¿ßC¿ßi¿ß{¿ß∫¿®¿®¿®;¿®M¿®`¿®t¿®í¿®ô¿®ù¿®û¿®™¿©+¿©[¿©ø¿©–¿©‘¿©’¿™$¿™y¿™ô¿™∂¿™‹¿™‚¿™„¿™˝¿´0¿´K¿´~¿´™¿´∞¿´¥¿´∂¿´∑¿¨¿¨?¿¨C¿¨ì¿¨‡¿≠9¿≠â¿≠‘¿Æ¿Æ¿Æ3¿ÆM¿Æe¿Æã¿Æ™¿Æ ¿ÆÁ¿ÆË¿Ø1¿ØW¿Ø]¿Ø}¿ØÉ¿Ø◊¿∞)¿∞y¿∞ç¿∞©¿∞™¿∞Ù¿±¿±-¿±.¿±U¿±q¿±r¿±~¿±†¿±À¿±œ¿±—¿±“¿≤!¿≤W¿≤[¿≤§¿≤Ë¿≥ ¿≥¿≥@¿≥d¿≥e¿≥Ø¿≥—¿≥◊¿¥#¿¥H¿¥d¿¥e¿¥ä¿¥ã¿¥Ω¿¥Ù¿¥ı¿µ¿µ.¿µc¿µg¿µh¿µ∏¿µæ¿∂¿∂<¿∂p¿∂ü¿∂Œ¿∑¿∑R¿∑l¿∑â¿∑—¿∑Ê¿∑¿∏
¿∏(¿∏t¿∏â¿∏ì¿∏ô¿∏´¿∏¨¿∏ˆ¿π¿π)¿πR¿πr¿πÜ¿π≠¿π—¿π˘¿∫¿∫(¿∫7¿∫K¿∫S¿∫k¿∫ë¿∫ß¿∫Ø¿∫µ¿∫“¿∫”¿ª¿ª>¿ªD¿ªE¿ªa¿ª®¿ªπ¿ªΩ¿ªæ¿º
¿º¿º_¿ºÄ¿ºÜ¿º‘¿Ω!¿Ωq¿Ωò¿Ωû¿ΩÈ¿æ9¿æá¿æ÷¿ø¿ø-¿øJ¿øp¿øÑ¿øä¿øŒ¿ø¸¿¿*¿¿I¿¿ò¿¿Ã¿¡¿¡b¿¡á¿¡õ¿¡•¿¡¶¿¬¿¬;¿¬o¿¬ß¿¬Ú¿√7¿√Ç¿√Õ¿√ˇ¿ƒ'¿ƒ1¿ƒ9¿ƒ?¿ƒ@¿ƒi¿ƒí¿ƒ˜¿≈C¿≈è¿≈“¿≈Ò¿∆¿∆¿∆I¿∆Q¿∆R¿∆l¿∆ë¿∆°¿∆©¿∆√¿∆Ê¿«¿«
¿«#¿«)¿«*¿«t¿«“¿«÷¿«ÿ¿«Ÿ¿»¿»_¿»¿»ë¿»ï¿»–¿»ˆ¿…¿…¿…¿…n¿…|¿…Ä¿…Œ¿ ¿ Y¿ ]¿ è¿ ƒ¿ »¿À¿Àá¿À¥¿À‰¿Ã¿ÃQ¿ÃÖ¿Ãù¿Ã∏¿Ã˛¿Õ¿Õ¿Õ1¿ÕM¿Õó¿Õ™¿Õ≤¿Õ∂¿Õ∆¿Õ«¿Œ¿Œ1¿ŒB¿Œi¿Œá¿Œô¿Œæ¿Œ‡¿œ¿œ¿œ1¿œ>¿œP¿œV¿œl¿œé¿œ¢¿œ®¿œ¨¿œ≈¿œ∆¿œﬁ¿–,¿–;¿–=¿–>¿–Ö¿–∫¿–æ¿—¿—¿—[¿—£¿—Ë¿—ˇ¿“¿“)¿“E¿“J¿“f¿“Ü¿“á¿“¿¿“‹¿“›¿”¿”"¿”a¿”s¿”ñ¿”ó¿”‰¿”Ò¿‘¿‘¿‘¿‘@¿‘t¿‘ú¿‘¢¿‘—¿‘’¿‘◊¿‘ÿ¿’"¿’=¿’A¿’ç¿’‘¿’„¿÷¿÷e¿÷x¿÷ù¿÷£¿÷§¿÷ˆ¿◊E¿◊]¿◊c¿◊≥¿ÿ¿ÿ+¿ÿ^¿ÿö¿ÿ€¿Ÿ¿Ÿ¿ŸN¿ŸT¿Ÿà¿ŸΩ¿Ÿæ¿Ÿ ¿Ÿ›¿Ÿˆ¿⁄
¿⁄&¿⁄;¿⁄?¿⁄@¿⁄v¿⁄ï¿⁄¥¿⁄¬¿⁄»¿⁄ˇ¿€?¿€d¿€Í¿‹¿‹#¿‹x¿‹§¿‹ﬁ¿‹˚¿›`¿›à¿›◊¿ﬁ5¿ﬁ~¿ﬁ–¿ﬂ ¿ﬂ,¿ﬂ6¿ﬂ>¿ﬂD¿ﬂî¿ﬂ¸¿‡1¿‡é¿‡–¿·¿·[¿·ú¿·¿¿‚¿‚D¿‚ä¿‚Œ¿‚„¿„¿„K¿„S¿„Y¿„r¿„≠¿‰¿‰Ñ¿‰ä¿‰≤¿‰…¿‰Õ¿‰Œ¿Â*¿ÂR¿ÂØ¿ÂÂ¿Ê¿Ê,¿Ê^¿Êh¿Êé¿Êò¿Êû¿Êﬁ¿ÊÒ¿Ê˜¿Á¿Á ¿Á!¿Áo¿Áu¿Áƒ¿ÁÊ¿ÁÏ¿Ë9¿ËU¿Ëû¿Ë∫¿È¿È.¿ÈC¿ÈQ¿ÈW¿ÈX¿Èç¿È‰¿Í¿Í¿Í¿Í¿Íí¿Í¥¿ÍÊ¿Î¿Î4¿Î<¿Î|¿ÎÇ¿Î´¿Îæ¿Îƒ¿ÎÙ¿Ï¿ÏF¿Ïu¿Ïè¿Ïß¿Ï±¿Ï∆¿Ï–¿Ï˜¿Ï˝¿Ì¿Ì]¿ÌÕ¿ÌÏ¿Ó¿Ó¿Ó¿Ó¿Ó@¿ÓD¿ÓE¿Óó¿Óù¿ÓÏ¿Ô¿Ô¿Ôa¿Ô}¿Ô—¿ÔÌ¿ ¿8¿F¿L¿∑¿“¿Á¿Ì¿Ò¿Ú¿˛¿Ò-¿Ò/¿Ò0¿Òr¿ÒÜ¿Òä¿Ò‘¿ÒË¿Ú¿Ú¿Ú(¿Ú)¿Úw¿Úí¿Úò¿ÚÁ¿Û6¿ÛÇ¿Ûõ¿Û°¿ÛÔ¿Ù9¿Ùf¿Ùl¿Ùπ¿ÙÔ¿ı¿ı:¿ıq¿ıí¿ıñ¿ıó¿ıË¿ˆ7¿ˆj¿ˆp¿ˆΩ¿˜¿˜?¿˜ç¿˜€¿¯¿¯¿¯_¿¯Æ¿¯—¿¯“¿˘!¿˘o¿˘¿˘Ö¿˘‘¿˙ ¿˙o¿˙ö¿˙†¿˙¿˚>¿˚Ö¿˚ã¿˚€¿¸¿¸R¿¸S¿¸m¿¸ß¿¸«¿¸»¿¸Û¿¸˘¿˝G¿˝x¿˝™¿˝Ã¿˝Õ¿˛¿˛O¿˛U¿˛e¿˛k¿˛í¿˛ˇ¿ˇ ¿ˇ¿ˇ¿ˇI¿ˇO¿ˇó¿ˇß¿ˇÛ¿ ¿ 0¿ T¿ r¿ v¿ w¿ ≈¿ ⁄¿ ‡¿(¿8¿Ü¿£¿À¿Á¿¯¿ ¿¿¿2¿8¿à¿ÿ¿Ê¿Ï¿8¿¿Ö¿–¿¿o¿Ω¿¿^¿©¿˜¿?¿ê¿–¿ı¿¿0¿i¿}¿Å¿Ç¿µ¿ª¿¿F¿L¿ò¿Á¿˘¿	*¿	H¿	q¿	∞¿	 ¿	Œ¿	œ¿
¿
	¿
X¿
¶¿
≈¿
À¿¿g¿≤¿¿¿G¿f¿ê¿–¿Î¿Ô¿¿!¿'¿f¿l¿π¿¿&¿S¿o¿ñ¿”¿Î¿Ô¿¿%¿+¿z¿»¿Á¿Ì¿>¿ä¿◊¿'¿:¿o¿è¿∫¿˚¿¿¿¿N¿T¿£¿Ò¿¿¿b¿Æ¿˘¿H¿[¿ä¿ß¿œ¿¿&¿*¿+¿_¿e¿¥¿¿¿%¿u¿¡¿¿^¿q¿§¿√¿Ì¿-¿H¿L¿M¿¿Ö¿“¿¿¿e¿•¿Ω¿√¿¿_¿w¿¶¿√¿Î¿)¿B¿F¿G¿y¿¿Ã¿¿¿_¿ü¿∑¿Ω¿¿[¿u¿§¿¡¿È¿'¿@¿D¿E¿s¿y¿¡¿«¿¿?¿f¿¿£¿›¿Ú¿ˆ¿˜¿ $¿ *¿ s¿ Ñ¿ ä¿ Ÿ¿!¿!'¿!?¿!b¿!õ¿!Ø¿!≥¿!¥¿!„¿!È¿"0¿"6¿"Ö¿"Æ¿"◊¿"Ò¿#¿#Q¿#g¿#k¿#l¿#¢¿#®¿#ˆ¿$F¿$j¿$p¿$π¿%¿%#¿%Z¿%{¿%ß¿%È¿&¿&
¿&¿&Q¿&W¿&°¿&Ã¿&“¿' ¿'F¿'¢¿'ÿ¿(¿(4¿(Ç¿(¥¿(”¿(€¿)¿)¿)¿)T¿)Z¿)§¿)–¿)÷¿*&¿*L¿*™¿*·¿+#¿+>¿+ç¿+ø¿+ﬁ¿+Ê¿,¿,¿,¿,Z¿,`¿,™¿,—¿,◊¿-'¿-M¿-ü¿-–¿.¿.'¿.p¿.¢¿.¡¿.…¿.ˆ¿.˙¿.˚¿/=¿/C¿/ç¿/¥¿/∫¿0
¿00¿0Ñ¿0∂¿0Û¿1¿1X¿1ä¿1©¿1±¿1ﬂ¿1„¿1‰¿2¿2 ¿2q¿2ª¿2¡¿3¿3N¿3å¿3¥¿3Á¿4¿4@¿4k¿4 ¿5'¿5C¿5k¿5ó¿5°¿5©¿5∆¿5 ¿5À¿5¸¿6¿6S¿6y¿6¿6Œ¿6Î¿7¿78¿7a¿7|¿7µ¿7„¿8¿8"¿8*¿8B¿8F¿8G¿8ä¿8ê¿8ﬁ¿9¿9d¿9Æ¿9ÿ¿9ﬁ¿:/¿:Ä¿:Œ¿:‘¿:‰¿:Í¿;:¿;c¿;µ¿<¿<4¿<m¿<º¿<Ê¿<Í¿<Î¿=.¿=4¿=|¿=º¿>¿>R¿>|¿>Ç¿>”¿?$¿?r¿?x¿?à¿?é¿?€¿?˘¿@K¿@ú¿@ ¿A¿AR¿A|¿AÄ¿AÅ¿AŒ¿A‡¿B8¿B9¿Bà¿Bö¿B†¿BÓ¿C<¿Cc¿Ci¿C∏¿D¿DI¿Dq¿Dû¿Dº¿DÂ¿E ¿E¿E4¿E8¿E9¿EÖ¿Eã¿E”¿F"¿Fr¿F§¿F–¿FÁ¿G	¿G%¿GC¿GG¿GH¿Gî¿Gö¿GÁ¿GÛ¿H%¿H?¿Hd¿Hâ¿Hó¿Hù¿Hº¿H⁄¿Hﬁ¿Hﬂ¿I)¿I:¿Ib¿Iw¿Ió¿I∑¿I≈¿IÀ¿IÂ¿J¿J¿J¿JR¿Jo¿Jù¿Jµ¿Jÿ¿J˚¿K	¿K¿K,¿KJ¿KN¿KO¿Kõ¿K≠¿K≥¿L ¿L¿L¿Lf¿Lü¿LÕ¿LÂ¿M¿M+¿M9¿M?¿M\¿Mz¿M~¿M¿MŒ¿M‡¿MÊ¿N3¿NG¿NM¿Nò¿N∑¿NÌ¿O	¿O0¿OW¿Oe¿Ok¿Oå¿O™¿OÆ¿OØ¿P ¿PF¿PL¿Pë¿P÷¿Q¿Q¿Qf¿Q∂¿QÁ¿R¿R;¿Ri¿Rá¿Rã¿Rå¿RÀ¿R—¿S¿Sg¿S∞¿SÁ¿TI¿T∑¿U¿U$¿U^¿UÉ¿U ¿UŒ¿Uœ¿Uˇ¿VX¿Vr¿VÄ¿VÜ¿V ¿VÊ¿V¯¿V˛¿W¿W¿W=¿WC¿WÖ¿Wã¿Wƒ¿W ¿W⁄¿W‡¿X.¿X]¿Xy¿Xî¿Xƒ¿X‚¿XÊ¿XÁ¿Y6¿YD¿YJ¿Yî¿Y„¿Z/¿Zx¿Zπ¿Zø¿Z¯¿Z˛¿[¿[¿[N¿[ä¿[∆¿\ ¿\(¿\F¿\J¿\K¿\õ¿\°¿\„¿\È¿]"¿](¿]8¿]>¿]å¿]⁄¿^ ¿^n¿^¥¿^„¿^ˇ¿_¿_J¿_h¿_l¿_m¿_º¿_‡¿_Ê¿`0¿`¿`À¿a¿aU¿a[¿aî¿aö¿a™¿a∞¿aÍ¿b:¿bj¿b∫¿bÍ¿c&¿cb¿cú¿cƒ¿c‚¿cÊ¿cÁ¿d!¿dJ¿dP¿dõ¿d°¿d¿e:¿ee¿ek¿e§¿e™¿e∫¿e¿¿f¿fX¿fÜ¿f™¿fÏ¿g
¿g¿g¿gI¿gè¿gï¿g‰¿h.¿hY¿h_¿hò¿hû¿hÆ¿h¥¿h˜¿iE¿iä¿i÷¿j¿j.¿j2¿j3¿jm¿jñ¿jú¿jÁ¿jÌ¿k<¿kÜ¿k±¿k∑¿k¿kˆ¿lM¿lé¿lº¿l‡¿m"¿m@¿mD¿mE¿m¿m≈¿mÀ¿n¿nd¿nè¿nï¿nŒ¿n‘¿n‰¿nÍ¿o-¿o{¿o¿¿p¿pF¿pd¿ph¿pi¿p∑¿pΩ¿p˛¿q¿q=¿qC¿qS¿qY¿q¶¿q”¿qÌ¿r¿r5¿rS¿rW¿rX¿r®¿r…¿rœ¿s¿sg¿s¥¿s˝¿t>¿tD¿t}¿tÉ¿tì¿tô¿t“¿u¿uG¿u¿u•¿u√¿u«¿u»¿u˝¿v¿v<¿v^¿vv¿vñ¿vÆ¿vÃ¿v–¿v—¿w¿w+¿wj¿wî¿w…¿w‚¿w¿wˆ¿x¿x0¿x4¿x5¿x~¿x§¿x ¿xÂ¿y¿y0¿yO¿y]¿yc¿y{¿yô¿yù¿yû¿yÔ¿z¿z¿z[¿z™¿zæ¿z‰¿zˇ¿{¿{J¿{i¿{w¿{}¿{ï¿{≥¿{∑¿{∏¿|¿|¿|$¿|4¿|:¿|â¿|»¿|Ë¿}¿}¿}¿}]¿}c¿}s¿}y¿}∆¿~¿~"¿~Q¿~U¿~V¿~å¿~√¿~ﬂ¿¿¿¿C¿I¿ï¿‚¿Ä¿Ä¿Äi¿Ä∑¿Å¿ÅJ¿Åô¿Å√¿Å…¿ÅŸ¿Åﬂ¿Ç5¿Çt¿Çì¿Çƒ¿Ç»¿Ç…¿É¿É=¿És¿Éî¿É»¿ÉÏ¿Ñ
¿Ñ¿Ñ¿ÑZ¿Ñ`¿Ñ≠¿Ö ¿ÖR¿Öä¿Ö«¿ÖÊ¿Ü¿Ü¿Ü¿ÜX¿Ü^¿ÜØ¿Ü˛¿á3¿á9¿áâ¿á≠¿á≥¿à¿à/¿à5¿àà¿àﬁ¿àÏ¿âY¿âx¿â´¿â⁄¿âﬁ¿âﬂ¿ä0¿ä{¿äè¿äï¿äÊ¿ã-¿ã3¿ã|¿ãõ¿å¿å'¿å_¿åí¿å¡¿å≈¿å∆¿ç¿ç:¿ç@¿çë¿çÿ¿çﬁ¿é'¿éB¿éø¿éÊ¿è¿èI¿èÄ¿èÑ¿èÖ¿è÷¿ê$¿ê*¿ê{¿ê∑¿êΩ¿ë¿ë¿ëá¿ë¶¿ëŸ¿í¿í¿í¿í]¿íì¿íô¿íÊ¿ì.¿ìã¿ì∫¿ì˘¿ì˝¿ì˛¿î@¿î¿îü¿îœ¿î”¿î‘¿ï¿ïX¿ïv¿ï§¿ï®¿ï©¿ïÙ¿ñ-¿ñJ¿ñw¿ñ{¿ñ|¿ñ≈¿ñ˙¿ó¿ó@¿óD¿óE¿óê¿ó…¿óÊ¿ò¿ò¿ò¿òc¿òú¿òπ¿òÊ¿òÍ¿òÎ¿ô3¿ô@¿ôÉ¿ô•¿ô◊¿ô€¿ô‹¿ö¿ö ¿öo¿ö¿¿ö∆¿õ¿õc¿õu¿õ{¿õÀ¿õÍ¿õ¿úA¿úè¿ú‹¿ù¿ùM¿ùj¿ùó¿ùõ¿ùú¿ù’¿û¿û4¿ûd¿ûh¿ûi¿ûü¿û•¿û◊¿ü¿ü3¿üb¿üf¿üg¿üñ¿üú¿üÎ¿†;¿†Å¿†æ¿†›¿°¿°¿°¿°<¿°B¿°ë¿° ¿¢	¿¢)¿¢Y¿¢]¿¢^¿¢Æ¿¢Ÿ¿¢ﬂ¿£/¿£}¿£»¿£˘¿§J¿§s¿§¨¿§∞¿§±¿§˙¿•3¿•i¿•ä¿•∂¿•—¿•Ì¿¶¿¶¿¶¿¶`¿¶r¿¶x¿¶»¿ß¿ßZ¿ß`¿ßp¿ßv¿ß¿¿ßÒ¿®¿®2¿®M¿®j¿®à¿®å¿®ç¿®‹¿®Ó¿®Ù¿©/¿©5¿©E¿©K¿©û¿©—¿©Ì¿™¿™/¿™M¿™k¿™o¿™p¿™ø¿™—¿™◊¿´¿´¿´(¿´.¿´Å¿´¥¿´–¿´˜¿¨¿¨0¿¨N¿¨R¿¨S¿¨]¿¨^¿¨¶¿¨æ¿¨ƒ¿¨‘¿¨⁄¿≠)¿≠9¿≠|¿≠£¿≠§¿≠Û¿Æ¿Æ¿Æ[¿Æ¨¿Æ ¿Æ–¿Ø¿Øm¿Ø∫¿Ø¿¿Ø–¿Ø÷¿∞¿∞3¿∞`¿∞ã¿∞´¿∞Ø¿∞∞¿∞Œ¿∞œ¿∞·¿±¿±$¿±@¿±M¿±j¿±p¿±é¿±í¿±ì¿±÷¿±◊¿±¸¿±˝¿≤F¿≤[¿≤a¿≤∞¿≤ı¿≥.¿≥w¿≥ä¿≥ê¿≥∆¿≥⁄¿≥‡¿¥¿¥¿¥"¿¥f¿¥z¿¥Ä¿¥ƒ¿¥ÿ¿¥ﬁ¿µ*¿µ>¿µD¿µ‹¿µ¿µˆ¿∂¿∂¿∂¿∂X¿∂^¿∂¨¿∂–¿∂÷¿∑%¿∑_¿∑e¿∑Ø¿∏¿∏;¿∏i¿∏ä¿∏ã¿∏Æ¿∏º¿∏¬¿∏√¿∏Ë¿π+¿πW¿πs¿π†¿πœ¿∫ ¿∫1¿∫^¿∫ä¿∫≥¿∫Ê¿ª¿ªD¿ª{¿ª|¿ªß¿ª»¿ª¯¿º&¿ºN¿ºÉ¿º≤¿ºπ¿º˛¿Ω/¿Ω5¿Ωå¿Ωœ¿Ω’¿æ,¿æo¿æu¿æ§¿æ—¿æ˘¿ø-¿ø\¿øc¿ø}¿øû¿ø§¿ø•¿øÒ¿øÚ¿¿8¿¿<¿¿=¿¿p¿¿í¿¿∂¿¿Ë¿¡¿¡z¿¡®¿¡Ù¿¬¿¬8¿¬d¿¬¢¿¬Œ¿√¿√6¿√^¿√z¿√ö¿√∫¿√“¿√˛¿ƒ&¿ƒP¿ƒ|¿ƒ®¿ƒ–¿ƒ˜¿≈¿≈I¿≈s¿≈ù¿≈œ¿≈Ò¿∆2¿∆6¿∆8¿∆9¿∆à¿∆ô¿∆∏¿∆Â¿∆Î¿«8¿«Ü¿«∫¿«Ã¿«Õ¿«¸¿»¿»Q¿»p¿»Ç¿»Ñ¿»Ö¿»∞¿»‚¿…¿…B¿…p¿…u¿…£¿…ƒ¿…»¿ ¿ 9¿ W¿ Œ¿ ›¿ ˚¿Àr¿ÀÅ¿Àá¿Àã¿À∏¿À⁄¿Àﬁ¿Àﬂ¿Ã/¿Ã1¿Ã2¿ÃÉ¿Ã†¿Ã§¿ÃÒ¿ÕA¿Õ{¿Õ¿ÕÀ¿Õ¯¿Õ¸¿ŒM¿Œy¿Œ}¿Œã¿Œè¿Œ”¿œ1¿œÇ¿œ ¿œÒ¿œÚ¿–C¿–V¿–\¿–ú¿–¢¿–¿—¿—5¿—6¿—B¿—l¿—¢¿“!¿“"¿“q¿“í¿“∞¿“œ¿“’¿“÷¿”(¿”7¿”e¿”v¿”´¿”ª¿”¡¿”¬¿”Î¿”Ô¿”¿‘¿‘¿‘o¿‘Ü¿‘å¿‘›¿’-¿’{¿’à¿’ï¿’»¿’…¿’’¿÷¿÷E¿÷ã¿÷è¿÷ë¿÷í¿÷ﬂ¿÷Í¿÷Ó¿◊4¿◊`¿◊d¿◊¥¿ÿ¿ÿD¿ÿ[¿ÿ_¿ÿ´¿ÿÿ¿ÿ‹¿Ÿ(¿Ÿq¿Ÿ≥¿ŸÈ¿⁄¿⁄i¿⁄o¿⁄∞¿⁄»¿⁄⁄¿⁄Í¿€¿€8¿€`¿€a¿€Ø¿€ˇ¿‹¿‹¿‹c¿‹∞¿‹∆¿‹«¿‹”¿‹˚¿›C¿›S¿›Y¿›Ç¿›Ü¿›á¿›ì¿›ÿ¿ﬁ¿ﬁK¿ﬁO¿ﬁQ    	Ä•Äº Ä¡Ä÷ ÄŸ ÄÍÅ;Å>  Åh ÅèÅ≤Å¥  Å‹  Ç Ç%Ç:Ç<  Ç\ÇmÇÃÇœÇ¯ÉlÉnÉïÉßÉ©É⁄ÉÊÉÈÑÑ â Ñ˝ãÕÇ¶/// A tag for a [SemanticsNode].
///
/// Tags can be interpreted by the parent of a [SemanticsNode]
/// and depending on the presence of a tag the parent can for example decide
/// how to add the tagged node as a child. Tags are not sent to the engine.
///
/// As an example, the [RenderSemanticsGestureHandler] uses tags to determine
/// if a child node should be excluded from the scrollable area for semantic
/// purposes.
///
/// The provided [name] is only used for debugging. Two tags created with the
/// same [name] and the `new` operator are not considered identical. However,
/// two tags created with the same [name] and the `const` operator are always
/// identical. ãﬁÅE ççÅ/// Creates a [SemanticsTag].
///
/// The provided [name] is only used for debugging. Two tags created with the
/// same [name] and the `new` operator are not considered identical. However,
/// two tags created with the same [name] and the `const` operator are always
/// identical.ç	ç   ç'ÄöçΩÄÇ/// A human-readable name for this tag used for debugging.
///
/// This string is not used to determine if two tags are identical.  ç∆UçŸ   ç∆ç« éåëıÉƒ/// An identifier of a custom semantics action.
///
/// Custom semantics actions can be provided to make complex user
/// interactions more accessible. For instance, if an application has a
/// drag-and-drop list that requires the user to press and hold an item
/// to move it, users interacting with the application using a hardware
/// switch may have difficulty. This can be made accessible by creating custom
/// actions and pairing them with handlers that move a list item up or down in
/// the list.
///
/// In Android, these actions are presented in the local context menu. In iOS,
/// these are presented in the radial context menu.
///
/// Localization and text direction do not automatically apply to the provided
/// label or hint.
///
/// Instances of this class should either be instantiated with const or
/// new instances cached in static fields.
///
/// See also:
///
///  * [SemanticsProperties], where the handler for a custom action is provided. íÅ íÄíïd/// Creates a new [CustomSemanticsAction].
///
/// The [label] must not be null or the empty string.íóí≠  í∫í¿íŒí«í¡í í◊í›íÈí‰íﬁíÁí˜íÚí˘ììììÅrìÕìŒìﬁÄí/// Creates a new [CustomSemanticsAction] that overrides a standard semantics
/// action.
///
/// The [hint] must not be null or the empty string.ì‡ìˆ  ì˚$î  î(î.î;î4î/î7îDîJîUîPîKîSî^îdîsîlîeîoîÇî|îÑîçQîŸ;/// The user readable name of this custom semantics action. î„Nï-9/// The hint description of this custom semantics action. ï6Wïá7/// The standard semantics action this action replaces. ó¬óÕ ó◊ó‹Vò	 ò0ò1òò/òòò6Ròc òÜòáòjòÖòkòÇïíAï¶   ïíïìï◊ÅïÒ  ïÙï¸  ï◊ïÿñ‹ÄÄñÔ   ñ‹ñ›òçÅò«,/// Get the identifier for a given `action`. ò’òÏ   ôß}ôÙ,/// Get the `action` for a given identifier. ô˛ö   ë‰ëÂö(äEöq7/// A string that carries a list of [StringAttribute]s. öÜÇª õiõyÄ‘/// Creates a attributed string.
///
/// The [TextRange] in the [attributes] must be inside the length of the
/// [string].
///
/// The [attributes] must not be changed after the attributed string is
/// created.õõÖ  õí+õò  õ§õªõºõ™õ∫õ´õ∆õÃõÙõﬂõÕõ”õ‘õ‚õÏõÌõ˛úù?úù<ù=ù>ùEKùä5/// The plain string stored in the attributed string. ùïÄòû#k/// The attributes this string carries.
///
/// The list must not be modified after this string is created. £¢A£∂   £¢££û2Ñ3ü/Ä⁄/// Returns a new [AttributedString] by concatenate the operands
///
/// The string attribute list of the returned [AttributedString] will contains
/// the string attributes from both operands with updated text ranges. ü1üC   ¢iÅ5¢œI/// Two [AttributedString]s are equal if their string and attributes are. ¢“¢⁄  ¢µ¢∂£ÁÄÑ£˙   £Á£Ëö`öa§oÖŒ§˝Äá/// A [DiagnosticsProperty] for [AttributedString]s, which shows a string
/// when there are no attributes, and more details otherwise. •HÅ •—•ÈÄÇ/// Create a diagnostics property for an [AttributedString] object.
///
/// Such properties are used with [SemanticsData] objects.•Ô•˝  ¶¶  ¶¶   ¶-¶3  ¶M¶T  ¶e¶l  ¶v¶}  ¶B¶ê¶ñ¶ß¶†¶ó¶£¶±¶∑¶≈¶æ¶∏¶¡¶ÀÄÀßâÄ™/// Whether to show the property when the [value] is an [AttributedString]
/// whose [AttributedString.string] is the empty string.
///
/// This overrides [defaultValue]. ßõ|ß∞   ßõßú®Ç ®.  ®=*®U  ®® ™?ª»´ÕÅ|/// Summary information about a [SemanticsNode] object.
///
/// A semantics node might [SemanticsNode.mergeAllDescendantsIntoThisNode],
/// which means the individual fields on the semantics node don't fully describe
/// the semantics at that node. This data structure contains the full semantics
/// for the node.
///
/// Typically obtained from [SemanticsNode.getSemanticsData]. ´ÛàË ¨ø¨ÃÄ¡/// Creates a semantics data object.
///
/// The [flags], [actions], [label], and [Rect] arguments must not be null.
///
/// If [label] is not empty, then [textDirection] must also not be null.¨”¨‚  ¨Ï¨˚  ≠≠  ≠*≠9  ≠M&≠\  ≠y&≠à  ≠•≠¥  ≠«≠÷  ≠‚≠Ò  ÆÆ  ÆÆ*  Æ8ÆG  ÆUÆd  ÆvÆÖ  ÆïÆ§  ÆπÆ»  Æ€ÆÍ  Æ˛Ø  Ø!Ø0  ØCØR  Øe Øt  Øã	Øë  ØöØ†  ØÆØ¥  Ä£Ø‘Ø⁄ØËØ·Ø€Ø‰ØÚØ¯∞∞Ø˘∞∞∞∞0∞)∞∞,∞:∞@∞X∞Q∞A∞T∞b∞h∞â∞Ç∞i∞Ö∞ì∞ô∞∫∞≥∞ö∞∂∞ƒ∞ ∞·∞⁄∞À∞›∞Î∞Ò±±d± ∞˙∞Ú∞˝±±±±±@±A±H±n±t±™≤±í±å±u±Ñ±Ö±è±£±ï±¶±¨±–±Ë±“±·±‚±È≤≤≤K≤¶≤3≤-≤≤%≤&≤0≤D≤6≤G≤M≤q≤â≤s≤Ç≤É≤ä≤∞≤∂≤ı≥b≤›≤◊≤∑≤œ≤–≤⁄≤Ó≤‡≤Ò≤˜≥$≥E≥&≥>≥?≥F≥l≥r≥±¥≥ô≥ì≥s≥ã≥å≥ñ≥™≥ú≥≠≥≥≥‡¥≥‚≥˙≥˚¥¥(¥.¥c¥º¥K¥E¥/¥=¥>¥H¥\¥N¥_¥e¥à¥ü¥ä¥ò¥ô¥†¥∆¥Ã¥Ÿ¥“¥Õ¥’¥ﬂNµ(</// A bit field of [SemanticsFlag]s that apply to this node. µ2Rµ}>/// A bit field of [SemanticsAction]s that apply to this node. ∂vÅ∑mÄ”/// A textual description for the current label of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [label], which exposes just the raw text. ∏nÅπeÄ”/// A textual description for the current value of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [value], which exposes just the raw text. ∫ßÅ8ª«Ä¸/// The value that [value] will become after performing a
/// [SemanticsAction.increase] action in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [increasedValue], which exposes just the raw text. ΩÅ8æ2Ä¸/// The value that [value] will become after performing a
/// [SemanticsAction.decrease] action in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [decreasedValue], which exposes just the raw text. øHÅ¿ @MÄ·/// A brief description of the result of performing an action on this node
/// in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [hint], which exposes just the raw text. ¿ @`Äà¿ @·m/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection]. ¿ @ÌÄñ¿ Avo/// The reading direction for the text in [label], [value],
/// [increasedValue], [decreasedValue], and [hint]. ¿ AàÄü¿ Bx/// The currently selected text (or the position of the cursor) within [value]
/// if this node represents a text field. ¿ B,Ä∆¿ B‚Ä¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null. ¿ B˜\¿ CHC/// The index of the first visible semantic child of a scroll node. ¿ CXÅÃ¿ EÅõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken. ¿ E)Å.¿ FHÅ /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken. ¿ F\Å.¿ G{Å /// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent], from where this value is usually taken. ¿ GèÅ…¿ IJÅô/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.
///
/// If this value is non-null, the SemanticsNode must not have any children
/// as those would be replaced by the semantics nodes of the referenced
/// platform view.
///
/// See also:
///
///  * [AndroidView], which is the platform view for Android.
///  * [UiKitView], which is the platform view for iOS. ¿ I]Åv¿ J≈ÅL/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Defaults
/// to null, which means no limit is imposed on the text field. ¿ JÿÅg¿ L-Å9/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. This must
/// be set when [maxValueLength] is set. ¿ LDN¿ Lé</// The bounding box for this node in its coordinate system. ¿ LóY¿ LÏ9/// The set of [SemanticsTag]s associated with this node. ¿ LıÅ¿ NÄ¸/// The transform from this node's coordinate system to its parent's coordinate system.
///
/// By default, the transform is null, which represents the identity
/// transformation (i.e., that this node has the same coordinate system as its
/// parent). ¿ NÄÏ¿ N¸Ä…/// The elevation of this node relative to the parent semantics node.
///
/// See also:
///
///  * [SemanticsConfiguration.elevation] for a detailed discussion regarding
///    elevation and semantics. ¿ O
Äƒ¿ O≈Ä£/// The extent of this node along the z-axis beyond its [elevation]
///
/// See also:
///
///  * [SemanticsConfiguration.thickness] for a more detailed definition. ¿ O”Å0¿ PÎÄˆ/// The identifiers for the custom semantics actions and standard action
/// overrides for this node.
///
/// The list must be sorted in increasing order.
///
/// See also:
///
///  * [CustomSemanticsAction], for an explanation of custom actions. µâÄÈ∂RÄ≥/// A textual description for the current label of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedLabel].   ∑ÅÄÈ∏JÄ≥/// A textual description for the current value of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedValue].   πyÅ*∫qÄ‡/// The value that [value] will become after performing a
/// [SemanticsAction.increase] action.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedIncreasedValue].   ª‰Å*º‹Ä‡/// The value that [value] will become after performing a
/// [SemanticsAction.decrease] action.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedDecreasedValue].   æOÄıø&Ä¡/// A brief description of the result of performing an action on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedHint].   ¿ bÇW¿ b    ¿ b¿ b¿ Qm¿ Q<,/// Whether [flags] contains the given flag. ¿ QD¿ QS   ¿ Qy{¿ Q±0/// Whether [actions] contains the given action. ¿ Qª¿ QÃ   ¿ Q¯O¿ R   ¿ Q¯¿ Q˘¿ RKä ¿ R\  ¿ Rp&¿ Rç  ¿ RK¿ RL¿ ]ÑÔ¿ ]3  ¿ ]6¿ ]>  ¿ ]¿ ]¿ dgÅû¿ ds  ¿ dÖ¿ dë  ¿ dñ¿ d¢   ´º´Ω¿ f	Åq¿ f  ¿ fZÄÜ ¿ fZ¿ fv ¿ f}
¿ fÑ  ¿ fç¿ fù  ¿ fß¿ f∑  ¿ f¡¿ f–   ¿ f‰(¿ g   ¿ gg¿ g3   ¿ g¿ g ¿ g|á#¿ hÄÜ/// Provides hint values which override the default hints on supported
/// platforms.
///
/// On iOS, these values are always ignored. ¿ hJÄº ¿ hz¿ hê'/// Creates a semantics hint overrides.¿ hó¿ hù  ¿ h´¿ h±  ¿ h»¿ hŒ¿ hﬁ¿ hŸ¿ hœ¿ h‹¿ hË¿ hÓ¿ i¿ hˇ¿ hÔ¿ i¿ i
Å8¿ j9Å/// The hint text for a tap action.
///
/// If null, the standard hint is used instead.
///
/// The hint should describe what happens when a tap occurs, not the
/// manner in which a tap is accomplished.
///
/// Bad: 'Double tap to show movies'.
/// Good: 'show movies'. ¿ jGÅ`¿ kòÅ0/// The hint text for a long press action.
///
/// If null, the standard hint is used instead.
///
/// The hint should describe what happens when a long press occurs, not
/// the manner in which the long press is accomplished.
///
/// Bad: 'Double tap and hold to show tooltip'.
/// Good: 'show tooltip'. ¿ k¨v¿ kÁ//// Whether there are any non-null hint values.   ¿ l&H¿ l:   ¿ l&¿ l'¿ lrÄ˛¿ lå  ¿ lè¿ ló  ¿ lr¿ ls¿ mtÅ)¿ mÖ  ¿ mô&¿ m∂  ¿ mt¿ mu¿ h¿ h¿ n°¿ {†¿ o~ÄÀ/// Contains properties used by assistive technologies to make the application
/// more accessible.
///
/// The properties of this class are used to generate a [SemanticsNode]s in the
/// semantics tree. ¿ o±à0 ¿ o‹¿ oÔ"/// Creates a semantic annotation.<¿ oˆ¿ o¸  ¿ p¿ p  ¿ p
¿ p   ¿ p*¿ p0  ¿ p=¿ pC  ¿ pO¿ pU  ¿ p`	¿ pf  ¿ po¿ pu  ¿ pÄ¿ pÜ  ¿ pî¿ pö  ¿ p•¿ p´  ¿ pª¿ p¡  ¿ pŒ¿ p‘  ¿ p‚¿ pË  ¿ pÙ¿ p˙  ¿ q¿ q  ¿ q(¿ q.  ¿ q;¿ qA  ¿ qO¿ qU  ¿ qe¿ qk  ¿ qz
¿ qÄ  ¿ qä¿ qê  ¿ qü¿ q•  ¿ q∏¿ qæ  ¿ q’
¿ q€  ¿ qÂ¿ qÎ  ¿ qˇ
¿ r  ¿ r¿ r  ¿ r)¿ r/  ¿ rB¿ rH  ¿ re¿ rk  ¿ r~¿ rÑ  ¿ r°	¿ rß  ¿ r∞¿ r∂  ¿ r¬¿ r»  ¿ r€¿ r·  ¿ rÛ¿ r˘  ¿ s¿ s  ¿ s¿ s#  ¿ s6
¿ s<  ¿ sF¿ sL  ¿ s\¿ sb  ¿ ss¿ sy  ¿ sã¿ së  ¿ s†¿ s¶  ¿ s∑¿ sΩ  ¿ sÃ¿ s“  ¿ s·¿ sÁ  ¿ sÚ
¿ s¯  ¿ t¿ t  ¿ t#¿ t  ¿ t=$¿ tC  ¿ tg¿ tm  ¿ tã¿ të  ¿ t∞¿ t∂  ¿ t…¿ tœ  ¿ t› ¿ t„  ¿ u ¿ u	  ¿ u)¿ u/  ¿ u=¿ uC  <¿ ua¿ ug¿ uê¿ uÀ¿ uv¿ un¿ uh¿ uq¿ uâ¿ uy¿ uå¿ uí¿ u’¿ u€¿ v¿ v?¿ uÍ¿ u‚¿ u‹¿ uÂ¿ u˝¿ uÌ¿ v ¿ v¿ vI¿ vO¿ vä¿ v◊¿ vg¿ v_¿ vP¿ vb¿ vÉ¿ vj¿ vÜ¿ vå¿ v·¿ vÁ¿ w"¿ wo¿ vˇ¿ v˜¿ vË¿ v˙¿ w¿ w¿ w¿ w$¿ wy¿ w¿ w¶¿ wﬂ¿ wç¿ wÖ¿ wÄ¿ wà¿ wü¿ wê¿ w¢¿ w®<¿ wÂÅ[¿ y9Å;/// If non-null, indicates that this subtree represents something that can be
/// in an enabled or disabled state.
///
/// For example, a button that a user can currently interact with would set
/// this field to true. A button that currently does not respond to user
/// interactions would set this field to false. ¿ yEÅú¿ z⁄Åv/// If non-null, indicates that this subtree represents a checkbox
/// or similar widget with a "checked" state, and what its current
/// state is.
///
/// When the [Checkbox.value] of a tristate Checkbox is null,
/// indicating a mixed-state, this value shall be false, in which
/// case, [mixed] will be true.
///
/// This is mutually exclusive with [toggled] and [mixed]. ¿ zÊÅ‚¿ |√Åº/// If non-null, indicates that this subtree represents a checkbox
/// or similar widget with a "half-checked" state or similar, and
/// whether it is currently in this half-checked state.
///
/// This must be null when [Checkbox.tristate] is false, or
/// when the widget is not a checkbox. When a tristate
/// checkbox is fully unchecked/checked, this value shall
/// be false.
///
/// This is mutually exclusive with [checked] and [toggled]. ¿ |ÕÄÒ¿ }∑Ä”/// If non-null, indicates that this subtree represents a toggle switch
/// or similar widget with an "on" state, and what its current
/// state is.
///
/// This is mutually exclusive with [checked] and [mixed]. ¿ }√Å&¿ ~·Å/// If non-null indicates that this subtree represents something that can be
/// in a selected or unselected state, and what its current state is.
///
/// The active tab in a tab bar for example is considered "selected", whereas
/// all other tabs are unselected. ¿ ~ÓÄª¿ £Ä†/// If non-null, indicates that this subtree represents a button.
///
/// TalkBack/VoiceOver provides users with the hint "button" when a button
/// is focused. ¿ ÆÅ ¿ Ä™ÄÂ/// If non-null, indicates that this subtree represents a link.
///
/// iOS's VoiceOver provides users with a unique hint when a link is focused.
/// Android's Talkback will announce a link hint the same way it does a
/// button. ¿ Ä≥Å¿ ÅÀÅ/// If non-null, indicates that this subtree represents a header.
///
/// A header divides into sections. For example, an address book application
/// might define headers A, B, C, etc. to divide the list of alphabetically
/// sorted contacts into sections. ¿ Å÷Äø¿ ÇåÄ°/// If non-null, indicates that this subtree represents a text field.
///
/// TalkBack/VoiceOver provide special affordances to enter text into a
/// text field. ¿ ÇöÄº¿ ÉPÄ°/// If non-null, indicates that this subtree represents a slider.
///
/// Talkback/\VoiceOver provides users with the hint "slider" when a
/// slider is focused. ¿ É[a¿ É±G/// If non-null, indicates that this subtree represents a keyboard key. ¿ É¡Ä–¿ ÑâÄ±/// If non-null, indicates that this subtree is read only.
///
/// Only applicable when [textField] is true.
///
/// TalkBack/VoiceOver will treat it as non-editable text field. ¿ ÑñÅ’¿ ÜbÅØ/// If non-null, whether the node is able to hold input focus.
///
/// If [focusable] is set to false, then [focused] must not be true.
///
/// Input focus indicates that the node will receive keyboard events. It is not
/// to be confused with accessibility focus. Accessibility focus is the
/// green/black rectangular highlight that TalkBack/VoiceOver draws around the
/// element it is reading, and is separate from input focus. ¿ ÜpÇ¿ àÜÅ˜/// If non-null, whether the node currently holds input focus.
///
/// At most one node in the tree should hold input focus at any point in time,
/// and it should not be set to true if [focusable] is false.
///
/// Input focus indicates that the node will receive keyboard events. It is not
/// to be confused with accessibility focus. Accessibility focus is the
/// green/black rectangular highlight that TalkBack/VoiceOver draws around the
/// element it is reading, and is separate from input focus. ¿ àíÅ¿ âÇÄ€/// If non-null, whether a semantic node is in a mutually exclusive group.
///
/// For example, a radio button is in a mutually exclusive group because only
/// one radio button in that group can be marked as [checked]. ¿ âüÉF¿ åﬂÉ/// If non-null, whether the node is considered hidden.
///
/// Hidden elements are currently not visible on screen. They may be covered
/// by other elements or positioned outside of the visible area of a viewport.
///
/// Hidden elements cannot gain accessibility focus though regular touch. The
/// only way they can be focused is by moving the focus to them via linear
/// navigation.
///
/// Platforms are free to completely ignore hidden elements and new platforms
/// are encouraged to do so.
///
/// Instead of marking an element as hidden it should usually be excluded from
/// the semantics tree altogether. Hidden elements are only included in the
/// semantics tree to work around platform limitations and they are mainly
/// used to implement accessibility scrolling on iOS. ¿ åÍÅ3¿ éÅ/// If non-null, whether [value] should be obscured.
///
/// This option is usually set in combination with [textField] to indicate
/// that the text field contains a password (or other sensitive information).
/// Doing so instructs screen readers to not read out the [value]. ¿ é"Å7¿ èPÅ/// Whether the [value] is coming from a field that supports multiline text
/// editing.
///
/// This option is only meaningful when [textField] is true to indicate
/// whether it's a single-line or multiline text field.
///
/// This option is null when [textField] is false. ¿ è^Å—¿ ë$Å£/// If non-null, whether the node corresponds to the root of a subtree for
/// which a route name should be announced.
///
/// Generally, this is set in combination with
/// [SemanticsConfiguration.explicitChildNodes], since nodes with this flag
/// are not considered focusable by Android or iOS.
///
/// See also:
///
///  * [SemanticsFlag.scopesRoute] for a description of how the announced
///    value is selected. ¿ ë4ÄŒ¿ ë¯Ä≠/// If non-null, whether the node contains the semantic label for a route.
///
/// See also:
///
///  * [SemanticsFlag.namesRoute] for a description of how the name is used. ¿ íÄ¨¿ íÆÄê/// If non-null, whether the node represents an image.
///
/// See also:
///
///  * [SemanticsFlag.isImage], for the flag this setting controls. ¿ í∏É¢¿ ñPÉi/// If non-null, whether the node should be considered a live region.
///
/// A live region indicates that updates to semantics node are important.
/// Platforms may use this information to make polite announcements to the
/// user to inform them of updates to this node.
///
/// An example of a live region is a [SnackBar] widget. On Android and iOS,
/// live region causes a polite announcement to be generated automatically,
/// even if the widget does not have accessibility focus. This announcement
/// may not be spoken if the OS accessibility services are already
/// announcing something else, such as reading the label of a focused widget
/// or providing a system announcement.
///
/// See also:
///
///  * [SemanticsFlag.isLiveRegion], the semantics flag this setting controls.
///  * [SemanticsConfiguration.liveRegion], for a full description of a live region. ¿ ñ_Åg¿ ó∏Å=/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [textField] is true. Defaults to null,
/// which means no limit is imposed on the text field. ¿ óÀÅS¿ ôÅ%/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [textField] is true. Must be set when
/// [maxValueLength] is set. ¿ ô#Ç¿ õ<Å/// Provides a textual description of the widget.
///
/// If a label is provided, there must either by an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [label] and [attributedLabel]. One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.label] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedLabel] for an [AttributedString] version of this property. ¿ õFÇV¿ ùçÇ/// Provides an [AttributedString] version of textual description of the widget.
///
/// If a [attributedLabel] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [label] and [attributedLabel]. One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedLabel] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [label] for a plain string version of this property. ¿ ù°Ç+¿ ü«Å˝/// Provides a textual description of the value of the widget.
///
/// If a value is provided, there must either by an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [value] and [attributedValue], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.value] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedLabel] for an [AttributedString] version of this property. ¿ ü—Çi¿ ¢+Ç%/// Provides an [AttributedString] version of textual description of the value
/// of the widget.
///
/// If a [attributedValue] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [value] and [attributedValue], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [value] for a plain string version of this property. ¿ ¢?Ç◊¿ •Çö/// The value that [value] or [attributedValue] will become after a
/// [SemanticsAction.increase] action has been performed on this widget.
///
/// If a value is provided, [onIncrease] must also be set and there must
/// either be an ambient [Directionality] or an explicit [textDirection]
/// must be provided.
///
/// Callers must not provide both [increasedValue] and
/// [attributedIncreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.increasedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [attributedIncreasedValue] for an [AttributedString] version of this
///    property. ¿ •Ç˝¿ ® ÇÆ/// The [AttributedString] that [value] or [attributedValue] will become after
/// a [SemanticsAction.increase] action has been performed on this widget.
///
/// If a [attributedIncreasedValue] is provided, [onIncrease] must also be set
/// and there must either be an ambient [Directionality] or an explicit
/// [textDirection] must be provided.
///
/// Callers must not provide both [increasedValue] and
/// [attributedIncreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedIncreasedValue] for a description of
///    how this is exposed in TalkBack and VoiceOver.
///  * [increasedValue] for a plain string version of this property. ¿ ®Ç◊¿ ™ÊÇö/// The value that [value] or [attributedValue] will become after a
/// [SemanticsAction.decrease] action has been performed on this widget.
///
/// If a value is provided, [onDecrease] must also be set and there must
/// either be an ambient [Directionality] or an explicit [textDirection]
/// must be provided.
///
/// Callers must not provide both [decreasedValue] and
/// [attributedDecreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.decreasedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [attributedDecreasedValue] for an [AttributedString] version of this
///    property. ¿ ™˘É	¿ ≠ÍÇ∫/// The [AttributedString] that [value] or [attributedValue] will become after
/// a [SemanticsAction.decrease] action has been performed on this widget.
///
/// If a [attributedDecreasedValue] is provided, [onDecrease] must also be set
/// and there must either be an ambient [Directionality] or an explicit
/// [textDirection] must be provided.
///
/// Callers must not provide both [decreasedValue] and
/// [attributedDecreasedValue], One or both must be null/// provided.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedDecreasedValue] for a description of
///    how this is exposed in TalkBack and VoiceOver.
///  * [decreasedValue] for a plain string version of this property. ¿ ÆÇI¿ ∞LÇ/// Provides a brief textual description of the result of an action performed
/// on the widget.
///
/// If a hint is provided, there must either be an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [hint] and [attributedHint], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.hint] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedHint] for an [AttributedString] version of this property. ¿ ∞UÇÅ¿ ≤»Ç>/// Provides an [AttributedString] version of brief textual description of the
/// result of an action performed on the widget.
///
/// If a [attributedHint] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [hint] and [attributedHint], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedHint] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [hint] for a plain string version of this property. ¿ ≤€Å©¿ ¥}ÅÉ/// Provides a textual description of the widget's tooltip.
///
/// In Android, this property sets the `AccessibilityNodeInfo.setTooltipText`.
/// In iOS, this property is appended to the end of the
/// `UIAccessibilityElement.accessibilityLabel`.
///
/// If a [tooltip] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided. ¿ ¥âÅ≤¿ ∂.Åv/// Provides hint values which override the default hints on supported
/// platforms.
///
/// On Android, If no hint overrides are used then default [hint] will be
/// combined with the [label]. Otherwise, the [hint] will be ignored as long
/// as there as at least one non-null hint override.
///
/// On iOS, these are always ignored and the default [hint] is used instead. ¿ ∂@Ä√¿ ∂ˆÄò/// The reading direction of the [label], [value], [increasedValue],
/// [decreasedValue], and [hint].
///
/// Defaults to the ambient [Directionality]. ¿ ∑ÅI¿ ∏JÅ/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android). ¿ ∏VÇü¿ ∫ÁÇ`/// A tag to be applied to the child [SemanticsNode]s of this widget.
///
/// The tag is added to all child [SemanticsNode]s that pass through the
/// [RenderObject] corresponding to this widget while looking to be attached
/// to a parent SemanticsNode.
///
/// Tags are used to communicate to a parent SemanticsNode that a child
/// SemanticsNode was passed through a particular RenderObject. The parent can
/// use this information to determine the shape of the semantics tree.
///
/// See also:
///
///  * [SemanticsConfiguration.addTagForChildren], to which the tags provided
///    here will be passed. ¿ ∫˙Åì¿ ºàÅi/// The handler for [SemanticsAction.tap].
///
/// This is the semantic equivalent of a user briefly tapping the screen with
/// the finger without moving it. For example, a button should implement this
/// action.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen while an element is focused. ¿ ºíÅñ¿ æÅf/// The handler for [SemanticsAction.longPress].
///
/// This is the semantic equivalent of a user pressing and holding the screen
/// with the finger for a few seconds without moving it.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen without lifting the finger after the
/// second tap. ¿ æ-Çe¿ ¿ÜÇ./// The handler for [SemanticsAction.scrollLeft].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from right to left. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping left with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided. ¿ ¿óÇk¿ ¬ıÇ3/// The handler for [SemanticsAction.scrollRight].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from left to right. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping right with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided. ¿ √Ç]¿ ≈ZÇ(/// The handler for [SemanticsAction.scrollUp].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from bottom to top. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping up with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided. ¿ ≈iÇf¿ «√Ç//// The handler for [SemanticsAction.scrollDown].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from top to bottom. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping down with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided. ¿ «‘Ç:¿  Ç/// The handler for [SemanticsAction.increase].
///
/// This is a request to increase the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If a [value] is set, [increasedValue] must also be provided and
/// [onIncrease] must ensure that [value] will be set to [increasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping up with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume up button. ¿  Ç>¿ ÃGÇ	/// The handler for [SemanticsAction.decrease].
///
/// This is a request to decrease the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If a [value] is set, [decreasedValue] must also be provided and
/// [onDecrease] must ensure that [value] will be set to [decreasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping down with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume down button. ¿ ÃVÅ¿ ÕdÄÌ/// The handler for [SemanticsAction.copy].
///
/// This is a request to copy the current selection to the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ ÕoÅ$¿ ŒéÄ¸/// The handler for [SemanticsAction.cut].
///
/// This is a request to cut the current selection and place it in the
/// clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ ŒòÅ¿ œ¶ÄÌ/// The handler for [SemanticsAction.paste].
///
/// This is a request to paste the current content of the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ œ≤År¿ —Å,/// The handler for [SemanticsAction.moveCursorForwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field forward by one character.
///
/// TalkBack users can trigger this by pressing the volume up key while the
/// input focus is in a text field. ¿ —)Åw¿ “ÅÅ0/// The handler for [SemanticsAction.moveCursorBackwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one character.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ “•Åf¿ ”ÚÅ%/// The handler for [SemanticsAction.moveCursorForwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ ‘Åh¿ ’^Å&/// The handler for [SemanticsAction.moveCursorBackwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ ’}Åì¿ ◊Å[/// The handler for [SemanticsAction.setSelection].
///
/// This handler is invoked when the user either wants to change the currently
/// selected text in a text field or change the position of the cursor.
///
/// TalkBack users can trigger this handler by selecting "Move cursor to
/// beginning/end" or "Select all" from the local context menu. ¿ ◊Å?¿ ÿKÅ/// The handler for [SemanticsAction.setText].
///
/// This handler is invoked when the user wants to replace the current text in
/// the text field with a new text.
///
/// Voice access users can trigger this handler by speaking "type <text>" to
/// their Android devices. ¿ ÿYÉù¿ €€ÉK/// The handler for [SemanticsAction.didGainAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler gains
/// the accessibility focus. The accessibility focus is the
/// green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidLoseAccessibilityFocus], which is invoked when the accessibility
///    focus is removed from the node.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus. ¿ €˚Éè¿ ﬂoÉ=/// The handler for [SemanticsAction.didLoseAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler
/// loses the accessibility focus. The accessibility focus is
/// the green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidGainAccessibilityFocus], which is invoked when the node gains
///    accessibility focus.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus. ¿ ﬂèÅS¿ ‡ŸÅ'/// The handler for [SemanticsAction.dismiss].
///
/// This is a request to dismiss the currently focused node.
///
/// TalkBack users on Android can trigger this action in the local context
/// menu, and VoiceOver users on iOS can trigger this action with a standard
/// gesture or menu option. ¿ ‡ÁÇ7¿ „Å‹/// A map from each supported [CustomSemanticsAction] to a provided handler.
///
/// The handler associated with each custom action is called whenever a
/// semantics action of type [SemanticsAction.customAction] is received. The
/// provided argument will be an identifier used to retrieve an instance of
/// a custom action which can then retrieve the correct handler from this map.
///
/// See also:
///
///  * [CustomSemanticsAction], for an explanation of custom actions.  ¿ „#Üç¿ „4  ¿ „H&¿ „e  ¿ „#¿ „$¿ È¥U¿ È«   ¿ È¥¿ Èµ¿ om¿ on¿ ÍÓ¿ ¿«¿ Ï(Å3/// A node that represents some semantic data.
///
/// The semantics tree is maintained during the semantics phase of the pipeline
/// (i.e., during [PipelineOwner.flushSemantics]), which happens after
/// compositing. The semantics tree is then uploaded into the engine for use
/// by assistive technology. ¿ ÏlÅ ¿ ÏÛ¿ Ì ~/// Creates a semantic node.
///
/// Each semantic node has a unique identifier that is assigned when the node
/// is created.¿ Ì¿ Ì  ¿ Ì¿ Ì$  ¿ Ì<¿ Ì8¿ Ì>¿ ÌL¿ ÌM¿ Ìe¿ ÌW¿ Ìg¿ ÌxÅ:¿ Ó¿ Ó¿ ÓÄÅ/// Creates a semantic node to represent the root of the semantics tree.
///
/// The root node is assigned an identifier of zero.¿ Ó¿ Ó  ¿ Ó'¿ Ó6  ¿ ÓG¿ Ó`  ¿ Óq¿ Óm¿ Ós¿ Óã¿ Ó}¿ Óç/¿ Ô¯C¿ 	 ¿ 8¿ 0¿ 6¿ 2¿ 1¿ 4¿ :¿ @¿ K ¿ ]¿ ˜Ä«¿ ÒªÄ∞/// Uniquely identifies this node in the list of sibling nodes.
///
/// Keys are used during the construction of the semantics tree. They are not
/// transferred to the engine. ¿ Û§¿ Û®  ¿ Û∞!¿ Ûƒ  ¿ ı¿ ı  ¿ ˆO¿ ˆT ¿ ˆ\¿ ˆ`¿ ˆa¿ ˜>Én¿ ˙ïÉ./// The semantic clip from an ancestor that was applied to this node.
///
/// Expressed in the coordinate system of the node. May be null if no clip has
/// been applied.
///
/// Descendant [SemanticsNode]s that are positioned outside of this rect will
/// be excluded from the semantics tree. Descendant [SemanticsNode]s that are
/// overlapping with this rect, but are outside of [parentPaintClipRect] will
/// be included in the tree, but they will be marked as hidden because they
/// are assumed to be not visible on screen.
///
/// If this rect is null, all descendant [SemanticsNode]s outside of
/// [parentPaintClipRect] will be excluded from the tree.
///
/// If this rect is non-null it has to completely enclose
/// [parentPaintClipRect]. If [parentPaintClipRect] is null this property is
/// also null. ¿ ˙±Çò¿ ˝6Çd/// The paint clip from an ancestor that was applied to this node.
///
/// Expressed in the coordinate system of the node. May be null if no clip has
/// been applied.
///
/// Descendant [SemanticsNode]s that are positioned outside of this rect will
/// either be excluded from the semantics tree (if they have no overlap with
/// [parentSemanticsClipRect]) or they will be included and marked as hidden
/// (if they are overlapping with [parentSemanticsClipRect]).
///
/// This rect is completely enclosed by [parentSemanticsClipRect].
///
/// If this rect is null [parentSemanticsClipRect] also has to be null. ¿ ˝NÇ‰¿ ÇÆ/// The elevation adjustment that the parent imposes on this node.
///
/// The [elevation] property is relative to the elevation of the parent
/// [SemanticsNode]. However, as [SemanticsConfiguration]s from various
/// ascending [RenderObject]s are merged into each other to form that
/// [SemanticsNode] the parent‚Äôs elevation may change. This requires an
/// adjustment of the child‚Äôs relative elevation which is represented by this
/// value.
///
/// The value is rarely accessed directly. Instead, for most use cases the
/// [elevation] value should be used, which includes this adjustment.
///
/// See also:
///
///  * [elevation], the actual elevation of this [SemanticsNode]. ¿ 7Å}¿ßÅ^/// The index of this node within the parent's list of semantic children.
///
/// This includes all semantic nodes, not just those currently in the
/// child list. For example, if a scrollable has five children but the first
/// two are not visible (and thus not included in the list of children), then
/// the index of the last node will still be 4. ¿y ¿~ ¿î¿êU¿ï ¿∏¿≈¿∆¿˙h¿YG/// Contains the children in inverse hit test order (i.e. paint order). ¿gÄ‡¿	1Ä™/// A snapshot of `newChildren` passed to [_replaceChildren] that we keep in
/// debug mode. It supports the assertion that user does not mutate the list
/// of children. ¿¬¿« ¿œ¿$>¿$C ¿$L¿)ÎN¿* ¿*#¿*0¿*1¿*=h¿*f ¿*Ä¿*ç¿*é¿*™1¿*Æ ¿*ø¿*Ã¿*Õ¿*‡Ä¬¿+ûÄ¢/// The [SemanticsTag]s this node is tagged with.
///
/// Tags are used during the construction of the semantics tree. They are not
/// transferred to the engine. ¿, !¿,$ ¿,-¿,:¿,;¿.†A¿.± ¿.ƒ¿.—¿.“¿0A¿1 ¿1¿1!¿1"¿4¡S¿4“ ¿4Ó¿4˚¿4¸¿8§S¿8µ ¿8—¿8ﬁ¿8ﬂ¿;?¿;/ ¿;A¿;N¿;O¿;¯'¿;ˇ ¿<
¿<¿<¿>w+¿>~ ¿>ã¿>ò¿>ô¿Fù+¿F§ ¿F±¿Fæ¿Fø¿Gf&¿G~  ¿H/;¿H> ¿HO¿H\¿H]¿I∆¿Iÿ  ¿Jò¿Jß  ¿KP¿KV  ¿LD¿LI  ¿LÕ¿L“  ¿Nƒ¿NÃ  ¿P$¿P,  ¿QÑ¿Qå  ¿S¿SÑ  ¿U#¿U(  ¿V∑¿Vº  ¿W'L¿WK ¿W[¿Wq¿Wr¿z·6¿z¯ ¿{¿{¿{¿{¿{G¿{2 ¿{V¿{_¿{a¿{`¿{fG¿{ ¿{ï¿{´¿{¨(¿ Ò√Åﬁ¿ ÛóÅπ/// The unique identifier for this node.
///
/// The root node has an id of zero. Other nodes are given a unique id
/// when they are attached to a [SemanticsOwner]. If they are detached, their
/// ids are invalid and should not be used.
///
/// In rare circumstances, id may change if this node is detached and
/// re-attached to the [SemanticsOwner]. This should only happen when the
/// application has generated too many semantics nodes.   ¿ ÛÂÅ,¿ Ù˘Ä¸/// The transform from this node's coordinate system to its parent's coordinate system.
///
/// By default, the transform is null, which represents the identity
/// transformation (i.e., that this node has the same coordinate system as its
/// parent).   ¿ ı+Ä«¿ ı/  ¿ ı9¿ ıC   ¿ ıˆV¿ ˆ></// The bounding box for this node in its coordinate system.   ¿ ˆiÄ—¿ ˆm  ¿ ˆr
¿ ˆx   ¿πÇ)¿ØÅÿ/// Whether the node is invisible.
///
/// A node whose [rect] is outside of the bounds of the screen and hence not
/// reachable for users is considered invisible if its semantic information
/// is not merged into a (partially) visible parent as indicated by
/// [isMergedIntoParent].
///
/// An invisible node can be safely dropped from the semantic tree without
/// loosing semantic information that is relevant for describing the content
/// currently shown on screen.   ¿ÙÄÇ¿LL/// Whether this node merges its semantic information into an ancestor node.   ¿ùÄ≤¿°  ¿¥
¿∫   ¿SÅç¿ìÅ$/// Whether this node is taking part in a merge of semantic information.
///
/// This returns true if the node is either merged into an ancestor node or if
/// decedent nodes are merged into this node.
///
/// See also:
///
///  * [isMergedIntoParent]
///  * [mergeAllDescendantsIntoThisNode]   ¿‰Ä©¿IY/// Whether this node and all of its descendants should be treated as one logical entity.   ¿Mr¿ë8/// Whether this node has a non-zero number of children.   ¿Ÿi¿)/// The number of children this node has.   ¿3H¿S   ¿3¿4¿H¿û   ¿¿Ä¿,∆Ä’¿-zÄû/// A textual description of this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedLabel].   ¿-üÄ˛¿.yÄ∫/// A textual description of this node in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [label], which exposes just the raw text.   ¿.ÊÄÍ¿/ØÄ≥/// A textual description for the current value of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedValue].   ¿/‘Å¿0…Ä”/// A textual description for the current value of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [value], which exposes just the raw text.   ¿16Å£¿2¶ÅR/// The value that [value] will have after a [SemanticsAction.increase] action
/// has been performed.
///
/// This property is only valid if the [SemanticsAction.increase] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedIncreasedValue].   ¿2›Å·¿4àÅÉ/// The value in [AttributedString] format that [value] or [attributedValue]
/// will have after a [SemanticsAction.increase] action has been performed.
///
/// This property is only valid if the [SemanticsAction.increase] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// See also [increasedValue], which exposes just the raw text.   ¿5Å£¿6âÅR/// The value that [value] will have after a [SemanticsAction.decrease] action
/// has been performed.
///
/// This property is only valid if the [SemanticsAction.decrease] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedDecreasedValue].   ¿6¿Å·¿8kÅÉ/// The value in [AttributedString] format that [value] or [attributedValue]
/// will have after a [SemanticsAction.decrease] action has been performed.
///
/// This property is only valid if the [SemanticsAction.decrease] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// See also [decreasedValue], which exposes just the raw text.   ¿8¸Äˆ¿9”Ä¡/// A brief description of the result of performing an action on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedHint].   ¿9ˆÅ%¿:˘Ä·/// A brief description of the result of performing an action on this node
/// in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [hint], which exposes just the raw text.   ¿;bÄì¿;·m/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection].   ¿<$ÇP¿>\Ç/// The elevation along the z-axis at which the [rect] of this [SemanticsNode]
/// is located above its parent.
///
/// The value is relative to the parent's [elevation]. The sum of the
/// [elevation]s of all ancestor node plus this value determines the absolute
/// elevation of this [SemanticsNode].
///
/// See also:
///
///  * [thickness], which describes how much space in z-direction this
///    [SemanticsNode] occupies starting at this [elevation].
///  * [elevationAdjustment], which has been used to calculate this value.   ¿>ßáÛ¿FÇáq/// Describes how much space the [SemanticsNode] takes up along the z-axis.
///
/// A [SemanticsNode] represents multiple [RenderObject]s, which can be
/// located at various elevations in 3D. The [thickness] is the difference
/// between the absolute elevations of the lowest and highest [RenderObject]
/// represented by this [SemanticsNode]. In other words, the thickness
/// describes how high the box is that this [SemanticsNode] occupies in three
/// dimensional space. The two other dimensions are defined by [rect].
///
/// {@tool snippet}
/// The following code stacks three [PhysicalModel]s on top of each other
/// separated by non-zero elevations.
///
/// [PhysicalModel] C is elevated 10.0 above [PhysicalModel] B, which in turn
/// is elevated 5.0 above [PhysicalModel] A. The side view of this
/// constellation looks as follows:
///
/// ![A diagram illustrating the elevations of three PhysicalModels and their
/// corresponding SemanticsNodes.](https://flutter.github.io/assets-for-api-docs/assets/semantics/SemanticsNode.thickness.png)
///
/// In this example the [RenderObject]s for [PhysicalModel] C and B share one
/// [SemanticsNode] Y. Given the elevations of those [RenderObject]s, this
/// [SemanticsNode] has a [thickness] of 10.0 and an elevation of 5.0 over
/// its parent [SemanticsNode] X.
/// ```dart
/// PhysicalModel( // A
///   color: Colors.amber,
///   child: Semantics(
///     explicitChildNodes: true,
///     child: const PhysicalModel( // B
///       color: Colors.brown,
///       elevation: 5.0,
///       child: PhysicalModel( // C
///         color: Colors.cyan,
///         elevation: 10.0,
///         child: Placeholder(),
///       ),
///     ),
///   ),
/// )
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [elevation], which describes the elevation of the box defined by
///    [thickness] and [rect] relative to the parent of this [SemanticsNode].   ¿FÕÄñ¿GCU/// Provides hint values which override the default hints on supported
/// platforms.   ¿GëÄõ¿Hc/// The reading direction for [label], [value], [hint], [increasedValue], and
/// [decreasedValue].   ¿HoÅT¿IØÅ/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android).   ¿IÂÄ∞¿Jux/// The currently selected text (or the position of the cursor) within [value]
/// if this node represents a text field.   ¿J∫Äì¿K1h/// If this node represents a text field, this indicates whether or not it's
/// a multiline text field.   ¿KgÄ⁄¿LÄ¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null.   ¿L_k¿LÆC/// The index of the first visible semantic child of a scroll node.   ¿L„Åﬁ¿NüÅõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken.   ¿N‡ÅA¿O˝Å /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken.   ¿PAÅ@¿Q]Äˇ/// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent] from where this value is usually taken.   ¿Q°Å€¿SZÅô/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.
///
/// If this value is non-null, the SemanticsNode must not have any children
/// as those would be replaced by the semantics nodes of the referenced
/// platform view.
///
/// See also:
///
///  * [AndroidView], which is the platform view for Android.
///  * [UiKitView], which is the platform view for iOS.   ¿SòÅà¿T˛ÅL/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Defaults
/// to null, which means no limit is imposed on the text field.   ¿U<Åx¿VäÅ4/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Must be
/// set when [maxValueLength] is set.   ¿ bÄë¿ m    ¿	Lè˝¿	Q  ¿	b¿	w   ¿FÅº¿5Äﬂ/// Visits the immediate children of this node.
///
/// This function calls visitor for each immediate child until visitor returns
/// false. Returns true if all the visitor calls returned true, otherwise
/// returns false. ¿C¿Y   ¿Ç¿ÄÔ/// Visit all the descendants of this node.
///
/// This function calls visitor for each descendant in a pre-order traversal
/// until visitor returns false. Returns true if all the visitor calls
/// returned true, otherwise returns false. ¿¿-   ¿ÀN¿‹   ¿À¿Ã¿Ç4¿.  ¿5¿E  ¿¿¿!UÇŒ¿!f   ¿!U¿!V¿$UÄ√¿$Z    ¿%ÑØ¿%!  ¿%K¿%c   ¿+ßu¿+⁄+/// Whether this node is tagged with `tag`. ¿+„¿+Ò   ¿,F|¿,ä</// Whether this node currently has a given [SemanticsFlag]. ¿,í¿,°   ¿V‘O¿VŸ  ¿VÎ¿V¸   ¿Wxã¿YgÅ◊/// Reconfigures the properties of this object to describe the configuration
/// provided in the `config` argument and the children listed in the
/// `childrenInInversePaintOrder` argument.
///
/// The arguments may be null; this represents an empty configuration (all
/// values at their defaults, no children).
///
/// No reference is kept to the [SemanticsConfiguration] object, but the child
/// list is used as-is and should therefore not be changed after this call. ¿Yx'¿Yö  ¿Y•0¿Yª   ¿båóı¿c®Å/// Returns a summary of the semantics for this node.
///
/// If this node has [mergeAllDescendantsIntoThisNode], then the returned data
/// includes the information from this node's descendants. Otherwise, the
/// returned data matches the data on this node.   ¿zÖX¿zò    ¿{≤åQ¿{∑  ¿{ƒ!¿{ﬂ  ¿{Á'¿{Ò   ¿àâ¿¿àkM/// Builds a new list made of [_children] sorted in semantic traversal order.   ¿ëÀÅx¿íµÄ‹/// Sends a [SemanticsEvent] associated with this [SemanticsNode].
///
/// Semantics events should be sent to inform interested parties (like
/// the accessibility system of the operating system) about changes to the UI. ¿íø¿íœ   ¿ìGX¿ìZ   ¿ìG¿ìH¿ì£ë¿ì¥  ¿ì»&¿ìÂ  ¿ì£¿ì§¿§æÇw¿•üÄ≈/// Returns a string representation of this node and its descendants.
///
/// The order in which the children of the [SemanticsNode] will be printed is
/// controlled by the [childOrder] parameter. ¿•≤¿•∫  ¿•—¿•⁄  ¿•Ô0¿¶   ¿¶%K¿¶>  	¿•å¿•ç¿•…¿¶
¿¶¿¶¿¶J¿¶a¿¶b¿ß9Åc¿ßU  ¿ßm¿ßv  ¿ß9¿ßñ  ¿ßæK¿ß◊  ¿ß9¿ß:¿ßù¿ß±¿ß≤¿ß„¿ß˙¿ß˚¿®†Å3¿®¬  ¿®⁄K¿®Û  ¿®†¿®°¿®ˇ¿©¿©¿©◊Å‹¿™:L/// Returns the list of direct children of this node in the specified order. ¿™S"¿™l    ¿´∑Ü¿≠⁄Ç/// An edge of a box, such as top, bottom, left or right, used to compute
/// [SemanticsNode]s that overlap vertically or horizontally.
///
/// For computing horizontal overlap in an LTR setting we create two [_BoxEdge]
/// objects for each [SemanticsNode]: one representing the left edge (marked
/// with [isLeadingEdge] equal to true) and one for the right edge (with [isLeadingEdge]
/// equal to false). Similarly, for vertical overlap we also create two objects
/// for each [SemanticsNode], one for the top and one for the bottom edge. ¿ÆÄﬂ ¿Æ¿Æ ¿Æ¿Æ%  ¿Æ7¿ÆF  ¿ÆQ¿Æ`  ¿Æl¿Ær¿Æà¿ÆÅ¿Æs¿ÆÑ¿Æí¿Æò¿Æß¿Æ†¿Æô¿Æ£¿Æ±¿Æ∑¿Æ«¿Æ∏¿Ææ¿Æø¿Æ—¿Æ◊¿Æ‰¿Æ›¿Æÿ¿Æ‡¿ÆÍÅΩ¿∞öÅí/// True if the edge comes before the seconds edge along the traversal
/// direction, and false otherwise.
///
/// This field is never null.
///
/// For example, in LTR traversal the left edge's [isLeadingEdge] is set to true,
/// the right edge's [isLeadingEdge] is set to false. When considering vertical
/// ordering of boxes, the top edge is the start edge, and the bottom edge is
/// the end edge. ¿∞¨¿±%g/// The offset from the start edge of the parent [SemanticsNode] in the
/// direction of the traversal. ¿±0?¿±k$/// The node whom this edge belongs.  ¿±tZ¿±Ñ  ¿±é¿±ò  ¿±t¿±u ¿±“ñ¿≤™Ä—/// A group of [nodes] that are disjoint vertically or horizontally from other
/// nodes that share the same [SemanticsNode] parent.
///
/// The [nodes] are sorted among each other separately from other nodes. ¿≤Íy ¿≤Í¿≤˝ ¿≥¿≥  ¿≥#¿≥2  ¿≥G¿≥M¿≥a¿≥Z¿≥N¿≥]¿≥gÄ˚¿¥WÄÿ/// The offset from the start edge of the parent [SemanticsNode] in the
/// direction of the traversal.
///
/// This value is equal to the [_BoxEdge.offset] of the first node in the
/// [nodes] list being considered. ¿¥g!¿¥{  ¿¥çe¿¥Ÿ//// The nodes that are sorted among each other.¿¥¿¥Ò¿¥·¿¥Ô¿¥‚ ¿¥˜o¿µ  ¿µ¿µ&  ¿¥˜¿¥¯¿µjÜR¿∂RÄÀ/// Sorts this group assuming that [nodes] belong to the same vertical group.
///
/// This method breaks up this group into horizontal [_SemanticsSortGroup]s
/// then sorts them using [sortedWithinKnot].   ¿ª¿å¿øÉ%/// Sorts [nodes] where nodes intersect both vertically and horizontally.
///
/// In the special case when [nodes] contains one or less nodes, this method
/// returns [nodes] unchanged.
///
/// This method constructs a graph, where vertices are [SemanticsNode]s and
/// edges are "traversed before" relation between pairs of nodes. The sort
/// order is the topological sorting of the graph, with the original order of
/// [nodes] used as the tie breaker.
///
/// Whether a node is traversed before another node is determined by the
/// vector that connects the two nodes' centers. If the vector "points to the
/// right or down", defined as the [Offset.direction] being between `-pi/4`
/// and `3*pi/4`), then the semantics node whose center is at the end of the
/// vector is said to be traversed after.    ¿–>Ñò¿—©Åd/// The implementation of [Comparable] that implements the ordering of
/// [SemanticsNode]s in the accessibility traversal.
///
/// [SemanticsNode]s are sorted prior to sending them to the engine side.
///
/// This implementation considers a [node]'s [sortKey] and its position within
/// the list of its siblings. [sortKey] takes precedence over position. ¿—ÍÄõ ¿—Í¿—¸ ¿“¿“  ¿“¿“!  ¿“-¿“<  ¿“P¿“V¿“c¿“\¿“W¿“_¿“l¿“r¿“É¿“|¿“s¿“¿“âQ¿“÷6/// The node whose position this sort node determines. ¿“ﬂÄµ¿”çÄç/// Determines the position of this node among its siblings.
///
/// Sort keys take precedence over other attributes, such as
/// [position]. ¿”ôl¿”˝U/// Position within the list of siblings as determined by the default sort
/// order.  ¿‘
Ä ¿‘  ¿‘$¿‘8  ¿‘
¿‘ ¿‘ÿúV¿’ÈÅ
/// Owns [SemanticsNode] objects and notifies listeners of changes to the
/// render tree semantics.
///
/// To listen for semantic updates, call [PipelineOwner.ensureSemantics] to
/// obtain a [SemanticsHandle]. This will create a [SemanticsOwner] if
/// necessary. ¿÷Äè ¿÷g¿÷uQ/// Creates a [SemanticsOwner] that manages zero or more [SemanticsNode] objects.¿÷|¿÷ã   ¿÷¶Å∂¿ÿKÅx/// The [onSemanticsUpdate] callback is expected to dispatch [SemanticsUpdate]s
/// to the [FlutterView] that is associated with this [PipelineOwner] and/or
/// [SemanticsOwner].
///
/// A [SemanticsOwner] calls [onSemanticsUpdate] during [sendSemanticsUpdate]
/// after the [SemanticsUpdate] has been build, but before the [SemanticsOwner]'s
/// listeners have been notified. ¿ÿ`8¿ÿy ¿ÿñ¿ÿó¿ÿá¿ÿï¿ÿà¿ÿú=¿ÿ∫ ¿ÿ◊¿ÿÿ¿ÿ√¿ÿ÷¿ÿƒ¿ÿ…¿ÿ›;¿ÿˆ ¿Ÿ¿Ÿ¿Ÿ¿Ÿ¿Ÿ¿ŸÄü¿Ÿùf/// The root node of the semantics tree, if any.
///
/// If the semantics tree is empty, returns null.   ¿Ÿ¿~¿Ÿ—   ¿Ÿ¿¿Ÿ¡¿⁄Bää¿⁄}3/// Update the semantics using [onSemanticsUpdate].   ¿‰–ÇO¿‰Ë  ¿Â¿Â  ¿Â¿Â!   ¿Á#ÇÓ¿Ë\Å%/// Asks the [SemanticsNode] with the given id to perform the given action.
///
/// If the [SemanticsNode] has not indicated that it can perform the action,
/// this function does nothing.
///
/// If the given `action` requires arguments they need to be passed in via
/// the `args` parameter. ¿Ëj¿Ëo  ¿Ër¿ËÉ  ¿Ëå¿Ëï   ¿ÍÑ.¿Í-  ¿ÍS¿Íb  ¿Íg¿Ío  ¿Íx¿Íâ   ¿ÓGÇ©¿ÔÑÅ)/// Asks the [SemanticsNode] at the given position to perform the given action.
///
/// If the [SemanticsNode] has not indicated that it can perform the action,
/// this function does nothing.
///
/// If the given `action` requires arguments they need to be passed in via
/// the `args` parameter. ¿Ôî¿Ôú  ¿Ô•¿Ô∂  ¿Ôø¿Ô»   ¿Ù8¿Ò   ¿Ù¿ı ¿Ò0¿ ’¿ÒÓÄ∑/// Describes the semantic information associated with the owning
/// [RenderObject].
///
/// The information provided in the configuration is used to generate the
/// semantics tree.  4¿ÙÒ ¿Ùˆ ¿ı¿ıôÉ6¿¯µÇ¸/// Whether the configuration forces all children of the owning [RenderObject]
/// that want to contribute semantic information to the semantics tree to do
/// so in the form of explicit [SemanticsNode]s.
///
/// When set to false children of the owning [RenderObject] are allowed to
/// annotate [SemanticsNode]s of their parent with the semantic information
/// they want to contribute to the semantic tree.
/// When set to true the only way for children of the owning [RenderObject]
/// to contribute semantic information to the semantic tree is to introduce
/// new explicit [SemanticsNode]s to the tree.
///
/// This setting is often used in combination with [isSemanticBoundary] to
/// create semantic boundaries that are either writable or not for children.¿¯ ¿¯‘É|¿¸É%/// Whether the owning [RenderObject] makes other [RenderObject]s previously
/// painted within the same semantic boundary unreachable for accessibility
/// purposes.
///
/// If set to true, the semantic information for all siblings and cousins of
/// this node, that are earlier in a depth-first pre-order traversal, are
/// dropped from the semantics tree up until a semantic boundary (as defined
/// by [isSemanticBoundary]) is reached.
///
/// If [isSemanticBoundary] and [isBlockingSemanticsOfPreviouslyPaintedNodes]
/// is set on the same node, all previously painted siblings and cousins up
/// until the next ancestor that is a semantic boundary are dropped.
///
/// Paint order as established by [RenderObject.visitChildrenForSemantics] is
/// used to determine if a node is previous to this one.¿¸K¿˝¨¿˝± ¿˝≈¿˝œÅ.¿˛«Ä∏/// The actions (with associated action handlers) that this configuration
/// would like to contribute to the semantics tree.
///
/// See also:
///
///  * [addAction] to add an action.¿˛˚¿˛¸¿˛“¿˛˙¿˛”¿˛‰¿ˇ¿ˇ ¿ˇ¿˜¿  ¿	,¿	:  ¿I¿W  ¿U¿c  ¿q¿  ¿å¿ö  ¿¶¿¥  ¿®¿∂  ¿¶¿¥  ¿h¿v  ¿!)¿!7  ¿"Ÿ¿"Á  ¿%\¿%j  ¿'§2¿'∑  ¿*¨3¿*ø  ¿-°-¿-¥  ¿0Ü.¿0ô  ¿3é$¿3£  ¿7¿7,  ¿<*¿<  ¿@û*¿@¨  ¿D†¿D≤  ¿F“¿F◊  ¿H'¿H,  ¿Id¿Ii  ¿Jü¿J§  ¿Lœ¿L‘  ¿NÔ¿NÙ  ¿Q∏-¿QΩ ¿Q‡¿TKj¿Tt ¿T≥¿T¥¿Té¿T≤¿Tè¿T¶¿[å8¿[ù ¿[∞¿[¿¿[√¿[¡¿c(8¿c9 ¿cL¿c\¿c_¿c]¿iGA¿iX ¿it¿iÑ¿iá¿iÖ¿o}A¿oé ¿o™¿o∫¿oΩ¿oª¿u7¿u ¿u1¿uA¿uD¿uB¿v`¿vg ¿vr¿wl&¿wÑ  ¿xÃ¿x” ¿x‡¿zÊ¿zÌ ¿z˙¿Éu¿ÉÑ  ¿•k¿•z  ¿ßÛ¿ß˚  ¿©”¿©€  ¿´∂¿´æ  ¿≠~#¿≠ë  ¿∞—¿∞’ ¿∞ﬁÄî¿Ú+Ç√¿ÙƒÇu/// Whether the [RenderObject] owner of this configuration wants to own its
/// own [SemanticsNode].
///
/// When set to true semantic information associated with the [RenderObject]
/// owner of this configuration or any of its descendants will not leak into
/// parents. The [SemanticsNode] generated out of this configuration will
/// act as a boundary.
///
/// Whether descendants of the owning [RenderObject] can add their semantic
/// information to the [SemanticsNode] introduced by this configuration
/// is controlled by [explicitChildNodes].
///
/// This has to be true if [isMergingSemanticsOfDescendants] is also true.   ¿ıÄÄ¿ı  ¿ı,
¿ı2   ¿¸ Äﬂ¿˝ÉÄß/// Whether this configuration is empty.
///
/// An empty configuration doesn't contain any semantic information that it
/// wants to contribute to the semantics tree.   ¿ÑÌ¿‰Ñ¢/// The handler for [SemanticsAction.tap].
///
/// This is the semantic equivalent of a user briefly tapping the screen with
/// the finger without moving it. For example, a button should implement this
/// action.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen while an element is focused.
///
/// On Android prior to Android Oreo a double-tap on the screen while an
/// element with an [onTap] handler is focused will not call the registered
/// handler. Instead, Android will simulate a pointer down and up event at the
/// center of the focused element. Those pointer events will get dispatched
/// just like a regular tap with TalkBack disabled would: The events will get
/// processed by any [GestureDetector] listening for gestures in the center of
/// the focused element. Therefore, to ensure that [onTap] handlers work
/// properly on Android versions prior to Oreo, a [GestureDetector] with an
/// onTap handler should always be wrapping an element that defines a
/// semantic [onTap] handler. By default a [GestureDetector] will register its
/// own semantic [onTap] handler that follows this principle.   ¿q¿  ¿¿(   ¿ÑÅ•¿	Åf/// The handler for [SemanticsAction.longPress].
///
/// This is the semantic equivalent of a user pressing and holding the screen
/// with the finger for a few seconds without moving it.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen without lifting the finger after the
/// second tap.   ¿	JÄÉ¿	N  ¿	Z¿	i   ¿	—Çu¿(Ç./// The handler for [SemanticsAction.scrollLeft].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from right to left. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping left with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided.   ¿hÄÜ¿l  ¿y¿à   ¿ÚÅ`¿:Å'/// The handler for [SemanticsAction.dismiss].
///
/// This is a request to dismiss the currently focused node.
///
/// TalkBack users on Android can trigger this action in the local context
/// menu, and VoiceOver users on iOS can trigger this action with a standard
/// gesture or menu option.   ¿q}¿u  ¿¿é   ¿ÚÇ|¿NÇ3/// The handler for [SemanticsAction.scrollRight].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from left to right. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping right with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided.   ¿ëÄâ¿ï  ¿£¿≤   ¿Çk¿oÇ(/// The handler for [SemanticsAction.scrollUp].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from bottom to top. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping up with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided.   ¿©ÄÄ¿≠  ¿∏¿«   ¿-Çv¿ÖÇ//// The handler for [SemanticsAction.scrollDown].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from top to bottom. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping down with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided.   ¿≈ÄÜ¿…  ¿÷¿Â   ¿OÇV¿ãÇ/// The handler for [SemanticsAction.increase].
///
/// This is a request to increase the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If [this.value] is set, [increasedValue] must also be provided and
/// [onIncrease] must ensure that [this.value] will be set to
/// [increasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping up with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume up button.   ¿≈ÄÄ¿…  ¿‘¿„   ¿IÇZ¿âÇ/// The handler for [SemanticsAction.decrease].
///
/// This is a request to decrease the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If [this.value] is set, [decreasedValue] must also be provided and
/// [onDecrease] must ensure that [this.value] will be set to
/// [decreasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping down with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume down button.   ¿√ÄÄ¿«  ¿“¿·   ¿GÅ¿SÄÌ/// The handler for [SemanticsAction.copy].
///
/// This is a request to copy the current selection to the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿Åt¿Ö  ¿å¿õ   ¿˘Å-¿!Ä¸/// The handler for [SemanticsAction.cut].
///
/// This is a request to cut the current selection and place it in the
/// clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿!Aq¿!E  ¿!K¿!Z   ¿!∂Å ¿"¬ÄÌ/// The handler for [SemanticsAction.paste].
///
/// This is a request to paste the current content of the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿"Ûw¿"˜  ¿"ˇ¿#   ¿#nÅÎ¿%7Å§/// The handler for [SemanticsAction.showOnScreen].
///
/// A request to fully show the semantics node on screen. For example, this
/// action might be send to a node in a scrollable list that is partially off
/// screen to bring it on screen.
///
/// For elements in a scrollable list the framework provides a default
/// implementation for this action and it is not advised to provide a
/// custom one via this setter.   ¿%}Äå¿%Å  ¿%ê¿%ü   ¿&Åî¿'_Å,/// The handler for [SemanticsAction.moveCursorForwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field forward by one character.
///
/// TalkBack users can trigger this by pressing the volume up key while the
/// input focus is in a text field.   ¿'⁄Å1¿'ﬁ  ¿'˝¿(   ¿)Åö¿*eÅ0/// The handler for [SemanticsAction.moveCursorBackwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one character.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿*„Å4¿*Á  ¿+¿+   ¿,ÅÉ¿-fÅ%/// The handler for [SemanticsAction.moveCursorForwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿-“Å'¿-÷  ¿-¿.   ¿.˝ÅÜ¿0IÅ&/// The handler for [SemanticsAction.moveCursorBackwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿0∏Å*¿0º  ¿0◊¿0Î   ¿1ÊÅ•¿3iÅ[/// The handler for [SemanticsAction.setSelection].
///
/// This handler is invoked when the user either wants to change the currently
/// selected text in a text field or change the position of the cursor.
///
/// TalkBack users can trigger this handler by selecting "Move cursor to
/// beginning/end" or "Select all" from the local context menu.   ¿3∂Ç¿3∫  ¿3…¿3ﬂ   ¿5ÕÅL¿7Å/// The handler for [SemanticsAction.setText].
///
/// This handler is invoked when the user wants to replace the current text in
/// the text field with a new text.
///
/// Voice access users can trigger this handler by speaking "type <text>" to
/// their Android devices.   ¿7:Å¿7>  ¿7H¿7Y   ¿8IÉº¿;…ÉK/// The handler for [SemanticsAction.didGainAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler gains
/// the accessibility focus. The accessibility focus is the
/// green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidLoseAccessibilityFocus], which is invoked when the accessibility
///    focus is removed from the node.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus.   ¿<6Ä≥¿<:  ¿<V¿<e   ¿<ÌÉÆ¿@_É=/// The handler for [SemanticsAction.didLoseAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler
/// loses the accessibility focus. The accessibility focus is
/// the green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidGainAccessibilityFocus], which is invoked when the node gains
///    accessibility focus.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus.   ¿@ÃÄ≥¿@–  ¿@Ï¿@˚   ¿B;Çb¿DâÇ!/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android).
///
/// Whether this sort key has an effect on the [SemanticsNode] sort order is
/// subject to how this configuration is used. For example, the [absorb]
/// method may decide to not use this key when it combines multiple
/// [SemanticsConfiguration] objects.   ¿Dæy¿D¬  ¿D ¿D›   ¿E;Åî¿FØÅ^/// The index of this node within the parent's list of semantic children.
///
/// This includes all semantic nodes, not just those currently in the
/// child list. For example, if a scrollable has five children but the first
/// two are not visible (and thus not included in the list of children), then
/// the index of the last node will still be 4.   ¿FÈ]¿FÌ  ¿F˚
¿G   ¿GJÄ⁄¿G˛Ä¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null.   ¿HAÄú¿HE  ¿HV
¿H\   ¿H·ÄÄ¿IEV/// The index of the first visible scrollable child that contributes to
/// semantics.   ¿IyÄç¿I}  ¿Iâ
¿Iè   ¿J
Äí¿Jzb/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.   ¿J∑Äñ¿Jª  ¿J 
¿J–   ¿KQÅ{¿L™Å?/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [isTextField] is true. Defaults to null,
/// which means no limit is imposed on the text field.   ¿LÁÄñ¿LÎ  ¿L˙
¿M    ¿MÅÅk¿N¬Å'/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [isTextField] is true. Must be set when
/// [maxValueLength] is set.   ¿OÄ¢¿O  ¿O"
¿O(   ¿O±Ç¿QqÅ¶/// Whether the semantic information provided by the owning [RenderObject] and
/// all of its descendants should be treated as one logical entity.
///
/// If set to true, the descendants of the owning [RenderObject]'s
/// [SemanticsNode] will merge their semantic information into the
/// [SemanticsNode] representing the owning [RenderObject].
///
/// Setting this to true requires that [isSemanticBoundary] is also true.   ¿QÈÄ°¿QÌ  ¿R
¿R   ¿RéÅ∫¿TÅN/// The handlers for each supported [CustomSemanticsAction].
///
/// Whenever a custom accessibility action is added to a node, the action
/// [SemanticsAction.customAction] is automatically added. A handler is
/// created which uses the passed argument to lookup the custom action
/// handler from this map and invoke it, if present.   ¿TπÅ¿TΩ  ¿T‘.¿T˛   ¿WÅW¿X;Å/// A textual description of the owning [RenderObject].
///
/// Setting this attribute will override the [attributedLabel].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedLabel], which is the [AttributedString] of this property.   ¿X_ÄÜ¿Xc  ¿Xi¿Xq   ¿XÈÇ†¿[eÇJ/// A textual description of the owning [RenderObject] in [AttributedString]
/// format.
///
/// On iOS this is used for the `accessibilityAttributedLabel` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedValue] and [attributedHint] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [label], which is the raw text of this property.   ¿[»ÄÅ¿[Ã  ¿[‹ ¿[Ó   ¿\MÇï¿^¡ÇN/// A textual description for the current value of the owning [RenderObject].
///
/// Setting this attribute will override the [attributedValue].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedValue], which is the [AttributedString] of this property.
///  * [increasedValue] and [attributedIncreasedValue], which describe what
///    [value] will be after performing [SemanticsAction.increase].
///  * [decreasedValue] and [attributedDecreasedValue], which describe what
///    [value] will be after performing [SemanticsAction.decrease].   ¿^ÂÄÜ¿^È  ¿^Ô¿^˜   ¿_oÉ∂¿cÉX/// A textual description for the current value of the owning [RenderObject]
/// in [AttributedString] format.
///
/// On iOS this is used for the `accessibilityAttributedValue` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedLabel] and [attributedHint] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [value], which is the raw text of this property.
///  * [attributedIncreasedValue], which describes what [value] will be after
///    performing [SemanticsAction.increase].
///  * [attributedDecreasedValue], which describes what [value] will be after
///    performing [SemanticsAction.decrease].   ¿cdÄÅ¿ch  ¿cx ¿cä   ¿cÈÇn¿f$Ç/// The value that [value] will have after performing a
/// [SemanticsAction.increase] action.
///
/// Setting this attribute will override the [attributedIncreasedValue].
///
/// One of the [attributedIncreasedValue] or [increasedValue] must be set if
/// a handler for [SemanticsAction.increase] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedIncreasedValue], which is the [AttributedString] of this property.   ¿fZÄ≥¿f^  ¿fm¿fu   ¿gÇ3¿iÅœ/// The value that [value] will have after performing a
/// [SemanticsAction.increase] action in [AttributedString] format.
///
/// One of the [attributedIncreasedValue] or [increasedValue] must be set if
/// a handler for [SemanticsAction.increase] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [increasedValue], which is the raw text of this property.   ¿iåÄ•¿iê  ¿i©)¿iª   ¿j5ÇX¿lZÇ/// The value that [value] will have after performing a
/// [SemanticsAction.decrease] action.
///
/// Setting this attribute will override the [attributedDecreasedValue].
///
/// One of the [attributedDecreasedValue] or [decreasedValue] must be set if
/// a handler for [SemanticsAction.decrease] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
///  * [attributedDecreasedValue], which is the [AttributedString] of this property.   ¿lêÄ≥¿lî  ¿l£¿l´   ¿mGÇ3¿oDÅœ/// The value that [value] will have after performing a
/// [SemanticsAction.decrease] action in [AttributedString] format.
///
/// One of the [attributedDecreasedValue] or [decreasedValue] must be set if
/// a handler for [SemanticsAction.decrease] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [decreasedValue], which is the raw text of this property.   ¿o¬Ä•¿o∆  ¿oﬂ)¿oÒ   ¿pkÅg¿q≥Å*/// A brief description of the result of performing an action on this node.
///
/// Setting this attribute will override the [attributedHint].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedHint], which is the [AttributedString] of this property.   ¿q’ÄÅ¿qŸ  ¿qﬁ¿qÊ   ¿rZÇ±¿tÈÇ]/// A brief description of the result of performing an action on this node in
/// [AttributedString] format.
///
/// On iOS this is used for the `accessibilityAttributedHint` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedLabel] and [attributedValue] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [hint], which is the raw text of this property.   ¿uI}¿uM  ¿u\¿un   ¿u Äì¿vIm/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection].   ¿vxW¿v|  ¿vÑ¿vå   ¿v”Äñ¿wIU/// Provides hint values which override the default hints on supported
/// platforms.   ¿wñÄù¿wö  ¿w®¿w¡   ¿x7Äí¿x±j/// The elevation in z-direction at which the owning [RenderObject] is
/// located relative to its parent.   ¿xÁÄµ¿xÎ  ¿xı¿x˝   ¿y†ÅC¿zÀÅ/// The extend that the owning [RenderObject] occupies in z-direction starting
/// at [elevation].
///
/// It's extremely rare to set this value directly. Instead, it is calculated
/// implicitly when other [SemanticsConfiguration]s are merged into this one
/// via [absorb].   ¿{Äµ¿{  ¿{¿{   ¿{∫Å¿|îÄƒ/// Whether the semantics node is the root of a subtree for which values
/// should be announced.
///
/// See also:
///
///  * [SemanticsFlag.scopesRoute], for a full description of route scoping.   ¿| Q¿|Œ  ¿|⁄
¿|‡   ¿}Ä„¿}—Äû/// Whether the semantics node contains the label of a route.
///
/// See also:
///
///  * [SemanticsFlag.namesRoute], for a full description of route naming.   ¿~O¿~	  ¿~
¿~   ¿~Xj¿~ó3/// Whether the semantics node represents an image.   ¿~≈I¿~…  ¿~—
¿~◊   ¿Éa¿Ç@É/// Whether the semantics node is a live region.
///
/// A live region indicates that updates to semantics node are important.
/// Platforms may use this information to make polite announcements to the
/// user to inform them of updates to this node.
///
/// An example of a live region is a [SnackBar] widget. On Android and iOS,
/// live region causes a polite announcement to be generated automatically,
/// even if the widget does not have accessibility focus. This announcement
/// may not be spoken if the OS accessibility services are already
/// announcing something else, such as reading the label of a focused widget
/// or providing a system announcement.
///
/// See also:
///
///  * [SemanticsFlag.isLiveRegion], the semantics flag that this setting controls.   ¿ÇvQ¿Çz  ¿ÇÖ
¿Çã   ¿ÇÀÄß¿ÉRo/// The reading direction for the text in [label], [value], [hint],
/// [increasedValue], and [decreasedValue].   ¿Éñw¿Éö  ¿É®¿É∏   ¿ÑÅµ¿ÖïÅn/// Whether the owning [RenderObject] is selected (true) or not (false).
///
/// This is different from having accessibility focus. The element that is
/// accessibility focused may or may not be selected; e.g. a [ListTile] can have
/// accessibility focus but have its [ListTile.selected] property set to false,
/// in which case it will not be flagged as selected.   ¿Ö…O¿ÖÕ  ¿Öÿ
¿Öﬁ   ¿ÜÉ<¿à¯Ç≥/// Whether the owning [RenderObject] is currently enabled.
///
/// A disabled object does not respond to user interactions. Only objects that
/// usually respond to user interactions, but which currently do not (like a
/// disabled button) should be marked as disabled.
///
/// The setter should not be called for objects (like static text) that never
/// respond to user interactions.
///
/// The getter will return null if the owning [RenderObject] doesn't support
/// the concept of being enabled/disabled.
///
/// This property does not control whether semantics are enabled. If you wish to
/// disable semantics for a particular widget, you should use an [ExcludeSemantics]
/// widget.   ¿â[ÄÇ¿â_  ¿âi¿âp   ¿â·Ç&¿ãßÅ©/// If this node has Boolean state that can be controlled by the user, whether
/// that state is checked or unchecked, corresponding to true and false,
/// respectively.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have checked/unchecked state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// checked/unchecked state.   ¿å
Ä∫¿å  ¿å¿å   ¿å»Åˆ¿éNÅk/// If this node has tristate that can be controlled by the user, whether
/// that state is in its mixed state.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have checked/unchecked state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// mixed checked state.   ¿é¡Ä¬¿é≈  ¿é◊¿éﬁ   ¿èáÅˇ¿ë&ÅÑ/// If this node has Boolean state that can be controlled by the user, whether
/// that state is on or off, corresponding to true and false, respectively.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have on/off state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// on/off state.   ¿ëâÄÇ¿ëç  ¿ëó¿ëû   ¿íÅ{¿ì9Å/// Whether the owning RenderObject corresponds to UI that allows the user to
/// pick one of several mutually exclusive options.
///
/// For example, a [Radio] button is in a mutually exclusive group because
/// only one radio button in that group can be marked as [isChecked].   ¿ìço¿ìë  ¿ì¨
¿ì≤   ¿î ~¿îK?/// Whether the owning [RenderObject] can hold the input focus.   ¿îÅQ¿îÖ  ¿îë
¿îó   ¿î÷ÄÅ¿ï(F/// Whether the owning [RenderObject] currently holds the input focus.   ¿ïZM¿ï^  ¿ïh
¿ïn   ¿ï´ÄÅ¿ïˇH/// Whether the owning [RenderObject] is a button (true) or not (false).   ¿ñ/K¿ñ3  ¿ñ<
¿ñB   ¿ñ~{¿ñ–F/// Whether the owning [RenderObject] is a link (true) or not (false).   ¿ñ¸G¿ó   ¿ó
¿ó   ¿óGÄÅ¿óõH/// Whether the owning [RenderObject] is a header (true) or not (false).   ¿óÀK¿óœ  ¿óÿ
¿óﬁ   ¿òÄÅ¿ònH/// Whether the owning [RenderObject] is a slider (true) or not (false).   ¿òûK¿ò¢  ¿ò´
¿ò±   ¿òÌÄï¿ôKE/// Whether the owning [RenderObject] is a keyboard key (true) or not   ¿ôÖU¿ôâ  ¿ôó
¿ôù   ¿ôﬁÉn¿ùÉ/// Whether the owning [RenderObject] is considered hidden.
///
/// Hidden elements are currently not visible on screen. They may be covered
/// by other elements or positioned outside of the visible area of a viewport.
///
/// Hidden elements cannot gain accessibility focus though regular touch. The
/// only way they can be focused is by moving the focus to them via linear
/// navigation.
///
/// Platforms are free to completely ignore hidden elements and new platforms
/// are encouraged to do so.
///
/// Instead of marking an element as hidden it should usually be excluded from
/// the semantics tree altogether. Hidden elements are only included in the
/// semantics tree to work around platform limitations and they are mainly
/// used to implement accessibility scrolling on iOS.   ¿ùOK¿ùS  ¿ù\
¿ùb   ¿ùûu¿ù‡6/// Whether the owning [RenderObject] is a text field.   ¿ûQ¿û  ¿û&
¿û,   ¿ûkÄ®¿û‚g/// Whether the owning [RenderObject] is read only.
///
/// Only applicable when [isTextField] is true.   ¿üO¿ü  ¿ü%
¿ü+   ¿üiÅT¿†åÅ/// Whether [this.value] should be obscured.
///
/// This option is usually set in combination with [isTextField] to indicate
/// that the text field contains a password (or other sensitive information).
/// Doing so instructs screen readers to not read out [this.value].   ¿†¿O¿†ƒ  ¿†œ
¿†’   ¿°Äı¿°’Ä∞/// Whether the text field is multiline.
///
/// This option is usually set in combination with [isTextField] to indicate
/// that the text field is configured to be multiline.   ¿¢Q¿¢  ¿¢
¿¢!   ¿¢`ÅÈ¿§Åå/// Whether the platform can scroll the semantics node when the user attempts
/// to move focus to an offscreen child.
///
/// For example, a [ListView] widget has implicit scrolling so that users can
/// easily move to the next visible set of children. A [TabBar] widget does
/// not have implicit scrolling, so that users can navigate into the tab
/// body when reaching the end of the tab bar.   ¿§Lc¿§P  ¿§e
¿§k   ¿§≥Äµ¿•H}/// The currently selected text (or the position of the cursor) within
/// [this.value] if this node represents a text field.   ¿•åÄÇ¿•ê  ¿•û¿•Æ   ¿¶Åﬁ¿ßŒÅõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken.   ¿®}¿®  ¿®!¿®*   ¿®èÅA¿©¨Å /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken.   ¿©Ô¿©Û  ¿™¿™   ¿™rÅA¿´èÅ /// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent], from where this value is usually taken.   ¿´“¿´÷  ¿´Ê¿´Ô   ¿¨`Å¿≠WÄÃ/// The set of tags that this configuration wants to add to all child
/// [SemanticsNode]s.
///
/// See also:
///
///  * [addTagForChildren] to add a tag and for more information about their
///    usage.   
¿ˇÅX¿ˇÆÄÉ/// Adds an `action` to the semantics tree.
///
/// The provided `handler` is called to respond to the user triggered
/// `action`. ¿ˇπ¿ˇ   ¿ˇ—¿ˇÈ   ¿ yÅä¿?Ä∂/// Adds an `action` to the semantics tree, whose `handler` does not expect
/// any arguments.
///
/// The provided `handler` is called to respond to the user triggered
/// `action`. ¿V¿g  ¿n¿|   ¿AÉÄ¥¿A˙Z/// Returns the action handler registered for [action] or null if none was
/// registered. ¿B¿B   ¿U—Å0¿U÷  ¿UÔ¿U¯   ¿≠¶É¿∞:Çp/// Specifies a [SemanticsTag] that this configuration wants to apply to all
/// child [SemanticsNode]s.
///
/// The tag is added to all [SemanticsNode] that pass through the
/// [RenderObject] owning this configuration while looking to be attached to a
/// parent [SemanticsNode].
///
/// Tags are used to communicate to a parent [SemanticsNode] that a child
/// [SemanticsNode] was passed through a particular [RenderObject]. The parent
/// can use this information to determine the shape of the semantics tree.
///
/// See also:
///
///  * [RenderViewport.excludeFromScrolling] for an example of
///    how tags are used. ¿∞L¿∞Z   ¿∞„ÄÆ¿∞Ë  ¿∞Ò¿±   ¿±
¿±   ¿±ï@¿±ö  ¿±£¿±≤   ¿±ˇÑ¿≤¸ÄÌ/// Whether this configuration is compatible with the provided `other`
/// configuration.
///
/// Two configurations are said to be compatible if they can be added to the
/// same [SemanticsNode] without losing any semantics information. ¿≥¿≥&   ¿∂ä-¿∏BÇ/// Absorb the semantic information from `child` into this configuration.
///
/// This adds the semantic information of both configurations and saves the
/// result in this configuration.
///
/// The [RenderObject] owning the `child` configuration must be a descendant
/// of the [RenderObject] that owns this configuration.
///
/// Only configurations that have [explicitChildNodes] set to false can
/// absorb other configurations and it is recommended to only absorb compatible
/// configurations as determined by [isCompatibleWith]. ¿∏I¿∏a   ¿¿?Öˆ¿¿â0/// Returns an exact copy of this configuration.    ¿Ã2ä^¿Œ‚Ç†/// Base class for all sort keys for [SemanticsProperties.sortKey] accessibility
/// traversal order sorting.
///
/// Sort keys are sorted by [name], then by the comparison that the subclass
/// implements. If [SemanticsProperties.sortKey] is specified, sort keys within
/// the same semantic group must all be of the same type.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].
///
/// If no sort key is applied to a semantics node, then it will be ordered using
/// a platform dependent default algorithm.
///
/// See also:
///
///  * [OrdinalSortKey] for a sort key that sorts using an ordinal. ¿œ3ÄΩ ¿œ“¿œ‚Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿œ‰	¿œÍ   ¿œÙÅ?¿—/Å/// An optional name that will group this sort key with other sort keys of the
/// same [name].
///
/// Sort keys must have the same `runtimeType` when compared.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].  ¿—8Ç∂¿—H  ¿—R¿—d  ¿—8¿—9¿”ÚÅ’¿’õÅÖ/// The implementation of [compareTo].
///
/// The argument is guaranteed to be of the same type as this object and have
/// the same [name].
///
/// The method should return a negative number if this object comes earlier in
/// the sort order than the argument; and a positive number if it comes later
/// in the sort order. Returning zero causes the system to use default sort
/// order. ¿’• ¿’¡  ¿’ä¿’ã¿’ÀÄ√¿’‹  ¿’&¿÷  ¿’À¿’Ã ¿÷íáæ¿ŸÔÉV/// A [SemanticsSortKey] that sorts simply based on the `double` value it is
/// given.
///
/// The [OrdinalSortKey] compares itself with other [OrdinalSortKey]s
/// to sort based on the order it is given.
///
/// [OrdinalSortKey]s are sorted by the optional [name], then by their [order].
/// If [SemanticsProperties.sortKey] is a [OrdinalSortKey], then all the other
/// specified sort keys in the same semantics group must also be
/// [OrdinalSortKey]s.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].
///
/// The ordinal value [order] is typically a whole number, though it can be
/// fractional, e.g. in order to fit between two other consecutive whole
/// numbers. The value must be finite (it cannot be [double.nan],
/// [double.infinity], or [double.negativeInfinity]). ¿⁄ÅD ¿⁄∏¿⁄∆Äê/// Creates a const semantics sort key that uses a [double] as its key value.
///
/// The [order] must be a finite number, and must not be null.¿⁄Ã
¿⁄“  ¿⁄ﬁ
¿⁄Â  ¿⁄Ò¿⁄˜¿€¿⁄˛¿⁄¯¿€¿€¿€¿€5¿€¿€¿€¿€$¿€%¿€?¿€E¿€]¿€L¿€F¿€N¿€T¿€U¿€cÅa¿‹øÅB/// Determines the placement of this key in a sequence of keys that defines
/// the order in which this node is traversed by the platform's accessibility
/// services.
///
/// Lower values will be traversed first. Keys with the same [name] will be
/// grouped together and sorted by name first, and then sorted by [order].  ¿‹…Äº¿‹Ÿ  ¿‹„¿‹Û  ¿‹…¿‹ ¿›âÄ≈¿›ö  ¿›Æ&¿›À  ¿›â¿›ä  ¿∆9ÇJ¿∆û_/// Used by [debugDumpSemanticsTree] to specify the order in which child nodes
/// are printed.  ¿∆∫Å¿«ºÄ˜/// Print nodes in inverse hit test order.
///
/// In inverse hit test order, the last child of a [SemanticsNode] will be
/// asked first if it wants to respond to a user's interaction, followed by
/// the second last, etc. until a taker is found. ¿«œÄ±¿»rÄö/// Print nodes in semantic traversal order.
///
/// This is the order in which a user would navigate the UI using the "next"
/// and "previous" gestures.      ¿ ÍCÄ©¿ Í•\/// In tests use this function to reset the counter used to generate
/// [SemanticsNode.id].   ¿«ŸÅC¿»!@/// Converts `point` to the `node`'s parent's coordinate system. ¿»;¿»J  ¿»O¿»W   ¿…á¿À2Åˇ/// Sorts `children` using the default sorting algorithm, and returns them as a
/// new list.
///
/// The algorithm first breaks up children into groups such that no two nodes
/// from different groups overlap vertically. These groups are sorted vertically
/// according to their [_SemanticsSortGroup.startOffset].
///
/// Within each group, the nodes are sorted using
/// [_SemanticsSortGroup.sortedWithinVerticalGroup].
///
/// For an illustration of the algorithm see http://bit.ly/flutter-default-traversal. ¿ÀJ¿À_  ¿Àh¿Àw   ¿»ÖÉ´¿»ñ  ¿»≤.¿»Õ  ¿»‰/¿»ˇ  ¿…)¿…0  ¿…D*¿…]    ÑÄ„Ñ«Ä°/// Signature for a function that is called for each [SemanticsNode].
///
/// Return false to stop visiting nodes.
///
/// Used by [SemanticsNode.visitChildren].  ÑÏÑ˚   ÖÅÖÊÄ€/// Signature for [SemanticsAction]s that move the cursor.
///
/// If `extendSelection` is set to true the cursor movement should extend the
/// current selection or (if nothing is currently selected) start a selection.  ÜÜ   Ü Ä–Ü≥Ää/// Signature for the [SemanticsAction.setSelection] handlers to change the
/// text selection (or re-position the cursor) to `selection`.  Ü◊ÜÊ   ÜÚÄ§ájo/// Signature for the [SemanticsAction.setText] handlers to replace the
/// current text with the input `text`.  áâáë   áòÄ∞àr/// Signature for a handler of a [SemanticsAction].
///
/// Returned by [SemanticsConfiguration.getActionHandler].  à:àC   àJÄ‘à€Äà/// Signature for a function that receives a semantics update and returns no result.
///
/// Used by [SemanticsOwner.onSemanticsUpdate].  ââ       í≥ <ÄÜÄ§Ä•Ä¡ÄŸÅ=Å>ÅhÅ¥Å‹ÇÇÇ<Ç[Ç\ÇŒÇœÉnÉ©ÉËÉÈÑÑÑcÑgÑêÑîÑøÖÖÖ=ÖAÖèÖﬁÜÜ ÜlÜ´ÜÒÜÚá:ábáóáòáÃá–ààIàJàüà£à”ââ âAâEâÑâ—ää!äoäºä äŒããjã∏ã«ã‹ã¸ååRå¢åÚçç$ç%çbçhçÆç√çƒç–ééééOéSéïé›è%èmèºêêêêlê†ê§êÛëë
ëRë}ëÅëèëìë‰ëÔíí:í@íxí¥í—íÏíˇìììeìsìyì∞î"î>îXîvîäîãî…î‡î·ïï3ï4ïnïèïêïúï‘ï’ï·ññ0ñDñJñtñîñ≤ñ’ñŸñ⁄ñÊñ¸óYó]ó^óßó¿ó⁄ò4òäòãò∫òıôô/ôIôfôáôçô†ô§ô•ô‘öö!ö%ö'ö(ö`ököÑößö≠ö¯õõõXõgõ{õéõøõ˜ú
úHúZúêú¬ù
ùù!ù6ùBùCù{ùíùìùΩù√ûû/û0ûsûyû üüKüeüyüüüü≤ü∏üπüﬁ††h†è†∑†˘°'°X°Ö°ê°„¢¢¢¢b¢f¢g¢≥¢ø¢‚££3£U£õ£ü£†£¨£‰£Â£Ò§§h§l§n§o§π§˜•F•å•í•œ•Î¶¶¶)¶I¶a¶r¶â¶™¶»¶…ßßQßWß|ßòßôß•®®®%®l®Ö®ö®†®¡®Ë©©W©Ç©à©≠©≈©À™8™<™>™?™w™{™«´´h´z´~´º´«´Ò¨¨¨l¨r¨Ω¨œ¨Ë≠≠&≠I≠u≠°≠√≠ﬁ≠ˇÆÆ4ÆQÆrÆëÆµÆ◊Æ˙ØØ?ØaØáØñØ™ØÕØÎ∞∞3∞[∞å∞Ω∞‰±g≤≤©≥e¥!¥ø¥‹¥›µµ/µ0µqµÜµáµ∆µÃ∂∂∂E∂s∂t∂µ∂÷∂‹∑∑∑T∑~∑∑æ∑ƒ∑˝∏∏=∏k∏l∏≠∏Œ∏‘πππLπvπwπ≥π‹π‚∫∫!∫d∫§∫•∫·ª'ª-ªfªlªÆª·ª‚ººGºMºÜºåºœΩΩΩLΩíΩòΩ—Ω◊ææLæMæõæ°æ⁄æ‡øøEøFøìø∑øΩøˆø¸¿ @4¿ @]¿ @^¿ @ì¿ @ô¿ @“¿ @Í¿ @Î¿ A)¿ A_¿ AÖ¿ AÜ¿ A◊¿ B¿ B)¿ B*¿ Bv¿ B|¿ B…¿ B’¿ BÙ¿ Bı¿ C;¿ CU¿ CV¿ C¶¿ C∏¿ Cæ¿ D¿ DZ¿ D†¿ D¶¿ D∂¿ Dº¿ E¿ E&¿ E'¿ Ev¿ Eà¿ Eé¿ E…¿ Eœ¿ Eﬂ¿ EÂ¿ F8¿ FY¿ FZ¿ F©¿ Fª¿ F¡¿ F¸¿ G¿ G¿ G¿ Gk¿ Gå¿ Gç¿ G◊¿ GÙ¿ G˙¿ HH¿ Hí¿ Hß¿ H≠¿ HΩ¿ H√¿ I¿ I=¿ IZ¿ I[¿ Iß¿ Iπ¿ Iø¿ J¿ J ¿ J&¿ Jv¿ J∏¿ J’¿ J÷¿ K%¿ K7¿ K=¿ Kä¿ Kû¿ K§¿ Kı¿ L ¿ LA¿ LB¿ LÅ¿ Lî¿ Lï¿ L—¿ LÚ¿ LÛ¿ MM¿ MS¿ Mö¿ MÎ¿ M˙¿ N¿ N¿ N_¿ Ne¿ Nu¿ N{¿ NÀ¿ NÌ¿ O¿ O¿ ON¿ OT¿ Od¿ Oj¿ O∂¿ O–¿ O—¿ P¿ P;¿ PA¿ Pt¿ Pz¿ Pä¿ Pê¿ Pÿ¿ Q¿ Q¿ Q5¿ Qv¿ Qw¿ Q™¿ Qı¿ Qˆ¿ R¿ RH¿ RI¿ RU¿ Rö¿ R≈¿ S¿ Sw¿ S∆¿ T¿ TF¿ Tê¿ Tª¿ T€¿ T‚¿ U3¿ Uã¿ Uú¿ UÛ¿ V`¿ Va¿ Vê¿ V‘¿ V˚¿ W¿ W ¿ Ws¿ Wª¿ X¿ X]¿ X∑¿ X˝¿ YG¿ Y¨¿ Y◊¿ ZC¿ ZI¿ Z†¿ Z˜¿ [V¿ [Ø¿ \ ¿ \\¿ \∂¿ ]¿ ]¿ ]¿ ]#¿ ]F¿ ]h¿ ]à¿ ]¨¿ ]‡¿ ^¿ ^Z¿ ^†¿ ^“¿ ^ˆ¿ _&¿ _D¿ _k¿ _°¿ _Õ¿ _˝¿ `/¿ `c¿ `ó¿ `…¿ `˚¿ a5¿ a]¿ aÖ¿ a≠¿ b¿ b	¿ b
¿ b¿ b9¿ bD¿ bQ¿ bf¿ b{¿ bô¿ b∑¿ bÀ¿ bÿ¿ bÎ¿ bı¿ bˇ¿ c¿ c(¿ c9¿ cM¿ cb¿ cw¿ cã¿ cü¿ c∞¿ c ¿ c€¿ cÏ¿ c˝¿ dX¿ d_¿ dd¿ de¿ d™¿ d”¿ dÊ¿ dÏ¿ e¿ e>¿ eT¿ e\¿ eä¿ e≠¿ e≈¿ eÕ¿ e◊¿ eÍ¿ e¿ f¿ f¿ f¿ f	¿ fX¿ fy¿ fâ¿ f£¿ fΩ¿ f€¿ f·¿ f‚¿ g¿ g¿ g¿ gy¿ g{¿ g|¿ g√¿ g“¿ g÷¿ h¿ h¿ hH¿ hr¿ hì¿ hß¿ h¡¿ h·¿ i¿ i¿ i.¿ i4¿ if¿ il¿ i≥¿ i‡¿ iÊ¿ j¿ j)¿ jD¿ jE¿ jr¿ jx¿ j™¿ j∞¿ j˙¿ k4¿ k:¿ kl¿ kà¿ k©¿ k™¿ k‹¿ l#¿ l$¿ l0¿ lo¿ lp¿ l|¿ lü¿ lÀ¿ lﬂ¿ lÂ¿ m¿ m8¿ mm¿ mq¿ mr¿ m~¿ m√¿ mÓ¿ n>¿ nö¿ nû¿ n†¿ n°¿ n¿ o¿ o	¿ oY¿ om¿ ox¿ oØ¿ o‘¿ oÚ¿ p¿ p¿ p&¿ p9¿ pK¿ p\¿ pk¿ p|¿ pê¿ p°¿ p∑¿ p ¿ pﬁ¿ p¿ q¿ q$¿ q7¿ qK¿ qa¿ qv¿ qÜ¿ qõ¿ q¥¿ q—¿ q·¿ q˚¿ r¿ r%¿ r>¿ ra¿ rz¿ rù¿ r¨¿ ræ¿ r◊¿ rÔ¿ s¿ s¿ s2¿ sB¿ sX¿ so¿ sá¿ sú¿ s≥¿ s»¿ s›¿ sÓ¿ s˛¿ t¿ t9¿ tc¿ tá¿ t¨¿ t≈¿ tŸ¿ tˇ¿ u%¿ u9¿ uZ¿ uŒ¿ vB¿ v⁄¿ wr¿ w‚¿ w„¿ x3¿ xZ¿ x`¿ xÆ¿ x˘¿ y+¿ yB¿ yC¿ yà¿ yÕ¿ y›¿ y„¿ z#¿ zg¿ zâ¿ zè¿ zÃ¿ z„¿ z‰¿ {)¿ {m¿ {ß¿ {≠¿ {Î¿ |$¿ |`¿ |p¿ |v¿ |µ¿ | ¿ |À¿ }¿ }V¿ }f¿ }l¿ }©¿ }¿¿ }¡¿ ~¿ ~X¿ ~^¿ ~Æ¿ ~”¿ ~Î¿ ~Ï¿ 0¿ 6¿ É¿ ï¿ ´¿ ¨¿ Ó¿ Ù¿ ÄD¿ Äé¿ Äú¿ Ä∞¿ Ä±¿ Äı¿ Ä˚¿ ÅJ¿ Åò¿ ÅΩ¿ Å”¿ Å‘¿ Ç¿ Ç"¿ Çl¿ Ç~¿ Çó¿ Çò¿ Ç‹¿ Ç‚¿ É)¿ ÉB¿ ÉX¿ ÉY¿ É£¿ Éæ¿ Éø¿ É¸¿ Ñ¿ Ñ2¿ Ñ8¿ Ñ{¿ Ñì¿ Ñî¿ Ñ’¿ Ñ€¿ Ö"¿ Ö(¿ Öz¿ Öƒ¿ Ü¿ ÜT¿ Üm¿ Ün¿ ÜØ¿ Üµ¿ á¿ áF¿ áL¿ áû¿ áË¿ à9¿ àx¿ àè¿ àê¿ à›¿ à„¿ â3¿ ât¿ âú¿ âù¿ â◊¿ â›¿ ä,¿ ä}¿ äÉ¿ ä”¿ ã ¿ ã2¿ ã8¿ ãà¿ ãß¿ ã≠¿ ã˛¿ åL¿ åô¿ å—¿ åÁ¿ åË¿ ç¿ ç%¿ çr¿ ç¬¿ é¿ é¿ é ¿ én¿ é}¿ éÉ¿ éÕ¿ è¿ è¿ èB¿ è[¿ è\¿ è©¿ è◊¿ è›¿ ê¿ ê\¿ êí¿ êò¿ ê®¿ êÆ¿ ê˙¿ ë¿ ë1¿ ë2¿ ë¿ ëÖ¿ ëï¿ ëõ¿ ëÍ¿ í¿ í¿ í>¿ íD¿ íT¿ íZ¿ í†¿ íµ¿ í∂¿ í˛¿ ì¿ ìP¿ ìù¿ ì–¿ ì÷¿ î$¿ îr¿ î¿¿ ï¿ ïT¿ ï~¿ ïÑ¿ ïî¿ ïö¿ ïÎ¿ ñB¿ ñ\¿ ñ]¿ ñ©¿ ñª¿ ñ¡¿ ó¿ ó"¿ ó(¿ ór¿ ó´¿ ó»¿ ó…¿ ò¿ ò*¿ ò0¿ ò}¿ òë¿ òó¿ ò‡¿ òˇ¿ ô ¿ ô!¿ ôU¿ ô[¿ ô™¿ ô„¿ ôÈ¿ ö8¿ öL¿ öR¿ öb¿ öh¿ öπ¿ ö›¿ õ,¿ õC¿ õD¿ õó¿ õù¿ õÁ¿ ú1¿ ú7¿ úÜ¿ úö¿ ú†¿ ú∞¿ ú∂¿ ù¿ ù5¿ ùs¿ ùû¿ ùü¿ ù‡¿ ùÊ¿ û5¿ ûn¿ ût¿ û√¿ û◊¿ û›¿ ûÌ¿ ûÛ¿ üD¿ üh¿ ü∑¿ üŒ¿ üœ¿ † ¿ †5¿ †;¿ †Ö¿ †œ¿ †’¿ °$¿ °8¿ °>¿ °N¿ °T¿ °§¿ °”¿ ¢¿ ¢<¿ ¢=¿ ¢É¿ ¢Œ¿ ¢‘¿ £¿ £j¿ £Ç¿ £à¿ £¡¿ £˝¿ §¿ §¿ §¿ §h¿ §ó¿ §Â¿ §¯¿ •¿ •¿ •j¿ •∑¿ •Ω¿ ¶¿ ¶X¿ ¶Ä¿ ¶Ü¿ ¶ø¿ ¶˚¿ ß¿ ß¿ ß¿ ßg¿ ßü¿ ßÊ¿ ®¿ ®¿ ®a¿ ®¨¿ ®≤¿ ®˝¿ ©H¿ ©`¿ ©f¿ ©ü¿ ©€¿ ©·¿ ©Ò¿ ©˜¿ ™F¿ ™u¿ ™√¿ ™÷¿ ™ˆ¿ ™˜¿ ´H¿ ´ï¿ ´õ¿ ´Ï¿ ¨6¿ ¨^¿ ¨d¿ ¨ù¿ ¨Â¿ ¨Î¿ ¨˚¿ ≠¿ ≠Q¿ ≠â¿ ≠–¿ Æ¿ Æ¿ ÆU¿ Æj¿ Æp¿ Ææ¿ Æ˜¿ Æ˝¿ ØJ¿ Ø^¿ Ød¿ Øt¿ Øz¿ Ø ¿ ØÓ¿ ∞<¿ ∞R¿ ∞S¿ ∞§¿ ∞◊¿ ∞›¿ ±&¿ ±p¿ ±v¿ ±√¿ ±◊¿ ±›¿ ±Ì¿ ±Û¿ ≤B¿ ≤q¿ ≤Æ¿ ≤ÿ¿ ≤Ÿ¿ ≥¿ ≥¿ ≥n¿ ≥®¿ ≥€¿ ≥·¿ ¥#¿ ¥m¿ ¥Ü¿ ¥á¿ ¥–¿ ¥·¿ ¥Á¿ µ3¿ µÇ¿ µπ¿ µø¿ ∂¿ ∂=¿ ∂>¿ ∂Ö¿ ∂©¿ ∂Ø¿ ∂ﬂ¿ ∑¿ ∑¿ ∑U¿ ∑g¿ ∑m¿ ∑ª¿ ∏	¿ ∏0¿ ∏S¿ ∏T¿ ∏ú¿ ∏¢¿ ∏Ì¿ π<¿ π]¿ πc¿ π≠¿ π˛¿ ∫G¿ ∫M¿ ∫]¿ ∫c¿ ∫≥¿ ∫—¿ ∫˜¿ ∫¯¿ ª%¿ ª+¿ ª{¿ ªÀ¿ ªŸ¿ ªﬂ¿ º+¿ ºr¿ ºè¿ ºê¿ º√¿ º…¿ Ω¿ ΩT¿ ΩZ¿ Ω¶¿ Ωı¿ æ¿ æ*¿ æ+¿ æ_¿ æe¿ æ¥¿ ø¿ ø!¿ ø'¿ øw¿ ø√¿ ¿¿ ¿]¿ ¿p¿ ¿î¿ ¿ï¿ ¿ ¿ ¿–¿ ¡¿ ¡m¿ ¡å¿ ¡í¿ ¡„¿ ¬/¿ ¬|¿ ¬Ã¿ ¬ﬂ¿ √¿ √¿ √7¿ √=¿ √å¿ √⁄¿ √˜¿ √˝¿ ƒK¿ ƒó¿ ƒ‚¿ ≈1¿ ≈D¿ ≈f¿ ≈g¿ ≈õ¿ ≈°¿ ≈¿ ∆>¿ ∆[¿ ∆a¿ ∆±¿ ∆˝¿ «J¿ «ö¿ «≠¿ «—¿ «“¿ »¿ »
¿ »W¿ »õ¿ »°¿ »Á¿ …4¿ …:¿ …Ü¿ …÷¿ …Ó¿  ¿  ¿  C¿  I¿  ñ¿  ⁄¿  ‡¿ À&¿ Às¿ Ày¿ À«¿ Ã¿ Ã1¿ ÃS¿ ÃT¿ ÃÇ¿ Ãà¿ Ã–¿ Ã÷¿ Õ%¿ ÕN¿ Õl¿ Õm¿ Õö¿ Õ†¿ ÕÈ¿ Õ˙¿ Œ ¿ ŒO¿ Œx¿ Œï¿ Œñ¿ Œ≈¿ ŒÀ¿ œ¿ œ¿ œg¿ œê¿ œØ¿ œ∞¿ œˆ¿ œ¸¿ –F¿ –q¿ –w¿ –≈¿ –Î¿ —&¿ —'¿ —n¿ —t¿ —æ¿ —Í¿ —¿ “@¿ “f¿ “¢¿ “£¿ “‰¿ “Í¿ ”4¿ ”[¿ ”a¿ ”±¿ ”◊¿ ‘¿ ‘¿ ‘P¿ ‘V¿ ‘†¿ ‘«¿ ‘Õ¿ ’¿ ’C¿ ’z¿ ’{¿ ’±¿ ’∑¿ ÷¿ ÷R¿ ÷X¿ ÷£¿ ÷Â¿ ◊¿ ◊¿ ◊D¿ ◊J¿ ◊õ¿ ◊¡¿ ◊«¿ ÿ¿ ÿ3¿ ÿV¿ ÿW¿ ÿö¿ ÿ†¿ ÿÓ¿ Ÿ,¿ Ÿt¿ Ÿæ¿ ŸË¿ ŸÓ¿ ⁄?¿ ⁄ê¿ ⁄ﬁ¿ ⁄‰¿ ⁄Ù¿ ⁄˙¿ €J¿ €s¿ €≈¿ €¯¿ €˘¿ ‹<¿ ‹B¿ ‹ä¿ ‹ ¿ ›¿ ›`¿ ›ä¿ ›ê¿ ›·¿ ﬁ2¿ ﬁÄ¿ ﬁÜ¿ ﬁñ¿ ﬁú¿ ﬁÈ¿ ﬂ¿ ﬂY¿ ﬂå¿ ﬂç¿ ﬂæ¿ ﬂƒ¿ ‡¿ ‡	¿ ‡V¿ ‡•¿ ‡√¿ ‡‰¿ ‡Â¿ ·4¿ ·:¿ ·Ñ¿ ·”¿ ‚!¿ ‚r¿ ‚x¿ ‚à¿ ‚é¿ ‚÷¿ „ ¿ „!¿ „-¿ „r¿ „ù¿ „Ù¿ ‰G¿ ‰†¿ ‰Ë¿ ÂN¿ Âñ¿ Â¸¿ ÊM¿ Ê≈¿ Á¿ Áé¿ Á‘¿ Ë8¿ Ëp¿ Ë’¿ È8¿ È≠¿ È±¿ È≤¿ Èæ¿ Í@¿ ÍB¿ ÍC¿ Íà¿ Í†¿ Í∆¿ ÍÎ¿ ÍÌ¿ ÍÓ¿ Î¿ Î!¿ Îq¿ Î∏¿ Ï¿ Ï"¿ Ïj¿ Ïâ¿ Ïè¿ Ïﬂ¿ ÏÒ¿ Ì¿ Ì¿ Ì1¿ ÌP¿ Ìu¿ Ìv¿ Ì¡¿ Ì«¿ Ì˛¿ Ó¿ Ó#¿ ÓC¿ Óf¿ Óv¿ Óú¿ ÓØ¿ Ó≥¿ Ó¥¿ Óµ¿ Ó˚¿ Ô ¿ Ôc¿ Ô≈¿ Ôˆ¿ =¿ >¿ `¿ Ä¿ ‘¿ ¿ Ù¿ ı¿ Ò7¿ Ò=¿ Òç¿ ÒÆ¿ Ò¿¿ Ò¡¿ ÒÏ¿ ÒÚ¿ Ú;¿ Úã¿ Úπ¿ Úø¿ Û¿ ÛS¿ Ûç¿ Û¢¿ Û≠¿ ÛÆ¿ Û”¿ Û‘¿ Û‚¿ Û„¿ Ù=¿ ÙC¿ Ùä¿ Ù€¿ ÙÍ¿ ı¿ ı)¿ ıK¿ ıÉ¿ ı’¿ ıÈ¿ ıÔ¿ ıÛ¿ ıÙ¿ ˆ3¿ ˆM¿ ˆg¿ ˆÄ¿ ˆõ¿ ˆÓ¿ ˜¿ ˜¿ ˜1¿ ˜7¿ ˜;¿ ˜<¿ ˜Ñ¿ ˜ä¿ ˜€¿ ˜Ô¿ ˜ı¿ ¯E¿ ¯ï¿ ¯Â¿ ˘3¿ ˘b¿ ˘h¿ ˘Ø¿ ˘Î¿ ˘Ò¿ ˙-¿ ˙|¿ ˙ç¿ ˙Æ¿ ˙Ø¿ ˙Ù¿ ˙˙¿ ˚K¿ ˚_¿ ˚e¿ ˚µ¿ ¸¿ ¸S¿ ¸ì¿ ¸ô¿ ¸ﬁ¿ ¸‰¿ ˝.¿ ˝K¿ ˝L¿ ˝ë¿ ˝ó¿ ˝·¿ ˛+¿ ˛s¿ ˛Ω¿ ˇ¿ ˇ¿ ˇ ¿ ˇm¿ ˇµ¿ ˇª¿ ˇÀ¿ ˇ—¿ ¿ 4¿ 5¿ Å¿ á¿ œ¿¿n¿†¿∂¿∑¿‹¿‚¿1¿¿≈¿·¿Á¿4¿É¿§¿„¿‰¿Ò¿Ú¿A¿w¿õ¿¬¿›¿¿¿¿:¿L¿P¿Q¿ú¿¢¿Û¿#¿)¿9¿?¿]¿à¿·¿‚¿>¿é¿Á¿Ë¿È¿˜¿¯¿B¿d¿e¿¥¿	¿	¿	I¿	J¿	Ö¿	À¿	€¿

¿
T¿
ó¿
∆¿¿B¿P¿a¿ö¿„¿¿E¿U¿¥¿8¿¬¿–¿‹¿Ê¿¿I¿¿¿<¿l¿ã¿ô¿£¿´¿¿¿X¿Y¿~¿Ø¿‘¿‹¿(¿;¿E¿U¿ñ¿Õ¿ˆ¿¿-¿7¿8¿p¿ç¿√¿ﬂ¿Á¿Ì¿"¿é¿©¿Ø¿À¿Ë¿¿9¿_¿§¿‹¿˙¿¿"¿,¿4¿:¿o¿ë¿µ¿¿J¿ê¿ÿ¿¿:¿D¿e¿Ä¿ö¿¢¿®¿”¿ˆ¿-¿L¿Ä¿µ¿—¿‚¿Ï¿Ù¿˙¿¿,¿@¿F¿J¿K¿Ü¿¿¿÷¿◊¿¿C¿D¿v¿|¿Õ¿¿.¿c¿Ä¿∂¿’¿Á¿Ò¿˘¿ˇ¿¿¿2¿8¿á¿–¿˛¿7¿T¿ä¿Œ¿Ê¿¿¯¿˛¿¿¿¿0¿1¿=¿|¿}¿â¿»¿…¿’¿¿¿¿¿'¿M¿f¿ë¿‚¿ &¿ D¿ J¿ g¿ é¿ †¿ ∂¿  ¿ –¿ Ì¿!#¿!@¿!H¿!N¿!R¿!S¿!_¿!q¿!ú¿!œ¿!Ì¿"¿"&¿"A¿"^¿"î¿"·¿#¿#5¿#O¿#Y¿#a¿#g¿#´¿#Ï¿$¿$ ¿$$¿$%¿$;¿$<¿$S¿$i¿${¿$â¿$è¿$¢¿$∂¿$Î¿%¿%¿%¿%¿%l¿%¢¿%÷¿& ¿&*¿&`¿&®¿&¿'¿'9¿'k¿'í¿'≈¿'˙¿(1¿(h¿(õ¿(Ã¿(ˇ¿)4¿)q¿)»¿)Ã¿)Õ¿)Ë¿)È¿*;¿*ß¿*®¿*›¿*ﬁ¿+¿+¿+h¿+â¿+§¿+•¿+”¿,¿,¿,C¿,D¿,É¿,√¿,ƒ¿,Ó¿,Ù¿--¿-3¿-m¿-ú¿-ù¿-‰¿-Í¿.#¿.)¿.b¿.û¿.„¿.‰¿/#¿/)¿/b¿/h¿/¢¿/—¿/“¿0¿04¿0:¿0s¿0y¿0≤¿0Ó¿13¿14¿1Ö¿1ü¿1•¿1Û¿2¿2¿2P¿2V¿2ô¿2⁄¿2€¿3*¿3x¿3~¿3Ã¿3Í¿3¿4)¿4/¿4q¿4ø¿5¿5¿5h¿5Ç¿5à¿5÷¿5Ù¿5˙¿63¿69¿6|¿6Ω¿6æ¿7¿7[¿7a¿7Ø¿7Õ¿7”¿8¿8¿8T¿8¢¿8˘¿8˙¿9H¿9N¿9á¿9ç¿9∆¿9Û¿9Ù¿:A¿:e¿:k¿:§¿:™¿:‚¿;¿;_¿;`¿;ï¿;õ¿;‘¿;ˆ¿<!¿<"¿<s¿<ñ¿<ú¿<‰¿=4¿=]¿=c¿=s¿=y¿=¬¿>¿>O¿>u¿>§¿>•¿>Û¿>˘¿?C¿?ê¿?ﬂ¿@(¿@x¿@¡¿@«¿@›¿A)¿AQ¿AW¿Aß¿AÏ¿B¿B¿Bh¿BÈ¿BÔ¿C?¿Cå¿CŸ¿C˝¿D¿D%¿DB¿D\¿DÄ¿D´¿DÃ¿DË¿E¿E1¿EP¿Et¿EÉ¿Eê¿Eõ¿E£¿E≠¿Eø¿E≈¿E’¿E€¿F%¿Fu¿Fõ¿F ¿FÀ¿G¿G%¿Gd¿Gé¿Gè¿Gﬂ¿G˜¿H-¿Hl¿Hm¿Hº¿HŒ¿H‘¿I"¿Ip¿Ió¿Iƒ¿I‚¿I„¿J4¿J`¿Jñ¿J∑¿J∏¿K¿K%¿KN¿Kd¿Ke¿K±¿K∑¿L¿L¿LB¿L\¿L]¿L£¿LÀ¿L‡¿L·¿M1¿MC¿MI¿Mô¿MÂ¿N+¿N1¿NA¿NG¿Në¿N¬¿N›¿Nﬁ¿O-¿O?¿OE¿OÄ¿OÜ¿Oñ¿Oú¿OÔ¿P"¿P>¿P?¿Pé¿P†¿P¶¿P·¿PÁ¿P˜¿P˝¿QO¿QÇ¿Qû¿Qü¿QÈ¿R¿R¿RZ¿R§¿Rπ¿Rø¿Rœ¿R’¿S¿SO¿S}¿Sï¿Sñ¿S‚¿SÙ¿S˙¿TG¿T[¿Ta¿T±¿TÛ¿U!¿U9¿U:¿Uâ¿Uõ¿U°¿UÓ¿V¿V¿VW¿V¿Vµ¿V—¿V“¿W$¿W%¿Wu¿Wv¿W≈¿X¿X:¿X@¿Xç¿Xª¿X¡¿Y¿Y`¿Yt¿Y°¿Y◊¿Yﬁ¿Y¸¿Z9¿ZM¿ZS¿ZT¿Z`¿Z”¿[¿[#¿[$¿[S¿[Ç¿[√¿\¿\1¿\P¿\{¿\û¿\¡¿\›¿]¿]'¿]x¿]„¿^¿^;¿^b¿^ê¿^¿¿^¿_?¿_p¿_ó¿_¡¿_Ô¿`¿`S¿`°¿`¢¿`Æ¿a¿aå¿aì¿aü¿a˛¿b}¿bÑ¿bà¿bâ¿bä¿b¬¿b»¿c¿ce¿cò¿cΩ¿c’¿c˜¿d0¿di¿d¥¿dˇ¿e6¿eU¿eà¿eﬂ¿f¿fA¿ff¿fî¿fƒ¿fÙ¿g¿gJ¿g}¿g¶¿g…¿h ¿hO¿h†¿h¶¿h«¿hı¿iJ¿iu¿iú¿iß¿i˙¿j¿j6¿jã¿jº¿jÈ¿jÙ¿kG¿kO¿kU¿kV¿kÅ¿k∞¿kŸ¿k˜¿l¿lN¿l}¿l≤¿l›¿m¿mA¿mt¿m•¿m÷¿n¿nV¿nâ¿nì¿nÏ¿o1¿o;¿oî¿oŸ¿o„¿p ¿p#¿p-¿pN¿py¿p£¿p≠¿q ¿qU¿q_¿qâ¿q¿¿r¿rM¿rx¿rá¿rﬁ¿rÍ¿s'¿sÄ¿s∫¿sÎ¿s˙¿tQ¿t]¿tg¿tö¿tÀ¿t˜¿u/¿ub¿um¿uü¿uœ¿u˚¿v2¿ve¿vp¿vq¿vΩ¿væ¿v”¿v›¿v„¿v‰¿v˛¿w¿w*¿wR¿wz¿w¥¿wÓ¿x¿x,¿xP¿xb¿x~¿xö¿x∂¿xŒ¿xÚ¿y¿y<¿yb¿yä¿y≤¿yÿ¿y˛¿z,¿zw¿z~¿zÇ¿zÉ¿z≥¿z⁄¿zﬁ¿zﬂ¿{¿{d¿{Ø¿{∞¿|¿|&¿|Y¿|á¿|≥¿|Ó¿}!¿}R¿}_¿}è¿}›¿~¿~E¿~Å¿~â¿~⁄¿~Í¿ ¿U¿ú¿§¿™¿”¿Ä¿Äd¿Ä¨¿Äı¿ÅD¿ÅL¿ÅR¿Åj¿Åx¿Åë¿ÅÆ¿Å≈¿ÅÔ¿Ç'¿ÇQ¿Çâ¿Ç≈¿É¿ÉK¿Éï¿ÉΩ¿ÉÛ¿Ñ¿Ñ9¿Ñî¿ÑÛ¿Ö$¿ÖU¿Öé¿Ö¿¿ÖÎ¿Ü$¿Ü_¿Üö¿Ü€¿Ü¸¿á¿áW¿áç¿áÂ¿áÏ¿à ¿à¿à¿àU¿àâ¿àƒ¿àÍ¿â+¿âb¿âÑ¿âä¿âã¿âº¿âÊ¿äB¿äO¿äë¿äª¿ä¡¿ä¬¿ã¿ã`¿ã≠¿ãÙ¿åB¿åâ¿å¨¿ç¿çG¿ç~¿çü¿çÿ¿çÍ¿é.¿éj¿é¨¿éÚ¿èB¿èb¿èÖ¿è°¿è´¿è◊¿èÚ¿è˙¿è˚¿ê#¿ê8¿êR¿ên¿êx¿ê~¿ê¿êÀ¿êÁ¿ë¿ë¿ë$¿ëL¿ëM¿ëi¿ë≥¿ëƒ¿ë»¿ë…¿í¿í¿í]¿íÆ¿í◊¿íÏ¿í˙¿ì ¿ì@¿ìD¿ìE¿ìQ¿ì†¿ì°¿ì≠¿ìÚ¿î¿î8¿îJ¿îû¿ï
¿ï*¿ï0¿ïª¿ñ&¿ñ∞¿ó¿ó*¿óà¿óï¿ó¿ò¿ò&¿òl¿òπ¿ô<¿ôt¿ô|¿ôÊ¿ôÏ¿öa¿ö‡¿õ.¿õr¿õÉ¿õ‘¿ú;¿ú˝¿ùJ¿ù§¿û¿ûU¿ûû¿û˘¿üT¿üõ¿üÊ¿†L¿†Ø¿†€¿°J¿°P¿°ß¿°˛¿¢]¿¢∂¿£¿£c¿£Ω¿§¿§h¿§∑¿§ª¿§º¿•¿•
¿•Z¿•ä¿•ñ¿•Æ¿•Õ¿•Î¿¶!¿¶r¿¶y¿¶ô¿ß2¿ß6¿ß7¿ßC¿ßi¿ß{¿ß∫¿®¿®¿®;¿®M¿®`¿®t¿®í¿®ô¿®ù¿®û¿®™¿©+¿©[¿©ø¿©–¿©‘¿©’¿™$¿™y¿™ô¿™∂¿™‹¿™‚¿™„¿™˝¿´0¿´K¿´~¿´™¿´∞¿´¥¿´∂¿´∑¿¨¿¨?¿¨C¿¨ì¿¨‡¿≠9¿≠â¿≠‘¿Æ¿Æ¿Æ3¿ÆM¿Æe¿Æã¿Æ™¿Æ ¿ÆÁ¿ÆË¿Ø1¿ØW¿Ø]¿Ø}¿ØÉ¿Ø◊¿∞)¿∞y¿∞ç¿∞©¿∞™¿∞Ù¿±¿±-¿±.¿±U¿±q¿±r¿±~¿±†¿±À¿±œ¿±—¿±“¿≤!¿≤W¿≤[¿≤§¿≤Ë¿≥ ¿≥¿≥@¿≥d¿≥e¿≥Ø¿≥—¿≥◊¿¥#¿¥H¿¥d¿¥e¿¥ä¿¥ã¿¥Ω¿¥Ù¿¥ı¿µ¿µ.¿µc¿µg¿µh¿µ∏¿µæ¿∂¿∂<¿∂p¿∂ü¿∂Œ¿∑¿∑R¿∑l¿∑â¿∑—¿∑Ê¿∑¿∏
¿∏(¿∏t¿∏â¿∏ì¿∏ô¿∏´¿∏¨¿∏ˆ¿π¿π)¿πR¿πr¿πÜ¿π≠¿π—¿π˘¿∫¿∫(¿∫7¿∫K¿∫S¿∫k¿∫ë¿∫ß¿∫Ø¿∫µ¿∫“¿∫”¿ª¿ª>¿ªD¿ªE¿ªa¿ª®¿ªπ¿ªΩ¿ªæ¿º
¿º¿º_¿ºÄ¿ºÜ¿º‘¿Ω!¿Ωq¿Ωò¿Ωû¿ΩÈ¿æ9¿æá¿æ÷¿ø¿ø-¿øJ¿øp¿øÑ¿øä¿øŒ¿ø¸¿¿*¿¿I¿¿ò¿¿Ã¿¡¿¡b¿¡á¿¡õ¿¡•¿¡¶¿¬¿¬;¿¬o¿¬ß¿¬Ú¿√7¿√Ç¿√Õ¿√ˇ¿ƒ'¿ƒ1¿ƒ9¿ƒ?¿ƒ@¿ƒi¿ƒí¿ƒ˜¿≈C¿≈è¿≈“¿≈Ò¿∆¿∆¿∆I¿∆Q¿∆R¿∆l¿∆ë¿∆°¿∆©¿∆√¿∆Ê¿«¿«
¿«#¿«)¿«*¿«t¿«“¿«÷¿«ÿ¿«Ÿ¿»¿»_¿»¿»ë¿»ï¿»–¿»ˆ¿…¿…¿…¿…n¿…|¿…Ä¿…Œ¿ ¿ Y¿ ]¿ è¿ ƒ¿ »¿À¿Àá¿À¥¿À‰¿Ã¿ÃQ¿ÃÖ¿Ãù¿Ã∏¿Ã˛¿Õ¿Õ¿Õ1¿ÕM¿Õó¿Õ™¿Õ≤¿Õ∂¿Õ∆¿Õ«¿Œ¿Œ1¿ŒB¿Œi¿Œá¿Œô¿Œæ¿Œ‡¿œ¿œ¿œ1¿œ>¿œP¿œV¿œl¿œé¿œ¢¿œ®¿œ¨¿œ≈¿œ∆¿œﬁ¿–,¿–;¿–=¿–>¿–Ö¿–∫¿–æ¿—¿—¿—[¿—£¿—Ë¿—ˇ¿“¿“)¿“E¿“J¿“f¿“Ü¿“á¿“¿¿“‹¿“›¿”¿”"¿”a¿”s¿”ñ¿”ó¿”‰¿”Ò¿‘¿‘¿‘¿‘@¿‘t¿‘ú¿‘¢¿‘—¿‘’¿‘◊¿‘ÿ¿’"¿’=¿’A¿’ç¿’‘¿’„¿÷¿÷e¿÷x¿÷ù¿÷£¿÷§¿÷ˆ¿◊E¿◊]¿◊c¿◊≥¿ÿ¿ÿ+¿ÿ^¿ÿö¿ÿ€¿Ÿ¿Ÿ¿ŸN¿ŸT¿Ÿà¿ŸΩ¿Ÿæ¿Ÿ ¿Ÿ›¿Ÿˆ¿⁄
¿⁄&¿⁄;¿⁄?¿⁄@¿⁄v¿⁄ï¿⁄¥¿⁄¬¿⁄»¿⁄ˇ¿€?¿€d¿€Í¿‹¿‹#¿‹x¿‹§¿‹ﬁ¿‹˚¿›`¿›à¿›◊¿ﬁ5¿ﬁ~¿ﬁ–¿ﬂ ¿ﬂ,¿ﬂ6¿ﬂ>¿ﬂD¿ﬂî¿ﬂ¸¿‡1¿‡é¿‡–¿·¿·[¿·ú¿·¿¿‚¿‚D¿‚ä¿‚Œ¿‚„¿„¿„K¿„S¿„Y¿„r¿„≠¿‰¿‰Ñ¿‰ä¿‰≤¿‰…¿‰Õ¿‰Œ¿Â*¿ÂR¿ÂØ¿ÂÂ¿Ê¿Ê,¿Ê^¿Êh¿Êé¿Êò¿Êû¿Êﬁ¿ÊÒ¿Ê˜¿Á¿Á ¿Á!¿Áo¿Áu¿Áƒ¿ÁÊ¿ÁÏ¿Ë9¿ËU¿Ëû¿Ë∫¿È¿È.¿ÈC¿ÈQ¿ÈW¿ÈX¿Èç¿È‰¿Í¿Í¿Í¿Í¿Íí¿Í¥¿ÍÊ¿Î¿Î4¿Î<¿Î|¿ÎÇ¿Î´¿Îæ¿Îƒ¿ÎÙ¿Ï¿ÏF¿Ïu¿Ïè¿Ïß¿Ï±¿Ï∆¿Ï–¿Ï˜¿Ï˝¿Ì¿Ì]¿ÌÕ¿ÌÏ¿Ó¿Ó¿Ó¿Ó¿Ó@¿ÓD¿ÓE¿Óó¿Óù¿ÓÏ¿Ô¿Ô¿Ôa¿Ô}¿Ô—¿ÔÌ¿ ¿8¿F¿L¿∑¿“¿Á¿Ì¿Ò¿Ú¿˛¿Ò-¿Ò/¿Ò0¿Òr¿ÒÜ¿Òä¿Ò‘¿ÒË¿Ú¿Ú¿Ú(¿Ú)¿Úw¿Úí¿Úò¿ÚÁ¿Û6¿ÛÇ¿Ûõ¿Û°¿ÛÔ¿Ù9¿Ùf¿Ùl¿Ùπ¿ÙÔ¿ı¿ı:¿ıq¿ıí¿ıñ¿ıó¿ıË¿ˆ7¿ˆj¿ˆp¿ˆΩ¿˜¿˜?¿˜ç¿˜€¿¯¿¯¿¯_¿¯Æ¿¯—¿¯“¿˘!¿˘o¿˘¿˘Ö¿˘‘¿˙ ¿˙o¿˙ö¿˙†¿˙¿˚>¿˚Ö¿˚ã¿˚€¿¸¿¸R¿¸S¿¸m¿¸ß¿¸«¿¸»¿¸Û¿¸˘¿˝G¿˝x¿˝™¿˝Ã¿˝Õ¿˛¿˛O¿˛U¿˛e¿˛k¿˛í¿˛ˇ¿ˇ ¿ˇ¿ˇ¿ˇI¿ˇO¿ˇó¿ˇß¿ˇÛ¿ ¿ 0¿ T¿ r¿ v¿ w¿ ≈¿ ⁄¿ ‡¿(¿8¿Ü¿£¿À¿Á¿¯¿ ¿¿¿2¿8¿à¿ÿ¿Ê¿Ï¿8¿¿Ö¿–¿¿o¿Ω¿¿^¿©¿˜¿?¿ê¿–¿ı¿¿0¿i¿}¿Å¿Ç¿µ¿ª¿¿F¿L¿ò¿Á¿˘¿	*¿	H¿	q¿	∞¿	 ¿	Œ¿	œ¿
¿
	¿
X¿
¶¿
≈¿
À¿¿g¿≤¿¿¿G¿f¿ê¿–¿Î¿Ô¿¿!¿'¿f¿l¿π¿¿&¿S¿o¿ñ¿”¿Î¿Ô¿¿%¿+¿z¿»¿Á¿Ì¿>¿ä¿◊¿'¿:¿o¿è¿∫¿˚¿¿¿¿N¿T¿£¿Ò¿¿¿b¿Æ¿˘¿H¿[¿ä¿ß¿œ¿¿&¿*¿+¿_¿e¿¥¿¿¿%¿u¿¡¿¿^¿q¿§¿√¿Ì¿-¿H¿L¿M¿¿Ö¿“¿¿¿e¿•¿Ω¿√¿¿_¿w¿¶¿√¿Î¿)¿B¿F¿G¿y¿¿Ã¿¿¿_¿ü¿∑¿Ω¿¿[¿u¿§¿¡¿È¿'¿@¿D¿E¿s¿y¿¡¿«¿¿?¿f¿¿£¿›¿Ú¿ˆ¿˜¿ $¿ *¿ s¿ Ñ¿ ä¿ Ÿ¿!¿!'¿!?¿!b¿!õ¿!Ø¿!≥¿!¥¿!„¿!È¿"0¿"6¿"Ö¿"Æ¿"◊¿"Ò¿#¿#Q¿#g¿#k¿#l¿#¢¿#®¿#ˆ¿$F¿$j¿$p¿$π¿%¿%#¿%Z¿%{¿%ß¿%È¿&¿&
¿&¿&Q¿&W¿&°¿&Ã¿&“¿' ¿'F¿'¢¿'ÿ¿(¿(4¿(Ç¿(¥¿(”¿(€¿)¿)¿)¿)T¿)Z¿)§¿)–¿)÷¿*&¿*L¿*™¿*·¿+#¿+>¿+ç¿+ø¿+ﬁ¿+Ê¿,¿,¿,¿,Z¿,`¿,™¿,—¿,◊¿-'¿-M¿-ü¿-–¿.¿.'¿.p¿.¢¿.¡¿.…¿.ˆ¿.˙¿.˚¿/=¿/C¿/ç¿/¥¿/∫¿0
¿00¿0Ñ¿0∂¿0Û¿1¿1X¿1ä¿1©¿1±¿1ﬂ¿1„¿1‰¿2¿2 ¿2q¿2ª¿2¡¿3¿3N¿3å¿3¥¿3Á¿4¿4@¿4k¿4 ¿5'¿5C¿5k¿5ó¿5°¿5©¿5∆¿5 ¿5À¿5¸¿6¿6S¿6y¿6¿6Œ¿6Î¿7¿78¿7a¿7|¿7µ¿7„¿8¿8"¿8*¿8B¿8F¿8G¿8ä¿8ê¿8ﬁ¿9¿9d¿9Æ¿9ÿ¿9ﬁ¿:/¿:Ä¿:Œ¿:‘¿:‰¿:Í¿;:¿;c¿;µ¿<¿<4¿<m¿<º¿<Ê¿<Í¿<Î¿=.¿=4¿=|¿=º¿>¿>R¿>|¿>Ç¿>”¿?$¿?r¿?x¿?à¿?é¿?€¿?˘¿@K¿@ú¿@ ¿A¿AR¿A|¿AÄ¿AÅ¿AŒ¿A‡¿B8¿B9¿Bà¿Bö¿B†¿BÓ¿C<¿Cc¿Ci¿C∏¿D¿DI¿Dq¿Dû¿Dº¿DÂ¿E ¿E¿E4¿E8¿E9¿EÖ¿Eã¿E”¿F"¿Fr¿F§¿F–¿FÁ¿G	¿G%¿GC¿GG¿GH¿Gî¿Gö¿GÁ¿GÛ¿H%¿H?¿Hd¿Hâ¿Hó¿Hù¿Hº¿H⁄¿Hﬁ¿Hﬂ¿I)¿I:¿Ib¿Iw¿Ió¿I∑¿I≈¿IÀ¿IÂ¿J¿J¿J¿JR¿Jo¿Jù¿Jµ¿Jÿ¿J˚¿K	¿K¿K,¿KJ¿KN¿KO¿Kõ¿K≠¿K≥¿L ¿L¿L¿Lf¿Lü¿LÕ¿LÂ¿M¿M+¿M9¿M?¿M\¿Mz¿M~¿M¿MŒ¿M‡¿MÊ¿N3¿NG¿NM¿Nò¿N∑¿NÌ¿O	¿O0¿OW¿Oe¿Ok¿Oå¿O™¿OÆ¿OØ¿P ¿PF¿PL¿Pë¿P÷¿Q¿Q¿Qf¿Q∂¿QÁ¿R¿R;¿Ri¿Rá¿Rã¿Rå¿RÀ¿R—¿S¿Sg¿S∞¿SÁ¿TI¿T∑¿U¿U$¿U^¿UÉ¿U ¿UŒ¿Uœ¿Uˇ¿VX¿Vr¿VÄ¿VÜ¿V ¿VÊ¿V¯¿V˛¿W¿W¿W=¿WC¿WÖ¿Wã¿Wƒ¿W ¿W⁄¿W‡¿X.¿X]¿Xy¿Xî¿Xƒ¿X‚¿XÊ¿XÁ¿Y6¿YD¿YJ¿Yî¿Y„¿Z/¿Zx¿Zπ¿Zø¿Z¯¿Z˛¿[¿[¿[N¿[ä¿[∆¿\ ¿\(¿\F¿\J¿\K¿\õ¿\°¿\„¿\È¿]"¿](¿]8¿]>¿]å¿]⁄¿^ ¿^n¿^¥¿^„¿^ˇ¿_¿_J¿_h¿_l¿_m¿_º¿_‡¿_Ê¿`0¿`¿`À¿a¿aU¿a[¿aî¿aö¿a™¿a∞¿aÍ¿b:¿bj¿b∫¿bÍ¿c&¿cb¿cú¿cƒ¿c‚¿cÊ¿cÁ¿d!¿dJ¿dP¿dõ¿d°¿d¿e:¿ee¿ek¿e§¿e™¿e∫¿e¿¿f¿fX¿fÜ¿f™¿fÏ¿g
¿g¿g¿gI¿gè¿gï¿g‰¿h.¿hY¿h_¿hò¿hû¿hÆ¿h¥¿h˜¿iE¿iä¿i÷¿j¿j.¿j2¿j3¿jm¿jñ¿jú¿jÁ¿jÌ¿k<¿kÜ¿k±¿k∑¿k¿kˆ¿lM¿lé¿lº¿l‡¿m"¿m@¿mD¿mE¿m¿m≈¿mÀ¿n¿nd¿nè¿nï¿nŒ¿n‘¿n‰¿nÍ¿o-¿o{¿o¿¿p¿pF¿pd¿ph¿pi¿p∑¿pΩ¿p˛¿q¿q=¿qC¿qS¿qY¿q¶¿q”¿qÌ¿r¿r5¿rS¿rW¿rX¿r®¿r…¿rœ¿s¿sg¿s¥¿s˝¿t>¿tD¿t}¿tÉ¿tì¿tô¿t“¿u¿uG¿u¿u•¿u√¿u«¿u»¿u˝¿v¿v<¿v^¿vv¿vñ¿vÆ¿vÃ¿v–¿v—¿w¿w+¿wj¿wî¿w…¿w‚¿w¿wˆ¿x¿x0¿x4¿x5¿x~¿x§¿x ¿xÂ¿y¿y0¿yO¿y]¿yc¿y{¿yô¿yù¿yû¿yÔ¿z¿z¿z[¿z™¿zæ¿z‰¿zˇ¿{¿{J¿{i¿{w¿{}¿{ï¿{≥¿{∑¿{∏¿|¿|¿|$¿|4¿|:¿|â¿|»¿|Ë¿}¿}¿}¿}]¿}c¿}s¿}y¿}∆¿~¿~"¿~Q¿~U¿~V¿~å¿~√¿~ﬂ¿¿¿¿C¿I¿ï¿‚¿Ä¿Ä¿Äi¿Ä∑¿Å¿ÅJ¿Åô¿Å√¿Å…¿ÅŸ¿Åﬂ¿Ç5¿Çt¿Çì¿Çƒ¿Ç»¿Ç…¿É¿É=¿És¿Éî¿É»¿ÉÏ¿Ñ
¿Ñ¿Ñ¿ÑZ¿Ñ`¿Ñ≠¿Ö ¿ÖR¿Öä¿Ö«¿ÖÊ¿Ü¿Ü¿Ü¿ÜX¿Ü^¿ÜØ¿Ü˛¿á3¿á9¿áâ¿á≠¿á≥¿à¿à/¿à5¿àà¿àﬁ¿àÏ¿âY¿âx¿â´¿â⁄¿âﬁ¿âﬂ¿ä0¿ä{¿äè¿äï¿äÊ¿ã-¿ã3¿ã|¿ãõ¿å¿å'¿å_¿åí¿å¡¿å≈¿å∆¿ç¿ç:¿ç@¿çë¿çÿ¿çﬁ¿é'¿éB¿éø¿éÊ¿è¿èI¿èÄ¿èÑ¿èÖ¿è÷¿ê$¿ê*¿ê{¿ê∑¿êΩ¿ë¿ë¿ëá¿ë¶¿ëŸ¿í¿í¿í¿í]¿íì¿íô¿íÊ¿ì.¿ìã¿ì∫¿ì˘¿ì˝¿ì˛¿î@¿î¿îü¿îœ¿î”¿î‘¿ï¿ïX¿ïv¿ï§¿ï®¿ï©¿ïÙ¿ñ-¿ñJ¿ñw¿ñ{¿ñ|¿ñ≈¿ñ˙¿ó¿ó@¿óD¿óE¿óê¿ó…¿óÊ¿ò¿ò¿ò¿òc¿òú¿òπ¿òÊ¿òÍ¿òÎ¿ô3¿ô@¿ôÉ¿ô•¿ô◊¿ô€¿ô‹¿ö¿ö ¿öo¿ö¿¿ö∆¿õ¿õc¿õu¿õ{¿õÀ¿õÍ¿õ¿úA¿úè¿ú‹¿ù¿ùM¿ùj¿ùó¿ùõ¿ùú¿ù’¿û¿û4¿ûd¿ûh¿ûi¿ûü¿û•¿û◊¿ü¿ü3¿üb¿üf¿üg¿üñ¿üú¿üÎ¿†;¿†Å¿†æ¿†›¿°¿°¿°¿°<¿°B¿°ë¿° ¿¢	¿¢)¿¢Y¿¢]¿¢^¿¢Æ¿¢Ÿ¿¢ﬂ¿£/¿£}¿£»¿£˘¿§J¿§s¿§¨¿§∞¿§±¿§˙¿•3¿•i¿•ä¿•∂¿•—¿•Ì¿¶¿¶¿¶¿¶`¿¶r¿¶x¿¶»¿ß¿ßZ¿ß`¿ßp¿ßv¿ß¿¿ßÒ¿®¿®2¿®M¿®j¿®à¿®å¿®ç¿®‹¿®Ó¿®Ù¿©/¿©5¿©E¿©K¿©û¿©—¿©Ì¿™¿™/¿™M¿™k¿™o¿™p¿™ø¿™—¿™◊¿´¿´¿´(¿´.¿´Å¿´¥¿´–¿´˜¿¨¿¨0¿¨N¿¨R¿¨S¿¨]¿¨^¿¨¶¿¨æ¿¨ƒ¿¨‘¿¨⁄¿≠)¿≠9¿≠|¿≠£¿≠§¿≠Û¿Æ¿Æ¿Æ[¿Æ¨¿Æ ¿Æ–¿Ø¿Øm¿Ø∫¿Ø¿¿Ø–¿Ø÷¿∞¿∞3¿∞`¿∞ã¿∞´¿∞Ø¿∞∞¿∞Œ¿∞œ¿∞·¿±¿±$¿±@¿±M¿±j¿±p¿±é¿±í¿±ì¿±÷¿±◊¿±¸¿±˝¿≤F¿≤[¿≤a¿≤∞¿≤ı¿≥.¿≥w¿≥ä¿≥ê¿≥∆¿≥⁄¿≥‡¿¥¿¥¿¥"¿¥f¿¥z¿¥Ä¿¥ƒ¿¥ÿ¿¥ﬁ¿µ*¿µ>¿µD¿µ‹¿µ¿µˆ¿∂¿∂¿∂¿∂X¿∂^¿∂¨¿∂–¿∂÷¿∑%¿∑_¿∑e¿∑Ø¿∏¿∏;¿∏i¿∏ä¿∏ã¿∏Æ¿∏º¿∏¬¿∏√¿∏Ë¿π+¿πW¿πs¿π†¿πœ¿∫ ¿∫1¿∫^¿∫ä¿∫≥¿∫Ê¿ª¿ªD¿ª{¿ª|¿ªß¿ª»¿ª¯¿º&¿ºN¿ºÉ¿º≤¿ºπ¿º˛¿Ω/¿Ω5¿Ωå¿Ωœ¿Ω’¿æ,¿æo¿æu¿æ§¿æ—¿æ˘¿ø-¿ø\¿øc¿ø}¿øû¿ø§¿ø•¿øÒ¿øÚ¿¿8¿¿<¿¿=¿¿p¿¿í¿¿∂¿¿Ë¿¡¿¡z¿¡®¿¡Ù¿¬¿¬8¿¬d¿¬¢¿¬Œ¿√¿√6¿√^¿√z¿√ö¿√∫¿√“¿√˛¿ƒ&¿ƒP¿ƒ|¿ƒ®¿ƒ–¿ƒ˜¿≈¿≈I¿≈s¿≈ù¿≈œ¿≈Ò¿∆2¿∆6¿∆8¿∆9¿∆à¿∆ô¿∆∏¿∆Â¿∆Î¿«8¿«Ü¿«∫¿«Ã¿«Õ¿«¸¿»¿»Q¿»p¿»Ç¿»Ñ¿»Ö¿»∞¿»‚¿…¿…B¿…p¿…u¿…£¿…ƒ¿…»¿ ¿ 9¿ W¿ Œ¿ ›¿ ˚¿Àr¿ÀÅ¿Àá¿Àã¿À∏¿À⁄¿Àﬁ¿Àﬂ¿Ã/¿Ã1¿Ã2¿ÃÉ¿Ã†¿Ã§¿ÃÒ¿ÕA¿Õ{¿Õ¿ÕÀ¿Õ¯¿Õ¸¿ŒM¿Œy¿Œ}¿Œã¿Œè¿Œ”¿œ1¿œÇ¿œ ¿œÒ¿œÚ¿–C¿–V¿–\¿–ú¿–¢¿–¿—¿—5¿—6¿—B¿—l¿—¢¿“!¿“"¿“q¿“í¿“∞¿“œ¿“’¿“÷¿”(¿”7¿”e¿”v¿”´¿”ª¿”¡¿”¬¿”Î¿”Ô¿”¿‘¿‘¿‘o¿‘Ü¿‘å¿‘›¿’-¿’{¿’à¿’ï¿’»¿’…¿’’¿÷¿÷E¿÷ã¿÷è¿÷ë¿÷í¿÷ﬂ¿÷Í¿÷Ó¿◊4¿◊`¿◊d¿◊¥¿ÿ¿ÿD¿ÿ[¿ÿ_¿ÿ´¿ÿÿ¿ÿ‹¿Ÿ(¿Ÿq¿Ÿ≥¿ŸÈ¿⁄¿⁄i¿⁄o¿⁄∞¿⁄»¿⁄⁄¿⁄Í¿€¿€8¿€`¿€a¿€Ø¿€ˇ¿‹¿‹¿‹c¿‹∞¿‹∆¿‹«¿‹”¿‹˚¿›C¿›S¿›Y¿›Ç¿›Ü¿›á¿›ì¿›ÿ¿ﬁ¿ﬁK¿ﬁO¿ﬁQ    SemanticsTagCustomSemanticsActionAttributedStringAttributedStringPropertySemanticsData_SemanticsDiagnosticableNodeSemanticsHintOverridesSemanticsPropertiesdebugResetSemanticsIdCounterSemanticsNode_BoxEdge_SemanticsSortGroup_pointInParentCoordinates_childrenInDefaultOrder_TraversalSortNodeSemanticsOwnerSemanticsConfigurationDebugSemanticsDumpOrder_concatAttributedStringSemanticsSortKeyOrdinalSortKey ‚ÿ