ÄÌ_cellsgetCells
columnNamevaluekeycolorcellscolumnNameschildtext_childColumnIndexestitletitleColumnSpanshowSummaryInRowcolumnspositionnamesummaryType	rowHeightheaderRowHeightsourcedefaultColumnWidthcolumnWidthModecolumnWidthCalculationRangecolumnSizergridLinesVisibilityheaderGridLinesVisibilityonQueryRowHeightselectionModeonSelectionChangedonSelectionChangingselectionManager
controllernavigationModeonCurrentCellActivatedonCurrentCellActivating	onCellTaponCellDoubleTaponCellSecondaryTaponCellLongPressfrozenColumnsCountfooterFrozenColumnsCountfrozenRowsCountfooterFrozenRowsCountallowSortingallowMultiColumnSortingallowTriStateSortingshowSortNumberssortingGestureTypestackedHeaderRowsisScrollbarAlwaysShownhorizontalScrollPhysicsverticalScrollPhysicsloadMoreViewBuilderallowPullToRefreshrefreshIndicatorDisplacementrefreshIndicatorStrokeWidthallowSwipingswipeMaxOffsethorizontalScrollControllerverticalScrollControlleronSwipeStartonSwipeUpdate
onSwipeEndstartSwipeActionsBuilderendSwipeActionsBuilderhighlightRowOnHoverallowColumnsResizingcolumnResizeModeonColumnResizeStartonColumnResizeUpdateonColumnResizeEndallowEditingeditingGestureTypefooterfooterHeightshowCheckboxColumnshrinkWrapColumnsshrinkWrapRowscheckboxColumnSettingstableSummaryRowsrowsPerPagerowsCacheExtentallowFilteringonFilterChangingonFilterChangedcheckboxShapecreateState	_minWidth
_minHeight
_rowHeight_headerRowHeight_rowGenerator
_container_dataGridConfiguration_swipingAnimationController_cellRenderers_textDirection_dataGridThemeData_dataGridThemeHelper_localizations_source_columns_rowSelectionManager_controller_swipingAnimation_dataGridStateDetails_screenSize	initState_onDataGridTextDirectionChanged_onDataGridThemeDataChanged!_onDataGridTextScaleFactorChanged_onDataGridLocalizationsChanged_updateHeaderRowHeight_setUp_gridLoaded_refreshContainerAndView_updateVisualDensity_initializeDataGridDataSource_initializeProperties!_initializeCellRendererCollection_processCellUpdate_refreshCell_updateSummaryColumns_processUpdateDataSource_refreshScrollOffsets_processSorting_processEditing_resetColumn_handleListeners_handleNotifyListeners&_handleDataGridPropertyChangeListeners_updateDataGridStateDetails_onDataGridStateDetailsChanged_updateProperties_handleSelectionPropertyChanged_updateSelectionController#_onStackedHeaderRowsPropertyChanged_ensureSelectionProperties_updateBoxPainter_updateDecoration_addDataGridSourceListeners_removeDataGridSourceListeners_addCheckboxColumnrefreshdidChangeDependenciesdidUpdateWidgetbuilddisposerowsbuildRoweffectiveRows_effectiveRows_unSortedRows_paginatedRows_suspendDataPagerUpdate_filterConditionsfilterConditionsshouldRecalculateColumnWidthssortedColumns_sortedColumnsperformSorting_updateDataPager_compareValuescompare
_compareTo_updateDataSourcesort[]handleLoadMoreRowshandleRefresh	addFilterremoveFilterclearFilters_refreshFilterbuildEditWidgetonCellBeginEditonCellSubmitcanSubmitCellonCellCancelEdithandlePageChangecalculateSummaryValuebuildTableSummaryCellWidgetselectedRows_selectedRowsselectedIndex_selectedIndexisCurrentCellInEditing_isCurrentCellInEditingselectedRow_selectedRowverticalOffset_verticalOffsethorizontalOffset_horizontalOffset
refreshRowcurrentCell_currentCellmoveCurrentCellToscrollToCellscrollToRowscrollToColumnscrollToVerticalOffsetscrollToHorizontalOffset	beginEditendEdit
_pageCount_dataGridSourceListeners_addDataGridSourceListener_removeDataGridSourceListener _dataGridPropertyChangeListeners"_addDataGridPropertyChangeListener%_removeDataGridPropertyChangeListenernotifyListenersnotifyDataSourceListeners&_notifyDataGridPropertyChangeListeners
brightnessheaderColorgridLineColorgridLineStrokeWidthselectionColorcurrentCellStylefrozenPaneLineWidthfrozenPaneLineColorsortIconColorheaderHoverColorfrozenPaneElevationcolumnResizeIndicatorColor columnResizeIndicatorStrokeWidthrowHoverColorrowHoverTextStylesortIcon
filterIconfilterIconColorfilterIconHoverColorsortOrderNumberColorsortOrderNumberBackgroundColor6QueryRowHeightCallbackSelectionChangingCallbackSelectionChangedCallbackCurrentCellActivatingCallbackCurrentCellActivatedCallbackDataGridCellTapCallbackDataGridCellDoubleTapCallbackDataGridCellLongPressCallbackLoadMoreRowsLoadMoreViewBuilderDataGridSwipeStartCallbackDataGridSwipeUpdateCallbackDataGridSwipeEndCallbackDataGridSwipeActionsBuilder
CellSubmitColumnResizeStartCallbackColumnResizeUpdateCallbackColumnResizeEndCallbackDataGridFilterChangingCallbackDataGridFilterChangedCallback_DataGridSourceListener_DataGridPropertyChangeListenerDataGridRowDataGridCellDataGridRowAdapterStackedHeaderRowStackedHeaderCellGridTableSummaryRowGridSummaryColumn
SfDataGridSfDataGridStateDataGridSourcerefreshEffectiveRowsperformSortingupdateDataPagerDataGridControllerDataPagerDelegateDataGridSourceChangeNotifier%notifyDataGridPropertyChangeListenershandleLoadMoreRowshandleRefreshupdateDataSourceeffectiveRowssetPageCountupdateSelectedIndexupdateSelectedRowupdateCurrentCellIndexupdateVerticalOffsetupdateHorizontalOffsetsetChildColumnIndexesgetChildColumnIndexesaddFilterConditionsremoveFilterConditionsDataGridThemeHelperÅ˛onQueryRowHeightdoubleRowHeightDetailsonSelectionChangingboolListonSelectionChangedvoidonCurrentCellActivatingRowColumnIndexonCurrentCellActivated	onCellTaponCellSecondaryTapDataGridCellTapDetailsonCellDoubleTapDataGridCellDoubleTapDetailsonCellLongPressDataGridCellLongPressDetailshandleLoadMoreRowsFutureloadMoreViewBuilderWidgetBuildContextonSwipeStartDataGridSwipeStartDetailsonSwipeUpdateDataGridSwipeUpdateDetails
onSwipeEndDataGridSwipeEndDetailsstartSwipeActionsBuilderintcanSubmitCellonCellSubmitonColumnResizeStartColumnResizeStartDetailsonColumnResizeUpdateColumnResizeUpdateDetailsonColumnResizeEndColumnResizeEndDetailsonFilterChangingDataGridFilterChangeDetailsonFilterChangedStringrowscellsoptionalTypeArgsKeyColor
GridColumn
columnNameTexttableSummaryRowstitleshowSummaryInRowtitleColumnSpanGridTableSummaryRowPositionGridSummaryTypeStatefulWidgetnanGridLinesVisibility
horizontalColumnWidthModenoneColumnWidthCalculationRangevisibleRowsSelectionModeGridNavigationModerowSortingGestureTypetapAlwaysScrollableScrollPhysicsColumnResizeModeonResizeEditingGestureType	doubleTapDataGridCheckboxColumnSettingskeywidthColumnSizerSelectionManagerBaseRowSelectionManagerSfDataGridThemeDatafrozenPaneLineWidthfrozenPaneLineColorallowSortingsortedColumnsSortColumnDetailssortScrollPhysicshandleRefreshendSwipeActionsBuilderScrollControllerrowHoverColorrowHoverTextStyle	TextStylebuildEditWidget	TextFieldallowEditingonCellBeginEditfooterHeightCheckboxselectionModecheckboxColumnSettingsshowCheckboxColumnbuildTableSummaryCellWidgetSfDataPager	pageCountallowFilteringfilterConditionsshapeOutlinedBorderoverrideStateSingleTickerProviderStateMixinRowGeneratorVisualContainerHelperDataGridConfigurationAnimationControllerMapGridCellRendererBaseTextDirectionltrSfLocalizations	AnimationDataGridStateDetailsSize	gridPaintPaintdataGridStateDetailsrowGeneratordurationDurationmillisecondsvsyncsource	initStatetextDirectionneedToSetHorizontalOffsetColorSchemecolorSchemedataGridThemeHelperrefreshViewStyletextScaleFactorheaderRowHeightwidgetisNaN	rowHeightisGridLoadedcolumnWidthModeresetAutoCalculationcolumnSizerisDirtyrefreshColumnSizer
rowHeightsdefaultLineSizesetRowHeightslocalizationsdataGridFilterHelperadvancedFilterHelperinitPropertiesLineSizeCollectioncolumnWidthssuspendUpdatesgetHeaderIndexrowCountiresumeUpdatesupdateScrollBars_dataGridStateDetails
controller"_addDataGridPropertyChangeListenerverticalScrollControllerdisposeVerticalScrollControllerhorizontalScrollController!disposeHorizontalScrollControllersetStateDetailsInColumnSizercurrentCellCurrentCellManagerDataGridFilterHelperrowSelectionManagerselectionManager%setStateDetailsInSelectionManagerBasecolumnResizeControllerColumnResizeController	protectedrefreshDefaultLineSizeisDataSourceChangedupdateSelectionControllerdataGridConfigurationrefreshHeaderLineCountupdateRowAndColumnCountVisualDensityvisualDensityOffsetbaseSizeAdjustmentdycolumns_updateDataSource
listEqualsclearaddAll
isNotEmptyGridCellTextFieldRenderer!setStateDetailsInCellRendererBaseGridHeaderCellRendererGridStackedHeaderCellRendererGridCheckboxRendererGridTableSummaryCellRendererresolveToRowIndexrowIndexresolveToScrollColumnIndexcolumnIndexeffectiveRowsisEmptysetStateDataRowBaseitemsfirstWhereOrNulldataGridRowdataGridRowAdaptergetDataGridRowAdapterDataCellBasevisibleColumnsupdateColumntableSummaryRowcolumngetSummaryTitleColumnSpancontainsnamesummaryColumn_suspendDataPagerUpdate	isEditing
canRefreshnavigationModecellonRowColumnChangedlengthremoveUnWantedDataGridRows_effectiveRowsallowSwiping	containerresetSwipeOffsetfooterrowTypeRowType	footerRowrefreshViewshouldRecalculateColumnWidthsdataGridFocusNodehasPrimaryFocusrequestFocus
hasClientsoffsetverticalOffsetverticalScrollBarvaluecanRefreshHorizontalOffsetpositionmaxScrollExtenthorizontalOffsethorizontalScrollBarrtlresolveToRecordRowColumnIndex
isNegativeeditingWidgetclearEditingdataRowdataCellneedToRefreshColumnrowColumnIndexpropertyNamerowIndexChangedrecalculateRowHeightrowHeightManagersetDirtycellRenderersheaderLineCountgridLinesVisibilityheaderGridLinesVisibilitycolumnWidthCalculationRangefrozenColumnsCountfooterFrozenColumnsCountfrozenRowsCountfooterFrozenRowsCountallowMultiColumnSortingallowTriStateSortingsortingGestureTypeshowSortNumbersisControlKeyPressedisCommandKeyPressedstackedHeaderRowsisScrollbarAlwaysShownhorizontalScrollPhysicsverticalScrollPhysicsrefreshIndicatorDisplacementallowPullToRefreshrefreshIndicatorStrokeWidthswipeMaxOffsetswipingAnimationControllerswipingAnimationhighlightRowOnHoverallowColumnsResizingcolumnResizeModeeditingGestureTypedefaultColumnWidthrowsPerPageshrinkWrapColumnsshrinkWrapRowsrowsCacheExtentcheckboxShaperefreshIndicatorKey	GlobalKeyRefreshIndicatorStatesetHitTestPrecisionremoveremoveWheretableSummaryCoveredRow	isDesktop
isResizingisResizeIndicatorVisibleremoveAt%_removeDataGridPropertyChangeListenerisDataGridControlChangedisSelectionManagerChangedisSourceChangedelement	headerRowhandleSelectionPropertyChangedhandleDataGridSourceChangesisSelectionModeChangedisNavigationModeChangedstackedHeaderRowresetselectedRowsonSelectedRowsChangedselectedRowonSelectedRowChangedselectedIndexonSelectedIndexChangedmultipleconfigurationcreateLocalImageConfigurationcontext
boxPainter
BorderSidecolorcurrentCellStyleborderColorBoxDecorationborderBorderbottomtopleftrightcreateBoxPainter_addDataGridSourceListeneraddListener_removeDataGridSourceListenerremoveListenerinsertGridCheckboxColumnlabelSizedBoxRefreshIndicatorshowRefreshIndicatorcurrentStateshow	ThemeDataThemeofkIsWebplatformTargetPlatformmacOSwindowslinuxisMacPlatformDirectionalitySfDataGridTheme
MediaQuerytextScaleFactorOfsizeisFilterPopupMenuShowing	NavigatorpopdidChangeDependenciesdidUpdateWidgetLayoutBuilderbuilderBoxConstraints
viewHeightconstraints	maxHeight
isInfinite	viewWidthmaxWidthextentWidth$updateColumnSizerLoadedInitiallyFlagScrollViewWidgetheightdisposecheckboxFilterHelpertextControllersearchboxFocusNodefirstValueTextControllersecondValueTextControllerresetColumnPropertiesnotifyDataSourceListenersemptynotifyListenersFilterConditionaddFilterConditionremoveFilterConditionunmodifiablecompareab
_pageCount	skipWhiletoListgrowablelastObjectgetCellssortDirectiondynamicDataGridSortDirection	ascending	compareToapplyFilter&_notifyDataGridPropertyChangeListenerscontainsKeyLogicalKeyboardKeyescapeceilgetRangegetSummaryValue
replaceAllsummaryTypeperformSorting_updateDataPagerbuildresolveToGridVisibleColumnIndexprocessSelectionAndCurrentCellisProgrammaticDataGridScrollPositionstartScrollAxisBase
scrollRowsscrollColumns	lineCounttoIntgetVerticalOffsetgetHorizontalOffsetresolveScrollOffsetToPositionrowPositionheaderExtentfooterExtentcolumnPositionscrollVertical
canAnimatescrollHorizontaleditingRowColumnIndexChangeNotifierObserverListaddFunctionlistener_paginatedRowsWidgetsBindinginstanceaddPostFrameCallback_selectedIndex_selectedRow_currentCell_verticalOffset_horizontalOffset_childColumnIndexes_filterConditions
brightnessheaderColorColorstransparentwithOpacitygridLineColor	onSurfacegridLineStrokeWidthfrozenPaneElevationselectionColorheaderHoverColorsortIconColorcolumnResizeIndicatorColorprimary columnResizeIndicatorStrokeWidthDataGridCurrentCellStyleborderWidth
fontFamily
fontWeight
FontWeightw400fontSizesortIcon
filterIconfilterIconColorfilterIconHoverColorsortOrderNumberColorsortOrderNumberBackgroundColor
BrightnessBuilderStatefulWidgetStateSingleTickerProviderStateMixinDataGridSourceChangeNotifierDataPagerDelegateChangeNotifieru!4«›¶èéˇÚå∆ˇø      "package:collection/collection.dart  /  package:flutter/foundation.dart  Z  package:flutter/material.dart  ÄÉ  2package:syncfusion_flutter_core/localizations.dart  Ä¡  *package:syncfusion_flutter_core/theme.dart  Ä˘  ../../datagrid.dart  Å  "../grid_common/line_size_host.dart  ÅF  ../grid_common/scroll_axis.dart  Åq  "helper/datagrid_configuration.dart  Åü  Å√grid_helperÅ∆helper/datagrid_helper.dart  Å’  runtime/cell_renderers.dart  Å¸  runtime/column.dart  Ç  runtime/generator.dart  Ç=   selection/selection_manager.dart  Çi  Çíselection_managerÇï selection/selection_manager.dart  Ç™  widgets/scrollview_widget.dart    	dart:core¿âj ¿©™ë√ .YÄÇÄ¿ÄˆÄ¯ÅÅEÅpÅûÅ‘Å˚ÇÇ<ÇhÇ©Ç”Ç’ÉÉ\É^ÉúÉ–ÑÑÑQÑÑÑ∆Ñ»Ö
ÖBÖåÖéÖœÜÜPÜRÜ†Ü∞ááá>ává¢á§áﬁààBàDàààπàªà˝â.âeâgâ¢â◊ä
ääHä~ä≥äµäÓã!ãPãRã£ã‹åå!åZåÜå≠åØåÒç%çMçOçíç«ççÚé2éÑéÜé≈é˛è)è+èiè°èÃèŒêê@êhêjê™ê‰ë
ë%ëGëIëÇëáëŸëﬁí$íSíhíõíÁíÈìììUìjìéìêì’ìÎîî"î'î*î,îXî]î¨î‚îıïïBïäïåï®ïƒï∆ï‚ïÈñ8ñLñ_ñbñdñ¢ñßñ˜óó"ó\ó¶ó®óƒó◊óŸó˜òòò=òDòãò†òΩò¿ò¬ôôbôÇôáôñôõôÌô˛ööWöÉöÖö…öÎöÓöõ2õ7õFõKõöõµõÙú
úPútúyú{ú«úÛú˙ùJùôùÎû7ûGûjûlû•û¨ûœûÊûËü7üLüSü°ü∂üΩ††[†r†t†õ†û†††Ÿ†ﬁ°,°_°d°r°w° °‚¢3¢E¢b¢†¢∏¢Ã¢ﬂ¢˝££=£c£ä£å£’£Ó§§§-§D§F§~§¢§©§ˆ•••`•±•Ÿ•˜•˘¶H¶l¶s¶å¶¨¶Æ¶‹ßßß@ßoßrßtß•ß™ßπßæ®®,®q®ç®©® ®Ó®©!©7©9©b©i©z©Å©∫©÷©ÿ™ ™F™I™K™l™q™µ™∫´´W´{´Ä´œ¨¨¨j¨o¨¿¨˙≠5≠:≠H≠≠À≠–≠·≠˙ÆÆ/Æ8Æ=ÆNÆzÆñÆæÆØØPØíØ‚∞(∞4∞=∞B∞^∞®∞Ô±5±}±≈≤≤V≤ú≤„≥+≥4≥;≥@≥V≥ö≥Ø≥…≥Í¥¥
¥¥F¥W¥á¥∆µµ_µÜµ”∂$∂7∂M∂R∂c∂ö∂æ∂˙∑1∑L∑U∑\∑a∑j∑ï∑ƒ∑À∏∏2∏M∏i∏x∏ö∏¬∏Ìπ-πsπ•πº∫∫;∫n∫ê∫∏∫◊∫¸ªªGªoªíª…ººº5ºQºoºéº±º”ºËΩΩ!Ω<ΩfΩ±Ω˙ææ?ænæõæªæ›øø'ø?øXønøíø¥ø⁄¿ @¿ @:¿ @Y¿ @y¿ @ñ¿ @∂¿ @Û¿ A¿ A$¿ AJ¿ Aï¿ A—¿ AË¿ B¿ B/¿ BJ¿ Bl¿ Bà¿ B£¿ Bº¿ BÊ¿ C¿ C=¿ Cj¿ CÑ¿ CÜ¿ Cæ¿ C≈¿ C›¿ C¯¿ C˙¿ D&¿ D-¿ DE¿ Df¿ Dh¿ Dì¿ Dö¿ D¥¿ D◊¿ DŸ¿ E/¿ EC¿ EJ¿ Eö¿ E°¿ Eπ¿ EŸ¿ E€¿ E¸¿ F¿ FO¿ Fû¿ F•¿ F‚¿ G¿ G¿ G5¿ G<¿ Gf¿ Gm¿ Gë¿ Gª¿ GΩ¿ H¿ H¿ H!¿ Hq¿ Hì¿ Hö¿ H◊¿ Hﬁ¿ I¿ IP¿ IR¿ I†¿ Iµ¿ Iº¿ J¿ J4¿ JW¿ JY¿ JÇ¿ Jâ¿ J÷¿ JÓ¿ Jı¿ K)¿ K0¿ KX¿ Kä¿ Kå¿ K≈¿ KÃ¿ L¿ L4¿ L;¿ LÉ¿ L∫¿ L¡¿ Lı¿ L¸¿ M%¿ M,¿ M|¿ Më¿ M…¿ MÀ¿ N¿ N:¿ N<¿ Nd¿ Nk¿ N™¿ N±¿ N⁄¿ N·¿ O¿ O)¿ O+¿ OT¿ O[¿ O´¿ Oº¿ OÛ¿ Oı¿ P7¿ P>¿ Pä¿ P ¿ PÈ¿ Q"¿ Q$¿ Qo¿ Qá¿ Qé¿ Q◊¿ R¿ R¿ R-¿ R^¿ R`¿ R∞¿ RÃ¿ R”¿ RÏ¿ RÛ¿ SC¿ Sl¿ Sn¿ Sº¿ S–¿ S¸¿ S˛¿ T)¿ T0¿ T{¿ Tï¿ T‘¿ T÷¿ U¿ U¿ U[¿ Uû¿ U≤¿ UÛ¿ Uı¿ V(¿ VU¿ VW¿ Vß¿ V…¿ W¿ W¿ WO¿ WÖ¿ Wá¿ WŒ¿ WÏ¿ X%¿ X'¿ Xt¿ X{¿ X¬¿ Y¿ Y	¿ Y¿ Y%¿ Y6¿ Y=¿ Ya¿ Y¥¿ Y’¿ Z(¿ ZH¿ Zi¿ Zk¿ Zπ¿ Z¿¿ [¿ [F¿ [M¿ [b¿ [i¿ [z¿ [Å¿ [‘¿ [ı¿ \H¿ \i¿ \ê¿ \í¿ \÷¿ \›¿ \Ú¿ \˘¿ ]
¿ ]¿ ]2¿ ]Ö¿ ]¶¿ ]˘¿ ^¿ ^8¿ ^:¿ ^Å¿ ^à¿ ^ù¿ ^§¿ ^µ¿ ^º¿ _¿ _0¿ _É¿ _§¿ _»¿ _ ¿ `¿ `&¿ `-¿ `G¿ `N¿ `]¿ `n¿ `ö¿ `∂¿ `ﬁ¿ `˝¿ a¿ aS¿ aó¿ aÈ¿ b1¿ b>¿ bG¿ bN¿ bá¿ bö¿ bÃ¿ c¿ cX¿ c™¿ c”¿ d"¿ du¿ dä¿ d¢¿ d©¿ dº¿ dı¿ e¿ eY¿ eé¿ eß¿ e≤¿ eª¿ e¬¿ eÕ¿ e‘¿ e€¿ eÏ¿ eÛ¿ fB¿ fW¿ fß¿ f∫¿ fˇ¿ gG¿ gë¿ g‡¿ g¸¿ g˛¿ h9¿ h@¿ hZ¿ ha¿ h¶¿ h≠¿ hæ¿ h≈¿ i
¿ iR¿ iú¿ iÎ¿ j¿ j¿ j`¿ j}¿ jÑ¿ jû¿ j•¿ jÍ¿ jÒ¿ k¿ k	¿ kN¿ kñ¿ k‡¿ l/¿ lS¿ lU¿ lß¿ l›¿ l‰¿ l˝¿ m¿ m=¿ mo¿ mv¿ má¿ mé¿ m”¿ n¿ ne¿ n¥¿ n”¿ n’¿ o#¿ o9¿ o@¿ ok¿ or¿ oÉ¿ oä¿ o†¿ o–¿ o“¿ oˇ¿ p¿ pU¿ p£¿ p≥¿ p∫¿ p…¿ p⁄¿ q¿ qU¿ që¿ q—¿ r¿ rb¿ rÉ¿ r®¿ r»¿ s¿ s+¿ sZ¿ sl¿ s|¿ sä¿ só¿ s†¿ s´¿ sﬁ¿ s‡¿ t.¿ t¿ t–¿ tÛ¿ t˙¿ u¿ u9¿ u;¿ u¿ v¿ v¿ v<¿ vl¿ vn¿ v∞¿ w0¿ w7¿ wk¿ wô¿ wõ¿ wÍ¿ x*¿ x1¿ x¿ xƒ¿ y¿ ye¿ y}¿ yÑ¿ y°¿ y®¿ y˘¿ zE¿ zm¿ zt¿ zÉ¿ zî¿ z¿¿ z⁄¿ {!¿ {>¿ {g¿ {â¿ {Œ¿ {ˇ¿ |&¿ |a¿ |r¿ |y¿ |¶¿ |œ¿ |Ù¿ }$¿ }Y¿ }Ä¿ }ß¿ }’¿ ~¿ ~<¿ ~Ç¿ ~“¿ ~Ó¿ .¿ C¿ W¿ i¿ y¿ ù¿ ﬂ¿ Ä%¿ Äy¿ Ä√¿ Ä”¿ Ä·¿ ÄÌ¿ Äˆ¿ Å¿ Å¿ Å#¿ Å*¿ Åu¿ Å≈¿ Ç¿ ÇX¿ Ç_¿ Çn¿ Ç¿ Ç´¿ Ç≈¿ É¿ É)¿ ÉR¿ Ét¿ Éπ¿ É‰¿ Ñ¿ ÑV¿ Ñ|¿ Ñ°¿ Ñ∆¿ ÑÚ¿ Ö!¿ ÖU¿ Öô¿ ÖÁ¿ Ü¿ Ü&¿ ÜI¿ Üs¿ Ü†¿ Ü“¿ Ü˘¿ á¿ áC¿ ám¿ á†¿ á“¿ à¿ àF¿ àÉ¿ àª¿ àÛ¿ â¿ âS¿ ât¿ âë¿ â¬¿ âˇ¿ ä7¿ äo¿ äö¿ ä–¿ äÒ¿ ã¿ ã*¿ ãD¿ ã\¿ ãr¿ ãÖ¿ ãò¿ ã®¿ ãÃ¿ å¿ åT¿ å®¿ åÚ¿ ç¿ ç¿ ç¿ ç%¿ ç0¿ çc¿ çe¿ ç∂¿ ç√¿ ç ¿ ç€¿ ç‚¿ é,¿ éW¿ éy¿ é{¿ éœ¿ è!¿ èe¿ èl¿ è¥¿ è‚¿ è‰¿ ê.¿ ê5¿ êÇ¿ êØ¿ ê±¿ ë¿ ëV¿ ë•¿ ë¨¿ ëÔ¿ íE¿ íL¿ í]¿ íd¿ íá¿ í´¿ íÃ¿ íË¿ íÍ¿ ì*¿ ì1¿ ìI¿ ìi¿ ìk¿ ìü¿ ì¶¿ î ¿ î¿ î>¿ î@¿ îr¿ îy¿ î—¿ îÿ¿ ï¿ ï¿ ï:¿ ïA¿ ïâ¿ ïº¿ ïæ¿ ïÊ¿ ïÌ¿ ñ>¿ ñV¿ ñã¿ ñç¿ ñﬁ¿ ó¿ ó¿ ó_¿ ó±¿ óƒ¿ ò¿ ò¿ òV¿ ò•¿ ò∆¿ ô¿ ô¿ ôK¿ ôR¿ ôc¿ ôj¿ ô÷¿ öF¿ öi¿ ök¿ öº¿ ö”¿ ö⁄¿ õ'¿ õz¿ õÀ¿ õ“¿ ú.¿ ús¿ úz¿ úÃ¿ ù ¿ ùh¿ ùõ¿ ù¢¿ ùÓ¿ û¿ û
¿ ûR¿ û¶¿ û≠¿ ûÒ¿ ü¿ ü¿ ü"¿ üN¿ üi¿ üÜ¿ ü™¿ ü»¿ ü“¿ üŸ¿ üÍ¿ †¿ †0¿ †K¿ †ä¿ †ò¿ †µ¿ †ﬁ¿ °¿ °6¿ °S¿ °ù¿ °∞¿ °Ã¿ °‹¿ ¢ ¿ ¢¿ ¢@¿ ¢o¿ ¢î¿ ¢–¿ £¿ £.¿ £M¿ £i¿ £Ñ¿ £´¿ £‹¿ §¿ §<¿ §p¿ §§¿ §ø¿ §Ì¿ •%¿ •J¿ •Ö¿ •π¿ •„¿ ¶¿ ¶E¿ ¶a¿ ¶|¿ ¶•¿ ¶ÿ¿ ¶˝¿ ß8¿ ßl¿ ß¢¿ ß≤¿ ß¿¿ ßÃ¿ ß’¿ ß·¿ ßË¿ ®¿ ®	¿ ®¿ ®!¿ ®K¿ ®v¿ ®û¿ ®¬¿ ®ƒ¿ ©5¿ ©<¿ ©_¿ ©ã¿ ©ç¿ ™ ¿ ™¿ ™E¿ ™~¿ ™Ä¿ ™Ó¿ ™ı¿ ´3¿ ´n¿ ´p¿ ´•¿ ´⁄¿ ´‹¿ ¨ ¿ ¨=¿ ¨D¿ ¨^¿ ¨e¿ ¨∂¿ ¨◊¿ ¨ﬁ¿ ≠@¿ ≠G¿ ≠ñ¿ ≠ﬂ¿ ≠˛¿ Æ¿ Æ¿ Æ¿ ÆT¿ Æ[¿ Æ¶¿ Æ≠¿ ÆÀ¿ Æ“¿ Ø¿ Øb¿ Øá¿ ØØ¿ ØÏ¿ ∞3¿ ∞Å¿ ∞¨¿ ∞˜¿ ±F¿ ±]¿ ±w¿ ±Ç¿ ±â¿ ±∏¿ ±ø¿ ±Á¿ ±Ó¿ ≤¿ ≤7¿ ≤>¿ ≤Q¿ ≤â¿ ≤Ø¿ ≤Ê¿ ≥¿ ≥R¿ ≥}¿ ≥®¿ ≥’¿ ¥¿ ¥¿ ¥.¿ ¥9¿ ¥@¿ ¥S¿ ¥ç¿ ¥⁄¿ µ*¿ µ\¿ µ{¿ µπ¿ µ˛¿ ∂¿ ∂;¿ ∂N¿ ∂U¿ ∂•¿ ∂—¿ ∂¿ ∑%¿ ∑X¿ ∑{¿ ∑ü¿ ∑Â¿ ∏¿ ∏J¿ ∏Ñ¿ ∏µ¿ ∏‹¿ π¿ πJ¿ π`¿ πó¿ π∆¿ πÛ¿ ∫¿ ∫P¿ ∫n¿ ∫ö¿ ∫±¿ ∫«¿ ∫¯¿ ªJ¿ ªô¿ ªº¿ ª“¿ ªÁ¿ ªÙ¿ ªˇ¿ º¿ º¿ ºl¿ ºé¿ ºæ¿ º›¿ Ω!¿ Ωf¿ ΩÑ¿ Ωó¿ Ωû¿ Ω›¿ Ω‰¿ æ'¿ æ<¿ æI¿ æP¿ æ|¿ æ≈¿ ø¿ ø¿ øY¿ øò¿ ø•¿ ø¨¿ ¿ ¿ ¿"¿ ¿B¿ ¿M¿ ¿V¿ ¿]¿ ¿h¿ ¿≠¿ ¿◊¿ ¿Ê¿ ¿Ì¿ ¡¿ ¡$¿ ¡W¿ ¡^¿ ¡o¿ ¡â¿ ¡•¿ ¡Õ¿ ¬¿ ¬!¿ ¬(¿ ¬9¿ ¬e¿ ¬¿ ¬ö¿ ¬Ÿ¿ ¬Á¿ √¿ √-¿ √N¿ √Ç¿ √¥¿ √Í¿ ƒ¿ ƒ)¿ ƒN¿ ƒs¿ ƒ©¿ ƒ‚¿ ≈¿ ≈%¿ ≈A¿ ≈\¿ ≈É¿ ≈®¿ ≈›¿ ∆¿ ∆C¿ ∆^¿ ∆å¿ ∆±¿ ∆Ê¿ «¿ «B¿ «j¿ «§¿ «¿¿ «€¿ »¿ »)¿ »^¿ »ó¿ »«¿ »◊¿ »Â¿ »Ò¿ »˙¿ …¿ …¿ …d¿ …~¿ …œ¿ …Í¿  1¿  Ä¿  ¡¿ À¿ À.¿ ÀJ¿ ÀL¿ Àò¿ À™¿ À±¿ À‰¿ ÀÎ¿ À¸¿ ÃE¿ Ãu¿ Ãw¿ Ã∂¿ ÃΩ¿ Õ¿ Õ¿ Õ'¿ Õ.¿ Õ~¿ Õç¿ Õ¶¿ Õ®¿ Õ…¿ Õ–¿ ÕÈ¿ Œ¿ Œ	¿ ŒX¿ Œr¿ Œy¿ Œì¿ Œö¿ ŒË¿ œ9¿ œF¿ œM¿ œö¿ œÎ¿ œ¸¿ –¿ –¿ –d¿ –É¿ –•¿ –ß¿ —¿ —¿ —‚¿ —È¿ “A¿ “H¿ “Y¿ “`¿ “ﬂ¿ ” ¿ ”¿ ”n¿ ”u¿ ‘5¿ ‘<¿ ‘ï¿ ‘ú¿ ‘≠¿ ‘¥¿ ’;¿ ’Y¿ ’[¿ ’ñ¿ ’ù¿ ’⁄¿ ÷¿ ÷L¿ ÷N¿ ÷~¿ ÷Ö¿ ÷‘¿ ◊¿ ◊¿ ◊]¿ ◊£¿ ◊™¿ ◊˛¿ ÿ(¿ ÿ/¿ ÿ>¿ ÿO¿ ÿ{¿ ÿï¿ ÿ∞¿ ÿÔ¿ ÿ˝¿ Ÿ¿ ŸC¿ Ÿd¿ Ÿà¿ Ÿ≥¿ ŸÓ¿ ⁄¿ ⁄4¿ ⁄\¿ ⁄â¿ ⁄∆¿ ⁄‹¿ €¿ €?¿ €k¿ €â¿ €±¿ €◊¿ ‹¿ ‹A¿ ‹W¿ ‹ò¿ ‹®¿ ‹Ã¿ ‹Á¿ ›¿ ›1¿ ›g¿ ›õ¿ ›ø¿ ›ﬁ¿ ›˙¿ ﬁ¿ ﬁ<¿ ﬁa¿ ﬁñ¿ ﬁ ¿ ﬁ¯¿ ﬂ¿ ﬂA¿ ﬂf¿ ﬂõ¿ ﬂœ¿ ﬂÛ¿ ‡¿ ‡U¿ ‡q¿ ‡å¿ ‡µ¿ ‡⁄¿ ·¿ ·C¿ ·s¿ ·É¿ ·ë¿ ·ù¿ ·¶¿ ·≠¿ ·Ê¿ ·˜¿ ‚#¿ ‚N¿ ‚{¿ ‚•¿ ‚«¿ ‚‚¿ „¿ „<¿ „e¿ „n¿ „y¿ „Æ¿ „∞¿ „‡¿ „Á¿ ‰9¿ ‰Z¿ ‰a¿ ‰±¿ Â&¿ Â-¿ Â•¿ Â¿¿ Â¬¿ Ê"¿ Ê)¿ Êu¿ ÊΩ¿ Êƒ¿ Á¿ Ár¿ Áø¿ Áˇ¿ Ë¿ Ë ¿ Ëo¿ Ëv¿ Ë∆¿ ËÕ¿ Ëﬁ¿ È+¿ Èa¿ È≠¿ È›¿ Í"¿ Ít¿ Íí¿ Íî¿ Í‹¿ Í„¿ Î0¿ ÎG¿ ÎÇ¿ ÎÑ¿ Î≈¿ ÎÃ¿ Ï¿ Ï5¿ Ïn¿ Ïp¿ Ïí¿ Ïô¿ Ï˛¿ Ì¿ Ì¿ Ì¿ Ì5¿ Ì]¿ Ì_¿ Ìl¿ Ì©¿ Ì¨¿ ÌÆ¿ ÌÙ¿ Ó8¿ ÓE¿ Óv¿ Ó°¿ ÓÀ¿ Óˆ¿ Ô ¿ ÔP¿ ÔR¿ Ôv¿ Ô†¿ Ô÷¿ ¿ ¿ G¿ |¿ ®¿ ÷¿ ˙¿ Ò¿ Ò5¿ Òd¿ Òà¿ Ò±¿ Ò·¿ Ò„¿ Ò˘¿ Ò˚¿ Ú¿ Ú¿ Ú>¿ Úu¿ Ú≤¿ Ú„¿ ÚÂ¿ Û6¿ Û_¿ ÛÖ¿ ÛΩ¿ Ûı¿ Ù9¿ ÙH¿ Ùl¿ Ùn¿ Ùª¿ ÙÒ¿ ı	¿ ı¿ ı¿ ı[¿ ı¶¿ ıµ¿ ıº¿ ıæ¿ ıÊ¿ ˆ$¿ ˆV¿ ˆ[¿ ˆ]¿ ˆÇ¿ ˆÀ¿ ˜¿ ˜I¿ ˜x¿ ˜π¿ ˜»¿ ˜œ¿ ˜—¿ ˜Û¿ ¯:¿ ¯d¿ ¯Ç¿ ¯â¿ ¯ã¿ ¯Æ¿ ¯Ô¿ ˘+¿ ˘I¿ ˘P¿ ˘R¿ ˘m¿ ˘†¿ ˘‰¿ ˙.¿ ˙J¿ ˙p¿ ˙w¿ ˙|¿ ˙~¿ ˙¬¿ ˚¿ ˚¿ ˚¿ ˚ ¿ ˚_¿ ˚™¿ ˚‰¿ ¸-¿ ¸M¿ ¸p¿ ¸Ø¿ ¸È¿ ˝,¿ ˝F¿ ˝c¿ ˝µ¿ ˛¿ ˛5¿ ˛Y¿ ˛¶¿ ˛È¿ ˇ¿ ˇ\¿ ˇ§¿ ˇØ¿ ˇ∏¿ ˇﬁ¿ ˇˇ¿ #¿ t¿ ñ¿ ª¿ ƒ¿ À¿ –¿ “¿¿M¿w¿ï¿¡¿	¿¿¿¿:¿m¿•¿œ¿ ¿D¿t¿¿¿…¿–¿˘¿¿"¿$¿7¿V¿£¿«¿…¿Û¿ı¿¿G¿z¿∂¿∏¿Ó¿ ¿T¿õ¿¢¿ÿ¿!¿(¿*¿a¿°¿⁄¿¿¿E¿î¿∑¿˝¿ˇ¿	'¿	Q¿	Ü¿	π¿	¿	Ú¿
¿
a¿
ú¿
⁄¿¿¿'¿v¿x¿≠¿¸¿˛¿¿!¿#¿1¿I¿s¿î¿ô¿õ¿©¿¿¿D¿~¿¥¿ª¿Ω¿‡¿¿¿5¿S¿X¿Z¿ñ¿ÿ¿Á¿Ó¿¿2¿4¿P¿w¿¢¿»¿ ¿¿^¿é¿≤¿ÿ¿˘¿¿n¿u¿z¿|¿¶¿À¿Ù¿C¿i¿p¿r¿Å¿‡¿Ë¿ı¿]¿•¿¿P¿¿Å¿®¿‡¿Á¿È¿¿¿¿5¿s¿í¿•¿∫¿ﬂ¿Ë¿Ô¿Ò¿¿6¿Ä¿≥¿∫¿ø¿¡¿Ô¿'¿g¿è¿œ¿¿7¿z¿¬¿Í¿.¿h¿ê¿œ¿¿=¿Ä¿Ö¿á¿√¿¯¿3¿p¿∑¿˜¿˘¿
¿g¿q¿Ä¿Á¿X¿∑¿ı¿4¿N¿_¿h¿j¿¥¿˜¿˘¿¿(¿1¿3¿D¿†¿™¿π¿ /¿ í¿ ‰¿!+¿!-¿!|¿!~¿!≈¿!ˇ¿"¿"P¿"ú¿"û¿"Ω¿"Œ¿"◊¿"Ÿ¿"Ó¿#¿#<¿#G¿#N¿#S¿#U¿#É¿#ë¿#©¿#¬¿#«¿#…¿#˙¿$¿$Z¿$ô¿$œ¿%¿%R¿%r¿%√¿&¿&9¿&L¿&W¿&Y¿&ö¿&∫¿'	¿'0¿'~¿'Œ¿(	¿(>¿(ê¿(ƒ¿)¿)9¿)L¿)]¿)ï¿)ÿ¿)˝¿*¿*¿*$¿*-¿*4¿*9¿*;¿*`¿*¢¿*±¿*∏¿*À¿+¿+(¿+*¿+z¿+µ¿+·¿,(¿,1¿,3¿,[¿,å¿,é¿,Œ¿-	¿-J¿-w¿-®¿-Î¿-ˆ¿-¯¿.¿.¿.¿.S¿.¢¿.€¿/¿/E¿/t¿/√¿/Ã¿/Œ¿/¿0.¿07¿09¿0]¿0´¿0Õ¿1¿18¿1à¿1ø¿1¿1˚¿2¿2¿2¿2=¿2V¿2q¿2s¿2¿¿3¿3(¿31¿3{¿3º¿3√¿3≈¿4¿46¿4o¿4¨¿4Û¿54¿5;¿5@¿5B¿5î¿5±¿5¸¿6#¿6g¿6Ø¿6¯¿78¿7`¿7~¿7¶¿7≠¿7÷¿7˝¿8E¿8ë¿8ﬁ¿9¿9a¿9´¿9Û¿:¿:C¿:q¿:¬¿;¿;'¿;S¿;Ö¿;¡¿;Ã¿;’¿;‹¿;·¿;„¿;ˇ¿<¿<$¿<I¿<b¿<}¿<Ü¿<ã¿<ç¿<©¿<„¿<Ú¿<˘¿<˚¿=G¿=è¿=ë¿=≠¿=º¿=√¿=≈¿> ¿>K¿>M¿>Å¿>ê¿>ó¿>ô¿>ƒ¿?¿?V¿?X¿?h¿?µ¿?¿?˘¿@¿@U¿@£¿@Ò¿AB¿Aq¿A£¿A…¿AÈ¿B ¿B"¿BL¿Bi¿BÇ¿Bü¿B¶¿B´¿B≠¿B‡¿B˝¿C¿C!¿CD¿Cw¿Cö¿Cœ¿D¿D¿D¿D¿DT¿DÖ¿Dñ¿Dü¿D°¿DÊ¿E
¿E¿E¿E¿EL¿EÄ¿Eá¿E≥¿E∏¿E∫¿E◊¿E¯¿E˝¿Eˇ¿FB¿Fe¿Fê¿Fó¿F∫¿F›¿F‰¿FÈ¿FÎ¿G¿GC¿G`¿Gç¿G∂¿G€¿H¿H>¿HÖ¿H¬¿I¿I¿IO¿Iî¿Iñ¿I∂¿I…¿I‘¿IÎ¿I˛¿J¿J>¿Je¿J§¿J ¿J¯¿K$¿KF¿KS¿K`¿Ki¿Kp¿Kr¿K≤¿KÃ¿K”¿K’¿Kˇ¿L¿Le¿Ló¿L¢¿L©¿L´¿L—¿LÊ¿M/¿MW¿MÉ¿M ¿MÓ¿M˘¿N ¿N¿N/¿ND¿Næ¿N…¿N–¿N“¿O¿O=¿OD¿OF¿On¿OÉ¿O≠¿OÕ¿OÙ¿P¿P,¿P.¿PP¿P[¿Pb¿Pg¿Pi¿Pë¿P≠¿P»¿PÂ¿Q¿Q5¿QU¿Q{¿Qπ¿QÔ¿R#¿R]¿R£¿R’¿S¿SM¿SÖ¿Sø¿SÔ¿T/¿Tq¿Tó¿T…¿U¿U3¿Uk¿UØ¿U·¿V¿VK¿Vç¿V…¿W¿W3¿WX¿W}¿W≥¿WÛ¿X5¿Xs¿X≠¿X˘¿Y1¿Y{¿Yß¿Y◊¿Z¿Z1¿ZY¿Zù¿Z›¿[!¿[Q¿[ã¿[«¿[˚¿\5¿\q¿\ß¿\ﬂ¿]¿]8¿]l¿]à¿]∫¿]Ÿ¿^¿^L¿^n¿^¶¿^À¿_
¿_A¿_i¿_â¿_µ¿_Ì¿`-¿`a¿`ã¿`¡¿`Ò¿a#¿aW¿aá¿aª¿aÌ¿b¿b¿bD¿bz¿b©¿b∞¿bµ¿b∑¿bÙ¿c¿c¿cG¿cå¿c≤¿d ¿d#¿d_¿dn¿dπ¿dˆ¿d˛¿e¿e\¿e¨¿e¿f2¿f_¿fì¿fø¿g¿g?¿gf¿gû¿g‚¿h¿hM¿h{¿hØ¿h˚¿i%¿iu¿iû¿iﬁ¿j,¿j~¿j¨¿j˙¿k%¿kc¿kØ¿k¿l#¿li¿l†¿lÿ¿m¿mC¿mï¿mø¿m˚¿nE¿n}¿n©¿nÈ¿o¿oF¿oÑ¿o®¿o¿p¿pQ¿pS¿p•¿p€¿q$¿q-¿qf¿q®¿qØ¿q±¿q‚¿r¿rH¿rì¿rú¿r◊¿s¿s"¿s$¿so¿sª¿s¬¿sƒ¿sÁ¿t!¿ti¿tk¿tà¿tƒ¿tÊ¿u8¿u:¿uÉ¿uô¿uΩ¿u˝¿v:¿vw¿v≥¿vÔ¿vÒ¿w¿w9¿wa¿w°¿wÂ¿x¿x/¿x1¿xn¿x™¿x—¿y
¿y¿y¿y%¿y'¿yG¿yn¿yº¿yﬁ¿z'¿zI¿zn¿z¿¿z˘¿{,¿{t¿{…¿|¿|<¿|e¿|ã¿|∏¿|Ò¿}$¿}1¿}<¿}E¿}L¿}N¿}t¿}ú¿}“¿~¿~U¿~î¿~ü¿~Õ¿~÷¿~›¿~ﬂ¿¿E¿Ç¿º¿Ì¿Ä+¿Äm¿Äv¿Ä}¿Ä¿Äõ¿Ä∏¿Äÿ¿Ä˛¿Å¿ÅG¿Åm¿Åê¿Å≠¿Å’¿Å˙¿Ç!¿Ç>¿Ç]¿ÇÉ¿Ç¢¿Ç÷¿É¿É\¿Éö¿É‡¿Ñ¿Ñ\¿Ñ}¿Ñ©¿Ñ¬¿Ñƒ¿Ö¿Öh¿Ö¶¿Ö˜¿Ü!¿Ü*¿Üh¿Üç¿Ü∂¿Ü€¿Üˇ¿áM¿áô¿áﬂ¿áÏ¿à*¿à5¿à>¿à@¿àj¿à∞¿àÊ¿àË¿â#¿âS¿âò¿âö¿â‘¿ä
¿ä¿ä¿äO¿ä}¿äØ¿ä÷¿ã ¿ã)¿ã+¿ãK¿ãM¿ãä¿ãÀ¿ã‘¿ã÷¿ã˘¿å¿å'¿å)¿åE¿åG¿åi¿åk¿åó¿åô¿å∆¿ç¿çI¿çv¿ç¨¿çÆ¿ç€¿ç›¿ç˚¿é¿é=¿ée¿éé¿é÷¿è¿è@¿èe¿è™¿èµ¿èæ¿è¿¿ê¿ê`¿êØ¿êˆ¿ë¿ë6¿ëw¿ëô¿ë ¿ëı¿í&¿íi¿ík¿í∑¿ì¿ìU¿ìv¿ìñ¿ìﬂ¿î¿î¿îF¿îQ¿îZ¿î\¿îz¿î£¿î≈¿îÍ¿ï¿ï2¿ïZ¿ïõ¿ïæ¿ïÙ¿ï˝¿ïˇ¿ñ!¿ñ`¿ñÑ¿ñ©¿ñ—¿ñ¯¿ó"¿óD¿óÑ¿óÆ¿óÿ¿ó„¿óÏ¿óÓ¿ò#¿òr¿òº¿ò‚¿òÎ¿òÌ¿ô¿ô¿ôg¿ô≥¿ôÂ¿ö¿ö`¿ö¿ö≠¿ö˛¿õ,¿õu¿õÄ¿õ¢¿õ∆¿ú¿ú9¿úB¿úI¿úN¿úP¿úy¿ú°¿úæ¿úÎ¿ù"¿ù\¿ùÅ¿ù™¿ù‡¿ùÂ¿ùÁ¿û ¿ûP¿û~¿û£¿ûœ¿ûÎ¿ü/¿ü\¿üu¿ü«¿üŒ¿ü–¿üˆ¿†A¿†~¿†æ¿†˘¿° ¿°¿°¿°Z¿°a¿°c¿°ï¿°Õ¿¢¿¢A¿¢Å¿¢µ¿¢∑¿¢‹¿£¿£¿£¿£¿£<¿£n¿£ò¿£À¿£Û¿§=¿§D¿§p¿§ú¿§£¿§•¿§˜¿•=¿•q¿•£¿•‘¿¶	¿¶S¿¶ï¿¶”¿ß¿ß#¿ßo¿ß≥¿ßÛ¿®<¿®E¿®L¿®Q¿®S¿®z¿®´¿®·¿®Ë¿®Í¿©¿©L¿©S¿©U¿©Ç¿©π¿©¿¿©≈¿©«¿©Â¿™ ¿™\¿™å¿™ø¿™˜¿´¿´¿´%¿´*¿´,¿´J¿´y¿´†¿´‚¿¨¿¨0¿¨Q¿¨o¿¨é¿¨∞¿¨≤¿¨˙¿¨ˇ¿≠¿≠)¿≠[¿≠ç¿≠œ¿≠¸¿Æ¿Æ¿Æ.¿Æc¿Æï¿Æ⁄¿Ø
¿Ø¿Ø¿Ø[¿Ø•¿ØÀ¿Ø¯¿∞¿∞%¿∞D¿∞ì¿∞–¿∞◊¿∞‹¿∞ﬁ¿±¿±4¿±;¿±x¿±ù¿±§¿±„¿≤$¿≤+¿≤m¿≤±¿≤˛¿≥+¿≥o¿≥•¿≥‰¿¥¿¥X¿¥h¿¥¶¿¥Ø¿¥∂¿¥ª¿¥Ω¿¥ ¿¥Ï¿µ ¿µR¿µâ¿µ¬¿µ˜¿µ˘¿∂%¿∂Z¿∂\¿∂°¿∂£¿∂€¿∑'¿∑.¿∑0¿∑r¿∑t¿∑ñ¿∑‘¿∏#¿∏W¿∏®¿∏‘¿∏Á¿∏˘¿π¿πb¿πd¿π¥¿π¸¿∫L¿∫k¿∫ò¿∫€¿ª¿ª4¿ªV¿ªò¿ªπ¿º
¿º¿º'¿ºO¿ºV¿ºX¿º|¿ºÅ¿ºÉ¿ºê¿º¿¿ºÁ¿Ω
¿Ω¿Ω¿Ω¿ΩF¿Ωs¿Ωè¿Ωñ¿Ωò¿Ω≥¿Ω˙¿æC¿æï¿æ÷¿ø%¿ø'¿øú¿øˇ¿¿6¿¿r¿¿≠¿¿∂¿¿›¿¿ı¿¡)¿¡a¿¡l¿¡ê¿¡ø¿¡˜¿¬ ¿¬¿¬"¿¬A¿¬b¿¬ô¿¬£¿¬¨¿¬±¿¬≥¿¬¿¿¬‘¿¬˚¿¬˝¿√¿√]¿√¿√á¿√î¿√ﬁ¿ƒZ¿ƒ«¿≈	¿≈B¿≈t¿≈≠¿≈ÿ¿≈Ù¿∆¿∆)¿∆H¿∆h¿∆ò¿∆«¿∆Ú¿∆˘¿«@¿«b¿«â¿«–¿«¸¿»*¿»,¿»;¿»w¿»¬¿» ¿»◊¿…6¿…ê¿…’¿…˙¿ ,¿ e¿ {¿ Ä¿ É¿ Ö¿ »¿ Õ¿À¿ÀS¿Àó¿À§¿ÀÁ¿À¯¿À˝¿ÃN¿Ã_¿Ãd¿Ã¥¿Ã≈¿Ã”¿Õ¿Õ¿ÕD¿ÕU¿ÕÖ¿Õƒ¿Œ¿Œ]¿ŒÑ¿Œ—¿œ"¿œ5¿œK¿œP¿œa¿œò¿œº¿œ¯¿–/¿–J¿–S¿–Z¿–c¿–e¿–©¿–«¿—¿—¿—8¿—t¿—v¿—≥¿—∫¿“	¿“Y¿“j¿“q¿“æ¿“˘¿” ¿”M¿”Å¿”à¿”⁄¿‘¿‘¿‘C¿‘ê¿‘ó¿‘¯¿’L¿’Ü¿’à¿’ø¿’¡¿’˜¿’˘¿÷Q¿÷à¿÷ä¿÷œ¿÷„¿◊¿◊¿◊>¿◊@¿◊Ä¿◊™¿◊¨¿◊Û¿◊˙¿ÿH¿ÿ[¿ÿb¿ÿï¿ÿﬂ¿ÿ˛¿Ÿ<¿Ÿá¿Ÿâ¿Ÿ⁄¿⁄%¿⁄k¿⁄r¿⁄∏¿⁄¸¿€¿€L¿€ç¿€î¿€·¿‹¿‹.¿‹g¿‹z¿‹¨¿‹Ì¿›8¿›ä¿›≥¿ﬁ¿ﬁU¿ﬁj¿ﬁÇ¿ﬁâ¿ﬁú¿ﬁÃ¿ﬁ‰¿ﬁÔ¿ﬁˆ¿ﬂ	¿ﬂB¿ﬂh¿ﬂ¶¿ﬂﬂ¿ﬂ¸¿‡¿‡¿‡¿‡"¿‡0¿‡Z¿‡m¿‡r¿‡t¿‡¿¿‡’¿‡‹¿·(¿·x¿·ë¿·ò¿·Ë¿·Ô¿·˛¿‚¿‚;¿‚U¿‚p¿‚Ø¿‚Ω¿‚÷¿‚Ô¿„
¿„1¿„R¿„á¿„÷¿‰¿‰¿‰+¿‰F¿‰t¿‰ô¿‰¡¿Â¿ÂQ¿Â©¿Â˜¿Ê¿Ê¿Ê-¿Ê;¿ÊG¿ÊP¿ÊZ¿Êk¿Êr¿Ê¡¿Ê÷¿Á(¿ÁG¿Áë¿Á‡¿Ë ¿Ëi¿Ëk¿Ë§¿Ë´¿Ë˝¿ÈK¿Èu¿È|¿ÈÕ¿Í¿Íi¿Í∫¿Î¿Î/¿Î6¿ÎÄ¿Î“¿Ï¿Ï ¿Ï1¿Ï8¿Ïä¿Ïò¿Ï¶¿Ï◊¿Ï˘¿Ì¿Ì¿Ì?¿Ìr¿Ì{¿ÌÄ¿ÌÇ¿Ì·¿ÓC¿ÓÖ¿Ó¢¿ÓΩ¿Ó„¿Ô¿Ô/¿ÔI¿Ôq¿Ôx¿Ô}¿Ô¿Ôñ¿Ô‰¿	¿C¿É¿¡¿‰¿Ò¿Ò¿Òe¿Ò±¿Ò⁄¿Ú¿Ú#¿Ú,¿Ú3¿Úq¿Úò¿Úù¿Úü¿ÚÓ¿Û8¿Ûf¿Ûm¿Ûô¿ÛÕ¿ÛÛ¿Ù'¿Ù.¿Ùr¿Ùø¿ı¿ı^¿ıe¿ıl¿ıª¿ı¿ı˜¿ˆ¿ˆ?¿ˆR¿ˆÑ¿ˆ≈¿˜¿˜b¿˜ã¿˜⁄¿¯-¿¯B¿¯Z¿¯a¿¯t¿¯≠¿¯”¿˘¿˘J¿˘g¿˘r¿˘y¿˘ã¿˘‡¿˙¿˙0¿˙M¿˙ú¿˙µ¿˙⁄¿˙˜¿˚F¿˚_¿˚f¿˚ö¿˚≤¿˚¿¿˚«¿¸¿¸a¿¸v¿¸¡¿¸œ¿¸€¿¸‚¿˝¿˝¿˝%¿˝0¿˝>¿˝ç¿˝◊¿˝Î¿˛
¿˛U¿˛i¿˛p¿˛r¿˛º¿ˇ¿ˇH¿ˇM¿ˇO¿ˇb¿ˇ∞¿ˇÌ¿ 
¿ ¿ B¿ U¿ ^¿ ç¿ õ¿ ∏¿ À¿ Ô¿¿¿;¿B¿G¿I¿g¿å¿≤¿Ÿ¿Á¿¿¿¿W¿Å¿√¿Ï¿1¿8¿:¿¿§¿¶¿Û¿G¿`¿e¿g¿´¿Í¿Ò¿ ¿¿=¿W¿r¿±¿ø¿ÿ¿Ò¿¿3¿T¿â¿ÿ¿¿¿-¿H¿v¿õ¿√¿¿Q¿©¿˜¿	¿	¿	-¿	;¿	G¿	P¿	[¿	l¿	Ü¿	Ã¿	—¿	”¿
!¿
s¿
≥¿
µ¿
Û¿¿#¿n¿Ö¿å¿ù¿§¿¿=¿X¿f¿î¿ñ¿ﬁ¿Â¿¿Q¿X¿£¿∫¿»¿Ò¿Û¿:¿A¿P¿a¿ç¿•¿º¿”¿¿^¿§¿¯¿B¿U¿e¿Ç¿Æ¿œ¿¿Z¿o¿}¿â¿í¿ù¿Â¿&¿\¿à¿ü¿ß¿©¿⁄¿‹¿¿7¿>¿C¿E¿Ä¿á¿ñ¿ß¿”¿Î¿¿¿b¿§¿Í¿>¿à¿õ¿´¿»¿˜¿¿T¿¶¿ª¿…¿’¿ﬁ¿È¿4¿k¿±¿¿¿«¿…¿¿8¿:¿Y¿Ü¿î¿«¿Œ¿–¿˙¿+¿2¿7¿9¿à¿∞¿∑¿¿¿%¿4¿E¿q¿â¿†¿∑¿ ¿B¿à¿‹¿&¿9¿I¿f¿ï¿∂¿Ì¿¿¿¿%¿0¿]¿Ü¿‘¿¿1¿f¿q¿ô¿Ω¿Î¿ ¿+¿4¿;¿@¿B¿à¿¿¿È¿ -¿ 4¿ 6¿ P¿ R¿ õ¿ ¿¿ ≈¿ «¿!¿!¿!d¿!á¿!é¿!ù¿!§¿!Ó¿!ı¿"¿"¿"*¿"b¿"ü¿"√¿#¿#A¿#Z¿#í¿#…¿#›¿#˙¿$¿$¿$`¿$ä¿$ß¿$⁄¿%¿%,¿%N¿%í¿%ø¿%Û¿&+¿&Z¿&¿&£¿&È¿&˝¿'2¿'_¿'ä¿'≠¿'„¿'ˇ¿()¿(>¿(R¿(Å¿(—¿)¿)?¿)S¿)f¿)q¿)z¿)Ö¿)“¿*¿*l¿*Ñ¿*∏¿+
¿+¿+!¿+#¿+\¿+c¿+Æ¿+À¿+“¿,¿,j¿,≠¿,˝¿-I¿-ô¿-µ¿-«¿-Ã¿-Œ¿.¿.¿.\¿.™¿.¿/¿/$¿/o¿/¢¿/©¿/π¿/ ¿0¿0;¿0i¿0Ç¿0¿¿0˜¿1¿1 ¿1'¿1d¿1k¿1¨¿1ø¿1 ¿1—¿1˚¿2B¿2ã¿2í¿2“¿3¿3¿3!¿3s¿3ì¿3±¿3∫¿3ƒ¿4¿4g¿4Ñ¿4Ü¿4À¿4È¿4¿5<¿5å¿5∏¿6¿6"¿64¿69¿6;¿6Å¿6Ω¿7¿7+¿7-¿7:¿7Å¿7∂¿7ﬂ¿8¿8¿8¿8I¿8l¿8n¿8∞¿8Â¿9¿9K¿9M¿9ü¿9¡¿9Ì¿:¿:¿:¿:X¿:™¿:˘¿;¿;0¿;7¿;9¿;h¿;Ä¿;Ç¿;®¿;≠¿;Ø¿<¿<
¿<X¿<h¿<o¿<æ¿<˛¿=H¿=ê¿=¿¿=¬¿=Í¿>¿>8¿>v¿>§¿>À¿?¿?;¿?d¿?®¿?Ô¿?¸¿@¿@¿@%¿@3¿@~¿@Ö¿@ä¿@å¿@◊¿@ﬁ¿A.¿Av¿A∫¿A¡¿B¿B¿Bb¿Bä¿B±¿B⁄¿C ¿C¿C0¿C5¿C8¿C:¿C}¿Cœ¿Cˆ¿C˘¿C˚¿D:¿Dr¿D∏¿Dÿ¿D€¿D›¿E¿E2¿EP¿ES¿EU¿Ez¿E¿Eœ¿F¿F/¿F4¿FÇ¿Fµ¿Fˆ¿GF¿Ga¿Gx¿Gò¿Gπ¿G˘¿H¿HG¿Hx¿H§¿H¬¿Hﬁ¿H„¿HÂ¿I¿I¿I^¿Iã¿I√¿J¿J¿JL¿Jy¿J≤¿Jﬂ¿JÓ¿Jı¿J˜¿K¿Kh¿Km¿Ko¿K¢¿KŒ¿KÂ¿KÁ¿L&¿Lg¿Li¿Lç¿L∑¿LÚ¿M¿MR¿M`¿Mu¿M|¿MÅ¿MÉ¿M∂¿M„¿N¿N!¿N(¿N*¿NR¿Nû¿N£¿N•¿NŸ¿N‡¿O,¿OA¿Or¿Oê¿Oí¿O∆¿OÕ¿P¿P.¿P`¿Pã¿Pö¿P°¿P£¿P«¿Q¿Q¿Q¿QT¿QÖ¿Q•¿Qß¿QÂ¿R¿R<¿R>¿Rã¿R…¿S¿S+¿S2¿SÅ¿SÃ¿T¿TD¿Ty¿T¡¿TÓ¿U%¿UJ¿UÄ¿UÖ¿Uá¿U∞¿U∑¿V ¿V¿VJ¿VÅ¿VÉ¿Vƒ¿Vˇ¿W)¿Wd¿Wâ¿W¿¿X¿XU¿Xí¿X–¿Y¿Y_¿Y≥¿YÀ¿Z	¿Z¿Z'¿Zd¿Zú¿Z⁄¿[¿[d¿[ä¿[ï¿[û¿[•¿[™¿[¨¿[Ô¿[ˆ¿\K¿\R¿\û¿\Ô¿]A¿]m¿]Ø¿]–¿^¿^I¿^{¿^•¿^‡¿_¿_.¿_e¿_ë¿_À¿_Õ¿`¿`C¿`Å¿`í¿`õ¿`ù¿`€¿a¿a_¿aó¿a∂¿b¿bF¿by¿b{¿b¬¿b‚¿c,¿cc¿cã¿cû¿c€¿d¿d0¿dB¿dK¿dM¿dê¿d®¿dø¿d⁄¿e¿e+¿eO¿e{¿e∂¿eœ¿e—¿f¿f1¿fK¿fh¿fî¿fª¿f‚¿g¿gT¿gp¿gr¿gï¿g‘¿hW¿hÇ¿h√¿h ¿hœ¿h—¿i¿i¿ia¿ih¿iº¿i˝¿j*¿jK¿jõ¿j¬¿j˚¿k ¿k¿k=¿kD¿kô¿k†¿kÙ¿l5¿lh¿lâ¿lŸ¿m¿m?¿mD¿mF¿mï¿mú¿mÒ¿n'¿nQ¿n{¿nÀ¿o¿o"¿o'¿o)¿ow¿o~¿o”¿p¿p5¿p_¿pØ¿q¿q¿q¿q¿qU¿qà¿q≤¿qÌ¿r¿rD¿rå¿rŸ¿rÍ¿rÛ¿rı¿s/¿sx¿s¿sÑ¿sÜ¿s¡¿s’¿sˇ¿t:¿t_¿të¿tŸ¿u&¿u7¿u@¿uB¿uê¿uó¿uú¿uü¿u°¿uÓ¿v¿v¿v^¿vc¿vp¿v©¿v≤¿v∑¿w¿w¿w¿wX¿wg¿w∂¿w‡¿x¿x1¿xJ¿x]¿xd¿xk¿xt¿xè¿xÃ¿xÊ¿xË¿y¿y¿yf¿y¶¿yÛ¿z¿z
¿z¿z¿z^¿zõ¿zÂ¿{¿{¿{^¿{ã¿{ê¿{í¿{‹¿|¿|¿|¿|J¿|t¿|¨¿|Æ¿|⁄¿}¿}B¿}G¿}I¿}x¿}´¿}„¿}Ë¿}Í¿}˜¿~¿~1¿~6¿~8¿~h¿R¿`¿¶¿Á¿Ä¿Ä¿Ä$¿Ä&¿Ä∞¿Ä‡¿Å¿Å%¿ÅR¿Åõ¿Å¨¿Å◊¿Å˛¿Ç6¿Ç=¿ÇB¿ÇE¿ÇG¿Çß¿Ç‘¿É¿É=¿ÉX¿ÉÉ¿Éµ¿É‹¿Ñ¿Ñ3¿Ñ6¿Ñ8¿Ñz¿Ñ∫¿Ñ·¿Ñ‰¿ÑÊ¿Ö#¿Ö^¿ÖÄ¿ÖÉ¿ÖÖ¿Ö≤¿Ö‚¿Ü¿Ü¿Ü¿Ü?¿Üy¿Üø¿Ü‚¿ÜÓ¿á¿á¿á¿á¿áO¿áí¿áœ¿à¿à#¿à%¿àé¿à£¿à«¿â¿â1¿â:¿â?¿âA¿âå¿âª¿ä¿äM¿äh¿ä±¿ä·¿ã¿ã¿ã¿ã¿ã¿ãp¿ã¡¿ãÚ¿ãı¿ã˜¿åH¿åa¿å§¿å—¿å‘¿å÷¿ç¿ç=¿çá¿çπ¿çº¿çæ¿é¿éV¿é~¿éÅ¿éÉ¿é“¿è¿èI¿èL¿èN¿èñ¿è≥¿è¯¿ê2¿ê5¿ê7¿êÑ¿êÃ¿ê˝¿ë ¿ë¿ëJ¿ëé¿ë∑¿ëÌ¿ë¿ëÚ¿í=¿íÜ¿í∂¿íπ¿íª¿í∆¿í„¿í¿íÚ¿ì
¿ìU¿ì°¿ì¥¿î¿î>¿îq¿î∏¿îˇ¿ïF¿ïÄ¿ï≥¿ïÒ¿ñ$¿ñ\¿ñè¿ñ«¿ñ˘¿ó=¿óp¿óí¿ó·¿ò	¿òK¿òâ¿ò¨¿ò¿ô¿ôP¿ôd¿ôá¿ô±¿ôÃ¿ö¿ö7¿ög¿ö°¿öÂ¿õ)¿õO¿õä¿õè¿õë¿õù¿õº¿õæ¿õ·¿õ¸¿õ˛¿ú¿ú(¿ú*¿ú7¿ú9¿ú]¿ú_¿úl¿ún¿úå¿úé¿úõ¿úù¿ú–¿ú“¿úﬂ¿ú·¿ù¿ù¿ù¿ù¿ù9¿ù;¿ùH¿ùJ¿ùg¿ùi¿ùv¿ùx¿ùò¿ùö¿ùß¿ù©¿ùÕ¿ùœ¿ù‹¿ùﬁ¿û¿û
¿û¿û¿ûJ¿ûL¿ûY¿û[¿ûx¿ûz¿ûá¿ûâ¿ûÆ¿û∞¿ûΩ¿ûø¿ûŸ¿û€¿ü¿ü¿üy¿ü»¿†¿†,¿†3¿†B¿†S¿†¿†ô¿†¥¿†Ú¿°%¿°3¿°U¿°ë¿°µ¿°‘¿°˝¿¢8¿¢s¿¢∞¿¢≈¿¢Â¿¢˙¿£B¿£Ç¿£•¿£ß¿£Œ¿£Ù¿§$¿§C¿§n¿§Ñ¿§ó¿§∑¿§ÿ¿•¿•/¿•`¿•x¿•ä¿•õ¿•ª¿•Á¿¶¿¶/¿¶U¿¶e¿¶s¿¶¿¶à¿¶ì¿¶Ø¿¶±¿ß¿ß¿ßT¿ßè¿ßØ¿ß±¿ß˙¿®¿®B¿®}¿®¢¿®§¿®ı¿©¿©¿©x¿©ß¿©™       .  Y  ÄÇ  Ä¿  Ä¯  Å  ÅE  Åp  ÅûÅ« Å‘  Å˚  Ç  Ç<  ÇhÇñ Ç©    ëIÇﬂíYÅ/// Row configuration and cell data for a [SfDataGrid].
///
/// Return this list of [DataGridRow] objects to [DataGridSource.rows] property.
///
/// The data for each row can be passed as the cells argument to the
/// constructor of each [DataGridRow] object. íj{ í£íÆ//// Creates [DataGridRow] for the [SfDataGrid].í∞!íÕ  í›í÷íﬂíÎÄ†ìÖt/// The data for this row.
///
/// There must be exactly as many cells as there are columns in the
/// [SfDataGrid].  ìíÄìî T/// Returns the collection of [DataGridCell] which is created for
/// [DataGridRow].    î,Ç4î˚Ä±/// The data for a cell of a [SfDataGrid].
///
/// The list of [DataGridCell] objects should be passed as the cells argument
/// to the constructor of each [DataGridRow] object.ïïïx ïJïV0/// Creates [DataGridCell] for the [SfDataGrid].ïXïg  ïrïÅ   ïé3ï∑/// The name of a column ï»ÄîñWy/// The value of a cell.
///
/// Provide value of a cell to perform the sorting for whole data available
/// in datagrid.   î‚î„ñdÇZóÄù/// Row configuration and widget of cell for a [SfDataGrid].
///
/// The widget for each cell can be provided in the [DataGridRowAdapter.cells]
/// property. ó$ÄÄ ódóv6/// Creates [DataGridRowAdapter] for the [SfDataGrid].óxóá  óçóì  óó
óù   ó™*ó—/// The key for the row. ó€0ò/// The color for the row. òÄ®òµÄÉ/// The widget of each cell for this row.
///
/// There must be exactly as many cells as there are columns in the
/// [SfDataGrid].    ò¬Ç*öÅ5/// Row configuration for stacked header in [SfDataGrid]. The columns for this
/// stacked header row are provided in the [StackedHeaderCell] property of the
/// [StackedHeaderRow] object.
///
/// See also:
///
/// [StackedHeaderCell] ‚Äì which provides the configuration for column in stacked
/// header row. ög öYöi;/// Creates the [StackedHeaderRow] for [SfDataGrid] widget.ököz   öáaö„@/// The collection of [StackedHeaderCell] in stacked header row.    öÖ¨õ†Ä¶/// Column configuration for stacked header row in `SfDataGrid`.
///
/// See also:
///
/// [StackedHeaderRow] ‚Äì which provides configuration for stacked header row. õ∑Ä¿ õˆú;/// Creates the [StackedHeaderCell] for [StackedHeaderRow].ú	ú  úú+  ú7úF   ú}ÅÍû\Å≥/// The collection of string which is the [GridColumn.columnName] of the
/// columns defined in the [SfDataGrid].
///
/// The columns are spanned as a stacked header based on this collection. If
/// the given collection has the sequence of columns which are presented in
/// the [SfDataGrid], those columns will be spanned. Otherwise, stacked header
///  is added for each column which are not in sequence order in regular
/// columns. ûnuûﬁY/// The widget that represents the data of this cell.
///
/// Typically, a [Text] widget. ûÍÅÖ†kÅ^/// The text of the stacked header cell while exporting the [SfDataGrid] to
/// Excel or Pdf.
///
/// This property won‚Äôt affect the UI and this is used while exporting the
/// [SfDataGrid].
///
/// As widget can‚Äôt be exported to Excel or PDF, set this property to give the
/// corresponding text while exporting the [SfDataGrid] to Excel or Pdf. †v"†Ö     ††Ü–¢KÅõ/// Row configuration of table summary in [SfDataGrid].
///
/// The summary columns for this table summary row are provided in [columns]
/// property of the [GridTableSummaryRow] object.
///
///See also,
///
/// * [GridSummaryColumn] -Which provides the configuration for summary column in
/// table summary row.
/// * [SfDataGrid.tableSummaryRows] ‚Äì Enables you to add the table summary rows
/// to DataGrid. ¢dÅ$ ¢¢¢µ:/// Creates the [GridTableSummaryRow] to the [SfDataGrid].¢ø
¢≈  ¢“
¢ÿ  ¢Â¢Ù  ££  £"£(  £C£I  £9£[£k£q£Ü£Ç£r£Ö£éu£˛[/// A string that has the format and summary column information to be
/// displayed in row. §
7§<!/// The color of the summary row. §HÅ¨•ÂÅw/// Indicates how many columns should be spanned for
/// [GridTableSummaryRow.title].
///
/// This is applicable only if the [GridTableSummaryRow.showSummaryInRow]
/// is false.
///
/// If [GridTableSummaryRow.titleColumnSpan] value is greater than 0, then the
/// [GridTableSummaryRow.title] will be rendered along with summary values as
/// defined through summary columns. •˚ÄÆ¶ôÄÜ/// Indicates whether the summary value should be displayed in whole row or
/// based on individual columns.
///
/// Defaults to true. ¶∞S¶¸*/// The collection of [GridSummaryColumn]. ß
bßd4/// Indicates the position of the table summary row.    ßtÇ”®Äô/// Column configuration for table summary row.
///
/// See also,
///
/// * [GridTableSummaryRow] ‚Äì Which provides configuration for table summary row. ®.Äæ ®y®äA/// Creates the [GridSummaryColumn] to the [GridTableSummaryRow].®î®£  ®Ø®æ  ®–®ﬂ   ®ÚB©0-/// Indicates the name of the summary column. ©;Äò©…s/// Indicates the name of the column.
///
/// See also,
///
/// [GridColumn.columnName] ‚Äì the name of the column. ©⁄i™8D/// Indicates the summary type which should be displayed for column.    ™K¿ √_∑på /// A material design datagrid.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=-ULsEfjxFuY}
///
/// DataGrid lets you display and manipulate data in a tabular view. It is built
/// from the ground up to achieve the best possible performance even when
/// loading large amounts of data.
///
/// DataGrid supports different types of column types to populate the columns
/// for different types of data such as int, double, DateTime, String.
///
/// [source] property enables you to populate the data for the [SfDataGrid].
///
/// This sample shows how to populate the data for the [SfDataGrid] and display
/// with four columns: id, name, designation and salary.
/// The columns are defined by four [GridColumn] objects.
///
/// ``` dart
///   final List<Employee> _employees = <Employee>[];
///   final EmployeeDataSource _employeeDataSource = EmployeeDataSource();
///
///   @override
///   void initState(){
///     super.initState();
///     populateData();
///   }
///
///   @override
///   Widget build(BuildContext context) {
///     return SfDataGrid(
///       source: _employeeDataSource,
///       columnWidthMode: ColumnWidthMode.fill,
///       columns: <GridColumn>[
///         GridColumn(columnName: 'id', label: Text('ID')),
///         GridColumn(columnName: 'name', label: Text('Name')),
///         GridColumn(columnName: 'designation', label: Text('Designation')),
///         GridColumn(columnName: 'salary', label: Text('Salary')),
///     );
///   }
///
///   void populateData(){
///     _employees.add(Employee(10001, 'James', 'Project Lead', 10000));
///     _employees.add(Employee(10002, 'Kathryn', 'Manager', 10000));
///     _employees.add(Employee(10003, 'Lara', 'Developer', 10000));
///     _employees.add(Employee(10004, 'Michael', 'Designer', 10000));
///     _employees.add(Employee(10005, 'Martin', 'Developer', 10000));
///     _employees.add(Employee(10006, 'Newberry', 'Developer', 15000));
///     _employees.add(Employee(10007, 'Balnc', 'Developer', 15000));
/// 	  _employees.add(Employee(10008, 'Perry', 'Developer', 15000));
///     _employees.add(Employee(10009, 'Gable', 'Developer', 15000));
///     _employees.add(Employee(10010, 'Grimes', 'Developer', 15000));
///   }
/// }
///
/// class Employee {
///   Employee(this.id, this.name, this.designation, this.salary);
///   final int id;
///   final String name;
///   final String designation;
///   final int salary;
/// }
///
/// class EmployeeDataSource extends DataGridSource {
///   @override
///   List<DataGridRow> get rows => _employees
///       .map<DataGridRow>((dataRow) => DataGridRow(cells: [
///             DataGridCell<int>(columnName: 'id', value: dataRow.id),
///             DataGridCell<String>(columnName: 'name', value: dataRow.name),
///             DataGridCell<String>(
///                 columnName: 'designation', value: dataRow.designation),
///             DataGridCell<int>(columnName: 'salary', value: dataRow.salary),
///           ]))
///       .toList();
///
///   @override
///   DataGridRowAdapter? buildRow(DataGridRow row) {
///     return DataGridRowAdapter(
///         cells: row.getCells().map<Widget>((dataCell) {
///           return Text(dataCell.value.toString());
///         }).toList());
///   }
/// }
///
/// ``` ∑óãÎ ∏$∏.}/// Creates a widget describing a datagrid.
///
/// The [columns] and [source] argument must be defined and must not be null.G∏6∏E  ∏Q∏`  ∏m∏s  ∏|∏Ç  ∏û!∏§  ∏∆$∏Ã  ∏Ò9∏˜  π1?π7  πw+π}  π©πØ  π¿Jπ∆  ∫'∫  ∫?,∫E  ∫r∫x  ∫î!∫ö  ∫º∫¬  ∫€∫·  ª ª  ª $ª&  ªK!ªQ  ªsªy  ªñ0ªú  ªÕ3ª”  ºº  º#º)  º9º?  ºUº[  ºsºy  ºíºò  ºµºª  º◊º›  ºÏºÚ  ΩΩ  Ω%Ω+  Ω@#ΩF  ΩjDΩp  ΩµBΩª  Ω˛æ  ææ#  æC(æI  ær&æx  æüæ•  æøæ≈  æ·æÁ  øø  ø+ø1  øCøI  ø\øb  ørøx  øñøú  ø∏øæ  øﬁ!ø‰  ¿ @1¿ @  ¿ @>¿ @D  ¿ @]¿ @c  ¿ @}¿ @É  ¿ @ö¿ @†  ¿ @∫6¿ @¿  ¿ @˜¿ @˝  ¿ A	¿ A  ¿ A(¿ A.  ¿ AND¿ AT  ¿ Aô5¿ Aü  ¿ A’¿ A€  ¿ AÏ¿ AÚ  ¿ B¿ B  ¿ B3¿ B9  ¿ BN¿ BT  ¿ Bp¿ Bv  ¿ Bå¿ Bí  ¿ Bß¿ B≠  p∏ç∏ì∏î∏µ∏ª∏º∏‡∏Ê∏Áπππ πRπeπfπéπùπûπ„π˛πˇ∫&∫3∫4∫U∫g∫h∫å∫¥∫”∫¯ªª?ªgªäª∞ª¬ª√ªÊª˛ªˇªÏª˝ªÌΩ^ΩâΩèΩ¨Ω≠Ω“ΩÿΩıΩˆæ7ægæïæ≥æ’ø”ø˙¿ @¿ @.¿ @/¿ @Æ¿ @‘¿ @Ê¿ @Á¿ A¿ AB¿ Al¿ Ar¿ Aê¿ Aë¿ A±¿ AÃ¿ AÕ¿ A∑¿ AÀ¿ A∏¿ B¿ B'¿ Bd¿ Bƒ¿ B ¿ B‚¿ Bﬁ¿ BÀ¿ B·¿ BÓ¿ BÙ¿ C¿ C¿ Bı¿ C¿ C¿ C$¿ C9¿ C5¿ C%¿ C8¿ CE¿ CK¿ Cf¿ Cb¿ CL¿ Ce¿ Cr¿ Cw¿ CÄ¿ C{¿ Cx¿ C}F¿ Càm¿ CÏM/// The height of each row except the column header.
///
/// Defaults to 49.0 ¿ C¸g¿ DTA/// The height of the column header row.
///
/// Defaults to 56.0 ¿ Djj¿ DÕB/// The collection of the [GridColumn].
///
/// Defaults to empty. ¿ D€Ä˚¿ E–ÄÕ/// The [DataGridSource] that provides the data for each row in [SfDataGrid]. Must
/// be non-null.
///
/// This object is expected to be long-lived, not recreated with each build.
///
/// Defaults to null ¿ E›Å&¿ FÒÄÙ/// The width of each column.
///
/// If the [columnWidthMode] is set for [SfDataGrid] or [GridColumn], or
/// [GridColumn.width] is set, [defaultColumnWidth] will not be considered.
///
/// Defaults to 90.0 for Android & iOS and 100.0 for Web. ¿ G
ÄÆ¿ G©y/// How the column widths are determined.
///
/// Defaults to [ColumnWidthMode.none]
///
/// Also refer [ColumnWidthMode] ¿ GøÅé¿ I2Å5/// How the row count should be considered when calculating the width of a
/// column.
///
/// Provides options to consider only visible rows or all the rows which are
/// available in [SfDataGrid].
///
/// Defaults to [ColumnWidthCalculationRange.visibleRows]
///
/// Also refer [ColumnWidthCalculationRange] ¿ ITÅ ¿ JIÄ“/// The [ColumnSizer] used to control the column width sizing operation of
/// each columns.
///
/// You can override the available methods and customize the required
/// operations in the custom [ColumnSizer]. ¿ J[Å,¿ KtÄÊ/// How the border should be visible.
///
/// Decides whether vertical, horizontal, both the borders and no borders
/// should be drawn.
///
/// Defaults to [GridLinesVisibility.horizontal]
///
/// Also refer [GridLinesVisibility] ¿ KéÇ8¿ M≠Å‹/// How the border should be visible in header cells.
///
/// Decides whether vertical or horizontal or both the borders or no borders
/// should be drawn.
///
/// [GridLinesVisibility.horizontal] will be useful if you are using
/// [stackedHeaderRows] to improve the readability.
///
/// Defaults to [GridLinesVisibility.horizontal]
///
/// Also refer [GridLinesVisibility].
///
/// See also, [gridLinesVisibility] ‚Äì To set the border for cells other than
/// header cells. ¿ MÕj¿ N'8/// Invoked when the row height for each row is queried. ¿ N>ÄË¿ OÄ±/// How the rows should be selected.
///
/// Provides options to select single row or multiple rows.
///
/// Defaults to [SelectionMode.none].
///
/// Also refer [SelectionMode] ¿ O-Ä√¿ OﬁÄÑ/// Invoked when the row is selected.
///
/// This callback never be called when the [onSelectionChanging] is returned
/// as false. ¿ O˜Å(¿ QÄ‰/// Invoked when the row is being selected or being unselected
///
/// This callback's return type is [bool]. So, if you want to cancel the
/// selection on a row based on the condition, return false.
/// Otherwise, return true. ¿ Q&Å5¿ RKÄÛ/// The [SelectionManagerBase] used to control the selection operations
/// in [SfDataGrid].
///
/// You can override the available methods and customize the required
/// operations in the custom [RowSelectionManager].
///
/// Defaults to null ¿ RbÅ¿ S_Ä–/// The [DataGridController] used to control the current cell navigation and
/// selection operation.
///
/// Defaults to null.
///
/// This object is expected to be long-lived, not recreated with each build. ¿ SpÄâ¿ SÎ[/// Decides whether the navigation in the [SfDataGrid] should be cell wise
/// or row wise. ¿ T Ä—¿ TªÄä/// Invoked when the cell is activated.
///
/// This callback never be called when the [onCurrentCellActivating] is
/// returned as false. ¿ TÿÅ¿ UŸÄÃ/// Invoked when the cell is being activated.
///
/// This callback's return type is [bool]. So, if you want to cancel cell
/// activation based on the condition, return false. Otherwise,
/// return true. ¿ U˜[¿ VI//// Called when a tap with a cell has occurred. ¿ VYÄ¶¿ Vk/// Called when user is tapped a cell with a primary button at the same cell
/// twice in quick succession. ¿ W|¿ WpG/// Called when a tap with a cell has occurred with a secondary button. ¿ WâÄô¿ X^/// Called when a long press gesture with a primary button has been
/// recognized for a cell. ¿ X)Ç=¿ ZTÅˆ/// The number of non-scrolling columns at the left side of [SfDataGrid].
///
/// In Right To Left (RTL) mode, this count refers to the number of
/// non-scrolling columns at the right side of [SfDataGrid].
///
/// Defaults to 0
///
/// See also:
///
/// * [footerFrozenColumnsCount]
/// * [SfDataGridThemeData.frozenPaneLineWidth], which is used to customize the
/// width of the frozen line.
/// * [SfDataGridThemeData.frozenPaneLineColor], which is used to customize the
/// color of the frozen line ¿ ZmÇ ¿ \uÅ÷/// The number of non-scrolling columns at the right side of [SfDataGrid].
///
/// In Right To Left (RTL) mode, this count refers to the number of
/// non-scrolling columns at the left side of [SfDataGrid].
///
/// Defaults to 0
///
/// See also:
///
/// * [SfDataGridThemeData.frozenPaneLineWidth], which is used to customize the
/// width of the frozen line.
/// * [SfDataGridThemeData.frozenPaneLineColor], which is used to customize the
/// color of the frozen line. ¿ \îÅ°¿ ^&Åf/// The number of non-scrolling rows at the top of [SfDataGrid].
///
/// Defaults to 0
///
/// See also:
///
/// * [footerFrozenRowsCount]
/// * [SfDataGridThemeData.frozenPaneLineWidth], which is used to customize the
/// width of the frozen line.
/// * [SfDataGridThemeData.frozenPaneLineColor], which is used to customize the
/// color of the frozen line. ¿ ^<Åâ¿ _∞ÅK/// The number of non-scrolling rows at the bottom of [SfDataGrid].
///
/// Defaults to 0
///
/// See also:
///
/// * [SfDataGridThemeData.frozenPaneLineWidth], which is used to customize the
/// width of the frozen line.
/// * [SfDataGridThemeData.frozenPaneLineColor], which is used to customize the
/// color of the frozen line. ¿ _Ãà-¿ gÌáx/// Decides whether user can sort the column simply by tapping the column
/// header.
///
/// Defaults to false.
///
/// ```dart
/// @override
/// Widget build(BuildContext context) {
///   return SfDataGrid(
///     source: _employeeDataSource,
///     allowSorting: true,
///     columns: [
///         GridColumn(columnName: 'id', label: Text('ID')),
///         GridColumn(columnName: 'name', label: Text('Name')),
///         GridColumn(columnName: 'designation', label: Text('Designation')),
///         GridColumn(columnName: 'salary', label: Text('Salary')),
///   ]);
/// }
///
/// class EmployeeDataSource extends DataGridSource {
///   @override
///   List<DataGridRow> get rows => _employees
///       .map<DataGridRow>((dataRow) => DataGridRow(cells: [
///             DataGridCell<int>(columnName: 'id', value: dataRow.id),
///             DataGridCell<String>(columnName: 'name', value: dataRow.name),
///             DataGridCell<String>(
///                 columnName: 'designation', value: dataRow.designation),
///             DataGridCell<int>(columnName: 'salary', value: dataRow.salary),
///           ]))
///       .toList();
///
///   @override
///   DataGridRowAdapter? buildRow(DataGridRow row) {
///     return DataGridRowAdapter(
///         cells: row.getCells().map<Widget>((dataCell) {
///       return Text(dataCell.value.toString());
///     }).toList());
///   }
/// }
///
/// ```
///
///
/// See also:
///
/// * [GridColumn.allowSorting] - which allows users to sort the columns in
/// [SfDataGrid].
/// * [sortingGestureType] ‚Äì which allows users to sort the column in tap or
/// double tap.
/// * [DataGridSource.sortedColumns] - which is the collection of
/// [SortColumnDetails] objects to sort the columns in [SfDataGrid].
/// * [DataGridSource.sort] - call this method when you are adding the
/// [SortColumnDetails] programmatically to [DataGridSource.sortedColumns]. ¿ h Ç¿ i¯Å»/// Decides whether user can sort more than one column.
///
/// Defaults to false.
///
/// This is applicable only if the [allowSorting] is set as true.
///
/// See also:
///
/// * [DataGridSource.sortedColumns] - which is the collection of
/// [SortColumnDetails] objects to sort the columns in [SfDataGrid].
/// * [DataGridSource.sort] - call this method when you are adding the
/// [SortColumnDetails] programmatically to [DataGridSource.sortedColumns]. ¿ jÇ:¿ l<ÅÛ/// Decides whether user can sort the column in three states: ascending,
/// descending, unsorted.
///
/// Defaults to false.
///
/// This is applicable only if the [allowSorting] is set as true.
///
/// See also:
///
/// * [DataGridSource.sortedColumns] - which is the collection of
/// [SortColumnDetails] objects to sort the columns in [SfDataGrid].
/// * [DataGridSource.sort] - call this method when you are adding the
/// [SortColumnDetails] programmatically to [DataGridSource.sortedColumns]. ¿ lWÇy¿ n¡Ç4/// Decides whether the sequence number should be displayed on the header cell
///  of sorted column during multi-column sorting.
///
/// Defaults to false
///
/// This is applicable only if the [allowSorting] and
/// [allowMultiColumnSorting] are set as true.
///
/// See also:
///
/// * [DataGridSource.sortedColumns] - which is the collection of
/// [SortColumnDetails] objects to sort the columns in [SfDataGrid].
/// * [DataGridSource.sort] - call this method when you are adding the
/// [SortColumnDetails] programmatically to [DataGridSource.sortedColumns]. ¿ n◊Äˆ¿ oªÄ≤/// Decides whether the sorting should be applied on tap or double tap the
/// column header.
///
/// Default to [SortingGestureType.tap]
///
/// see also:
///
/// [allowSorting] ¿ o‘Ñ¿ s Éä/// The collection of [StackedHeaderRow].
///
/// Stacked headers enable you to display headers that span across multiple
/// columns and rows. These rows are displayed above to the regular column
/// headers.
///
/// ```dart
/// @override
/// Widget build(BuildContext context) {
///   return SfDataGrid(source: _employeeDataSource, columns: <GridColumn>[
///     GridColumn(columnName: 'id', label: Text('ID')),
///     GridColumn(columnName: 'name', label: Text('Name')),
///     GridColumn(columnName: 'designation', label: Text('Designation')),
///     GridColumn(columnName: 'salary', label: Text('Salary'))
///   ], stackedHeaderRows: [
///     StackedHeaderRow(cells: [
///       StackedHeaderCell(
///         columnNames: ['id', 'name', 'designation', 'salary'],
///         child: Center(
///           child: Text('Order Details'),
///         ),
///       ),
///     ])
///   ]);
/// }
/// ``` ¿ s‚ÅT¿ u Å /// Indicates whether the horizontal and vertical scrollbars should always
/// be visible. When false, both the scrollbar will be shown during scrolling
/// and will fade out otherwise. When true, both the scrollbar will always be
/// visible and never fade out.
///
/// Defaults to false ¿ u=Å,¿ vRÄÙ/// How the horizontal scroll view should respond to user input.
/// For example, determines how the horizontal scroll view continues to animate after the user stops dragging the scroll view.
///
/// Defaults to [AlwaysScrollableScrollPhysics]. ¿ vpÅ&¿ wÅÄ/// How the vertical scroll view should respond to user input.
/// For example, determines how the vertical scroll view continues to animate after the user stops dragging the scroll view.
///
/// Defaults to [AlwaysScrollableScrollPhysics]. ¿ wùï√¿ çMî/// A builder that sets the widget to display at the bottom of the datagrid
/// when vertical scrolling reaches the end of the datagrid.
///
/// You should override [DataGridSource.handleLoadMoreRows] method to load
/// more rows and then notify the datagrid about the changes. The
/// [DataGridSource.handleLoadMoreRows] can be called to load more rows from
/// this builder using `loadMoreRows` function which is passed as a parameter
/// to this builder.
///
/// ## Infinite scrolling
///
/// The example below demonstrates infinite scrolling by showing the circular
/// progress indicator until the rows are loaded when vertical scrolling
/// reaches the end of the datagrid,
///
/// ```dart
/// @override
/// Widget build(BuildContext context) {
///   return Scaffold(
///     appBar: AppBar(title: Text('Syncfusion Flutter DataGrid')),
///     body: SfDataGrid(
///       source: employeeDataSource,
///       loadMoreViewBuilder:
///           (BuildContext context, LoadMoreRows loadMoreRows) {
///         Future<String> loadRows() async {
///           await loadMoreRows();
///           return Future<String>.value('Completed');
///         }
///
///         return FutureBuilder<String>(
///           initialData: 'loading',
///           future: loadRows(),
///           builder: (context, snapShot) {
///             if (snapShot.data == 'loading') {
///               return Container(
///                   height: 98.0,
///                   color: Colors.white,
///                   width: double.infinity,
///                   alignment: Alignment.center,
///                   child: CircularProgressIndicator(valueColor:
///                             AlwaysStoppedAnimation(Colors.deepPurple)));
///             } else {
///               return SizedBox.fromSize(size: Size.zero);
///             }
///           },
///         );
///       },
///       columns: <GridColumn>[
///           GridColumn(columnName: 'id', label: Text('ID')),
///           GridColumn(columnName: 'name', label: Text('Name')),
///           GridColumn(columnName: 'designation', label: Text('Designation')),
///           GridColumn(columnName: 'salary', label: Text('Salary')),
///       ],
///     ),
///   );
/// }
/// ```
///
/// ## Load more button
///
/// The example below demonstrates how to show the button when vertical
/// scrolling is reached at the end of the datagrid and display the circular
/// indicator when you tap that button. In the onPressed flatbutton callback,
/// you can call the `loadMoreRows` function to add more rows.
///
/// ```dart
/// @override
/// Widget build(BuildContext context) {
///   return Scaffold(
///     appBar: AppBar(title: Text('Syncfusion Flutter DataGrid')),
///     body: SfDataGrid(
///       source: employeeDataSource,
///       loadMoreViewBuilder:
///           (BuildContext context, LoadMoreRows loadMoreRows) {
///         bool showIndicator = false;
///         return StatefulBuilder(
///             builder: (BuildContext context, StateSetter setState) {
///           if (showIndicator) {
///             return Container(
///                 height: 98.0,
///                 color: Colors.white,
///                 width: double.infinity,
///                 alignment: Alignment.center,
///                 child: CircularProgressIndicator(valueColor:
///                           AlwaysStoppedAnimation(Colors.deepPurple)));
///           } else {
///             return Container(
///               height: 98.0,
///               color: Colors.white,
///               width: double.infinity,
///               alignment: Alignment.center,
///               child: Container(
///                 height: 36.0,
///                 width: 142.0,
///                 child: FlatButton(
///                   color: Colors.deepPurple,
///                   child: Text('LOAD MORE',
///                       style: TextStyle(color: Colors.white)),
///                   onPressed: () async {
///                     if (context is StatefulElement &&
///                         context.state != null &&
///                         context.state.mounted) {
///                       setState(() {
///                         showIndicator = true;
///                       });
///                     }
///                     await loadMoreRows();
///                     if (context is StatefulElement &&
///                         context.state != null &&
///                         context.state.mounted) {
///                       setState(() {
///                         showIndicator = false;
///                       });
///                     }
///                   },
///                 ),
///               ),
///             );
///           }
///         });
///       },
///       columns: <GridColumn>[
///           GridColumn(columnName: 'id', label: Text('ID')),
///           GridColumn(columnName: 'name', label: Text('Name')),
///           GridColumn(columnName: 'designation', label: Text('Designation')),
///           GridColumn(columnName: 'salary', label: Text('Salary')),
///       ],
///     ),
///   );
/// }
/// ``` ¿ çgÅ¿ édÄﬁ/// Decides whether refresh indicator should be shown when datagrid is pulled
/// down.
///
/// See also,
///
/// [DataGridSource.handleRefresh] ‚Äì This will be called when datagrid
/// is pulled down to refresh the data. ¿ é}Åb¿ è√Å+/// The distance from the [SfDataGrid]‚Äôs top or bottom edge to where the refresh
/// indicator will settle. During the drag that exposes the refresh indicator,
/// its actual displacement may significantly exceed this value.
///
/// By default, the value of `refreshIndicatorDisplacement` is 40.0. ¿ èÊÄ∆¿ êëÄî/// Defines `strokeWidth` for `RefreshIndicator` used by [SfDataGrid].
///
/// By default, the value of `refreshIndicatorStrokeWidth` is 2.0 pixels. ¿ ê≥Ç2¿ íŸÅ˛/// Decides whether to swipe a row ‚Äúright to left‚Äù or ‚Äúleft to right‚Äù for custom
/// actions such as deleting, editing, and so on. When the user swipes a row,
/// the row will be moved, and swipe view will be shown for custom actions.
///
/// You can show the widgets for left or right swipe view using
/// [SfDataGrid.startSwipeActionsBuilder] and [SfDataGrid.endSwipeActionsBuilder].
///
/// See also,
///
/// * [SfDataGrid.onSwipeStart]
/// * [SfDataGrid.onSwipeUpdate]
/// * [SfDataGrid.onSwipeEnd] ¿ íÏz¿ ìXU/// Defines the maximum offset in which a row can be swiped.
///
/// Defaults to 200. ¿ ìmÄŒ¿ î!Äè/// Controls a horizontal scrolling in DataGrid.
///
/// You can use addListener method to listen whenever you do the horizontal scrolling.
/// ¿ îBÄ»¿ îÚÄã/// Controls a vertical scrolling in DataGrid.
///
/// You can use addListener method to listen whenever you do the vertical scrolling.
/// ¿ ïÄ®¿ ï≠p/// Called when row swiping is started.
///
/// You can disable the swiping for specific row by returning false. ¿ ï¿Ä»¿ ñ{Äã/// Called when row is being swiped.
///
/// You can disable the swiping for specific requirement on swiping itself by
/// returning false. ¿ ñè{¿ ó M/// Called when swiping of a row is ended (i.e. when reaches the max offset). ¿ óÄ¿ óÈÄ´/// A builder that sets the widget for the background view in which a row is
/// swiped in the reading direction (e.g., from left to right in left-to-right
/// languages). ¿ òÄ˘¿ òÎÄ∂/// A builder that sets the widget for the background view in which a row is
/// swiped in the reverse of reading direction (e.g., from right to left in
/// left-to-right languages). ¿ ôÅ^¿ öSÅ1/// Decides whether to highlight a row when mouse hovers over it.
///
/// see also,
///
/// * [SfDataGridThemeData.rowHoverColor] ‚Äì This helps you to change row highlighting color on hovering.
/// * [SfDataGridThemeData.rowHoverTextStyle] ‚Äì This helps you to change the [TextStyle] of row on hovering. ¿ öméR¿ ®´ç/// Decides whether a column can be resized by the user interactively using a
/// pointer or not.
///
/// In mobile platforms, resize indicator will be shown on the right side
/// border of the column header when the user long-press a column header. Then,
/// users tap and drag the resizing indicator to perform the column resizing.
///
/// In web and desktop platforms, resizing can be performed by clicking and dragging the
/// right side (left side in RTL mode) border of a column header.
///
/// DataGrid does not automatically resize the columns when you perform column
/// resizing. You should maintain the column width collection at the application
/// level and set the column width of corresponding column using the
/// [SfDataGrid.onColumnResizeUpdate] callback.
///
/// The column width must be set inside the `setState` method to refresh
/// the DataGrid.
///
/// If you want to disable the column resizing for specific columns,
/// return `false` for the specific columns in [SfDataGrid.onColumnResizeStart].
///
/// The following example shows how to set the column width when
/// resizing a column.
///
///  ```dart
/// Map<String, double> columnWidths = {
///   'id': double.nan,
///   'name': double.nan,
///   'designation': double.nan,
///   'salary': double.nan
/// };
///
/// @override
/// Widget build(BuildContext context) {
///   return Scaffold(
///     appBar: AppBar(
///       title: const Text('Syncfusion Flutter DataGrid'),
///     ),
///     body: SfDataGrid(
///       source: employeeDataSource,
///       allowColumnsResizing: true,
///       onColumnResizeUpdate: (details) {
///         setState(() {
///           columnWidths[details.column.columnName] = details.width;
///         });
///         return true;
///       },
///       columns: <GridColumn>[
///         GridColumn(
///             columnName: 'id',
///             width: columnWidths['id']!,
///             label: Container(
///                 padding: const EdgeInsets.all(16.0),
///                 alignment: Alignment.center,
///                 child: const Text(
///                   'ID',
///                 ))),
///         GridColumn(
///             columnName: 'name',
///             width: columnWidths['name']!,
///             label: Container(
///                 padding: const EdgeInsets.all(8.0),
///                 alignment: Alignment.center,
///                 child: const Text('Name'))),
///         GridColumn(
///             columnName: 'designation',
///             width: columnWidths['designation']!,
///             label: Container(
///                 padding: const EdgeInsets.all(8.0),
///                 alignment: Alignment.center,
///                 child: const Text(
///                   'Designation',
///                   overflow: TextOverflow.ellipsis,
///                 ))),
///         GridColumn(
///             columnName: 'salary',
///             width: columnWidths['salary']!,
///             label: Container(
///                 padding: const EdgeInsets.all(8.0),
///                 alignment: Alignment.center,
///                 child: const Text('Salary'))),
///       ],
///     ),
///   );
/// }
///  ```
///
/// Defaults to false.
///
/// See also,
///
/// * [SfDataGrid.onColumnResizeStart]
/// * [SfDataGrid.onColumnResizeUpdate]
/// * [SfDataGrid.onColumnResizeEnd] ¿ ®∆Ä¬¿ ©xÄë/// Decides how column should be resized. It can be either along with indicator moves or releasing a pointer.
///
/// See also [ColumnResizeMode] ¿ ©èÄÏ¿ ™hÄÆ/// Called when a column is being resized when tapping and dragging the right-side border of the column header.
///
/// You can return `false` to disable the column resizing. ¿ ™ÇÄÈ¿ ´WÄ©/// Called when a column is resizing when tapping and dragging the right-side border of the column header.
///
/// You can return `false` to disable the column resizing. ¿ ´re¿ ´∆1/// Called when a column is resized successfully. ¿ ´ﬁüi¿ À;úÌ/// Decides whether cell should be moved into edit mode based on
/// [editingGestureType].
///
/// Defaults to false.
///
/// Editing can be enabled only if the [selectionMode] is other than none and
/// [navigationMode] is cell.
///
/// You can load the required widget on editing using [DataGridSource.buildEditWidget] method.
///
/// The following example shows how to load the [TextField] for `id` column
/// by overriding the `onCellSubmit` and `buildEditWidget` methods in
/// [DataGridSource] class.
///
/// ```dart
///
/// class EmployeeDataSource extends DataGridSource {
///
///  TextEditingController editingController = TextEditingController();
///
///  dynamic newCellValue;
///
///  /// Creates the employee data source class with required details.
///   EmployeeDataSource({required List<Employee> employeeData}) {
///     employees = employeeData;
///     _employeeData = employeeData
///         .map<DataGridRow>((e) => DataGridRow(cells: [
///               DataGridCell<int>(columnName: 'id', value: e.id),
///               DataGridCell<String>(columnName: 'name', value: e.name),
///               DataGridCell<String>(
///                   columnName: 'designation', value: e.designation),
///               DataGridCell<int>(columnName: 'salary', value: e.salary),
///             ]))
///         .toList();
///   }
///
///   List<DataGridRow> _employeeData = [];
///
///   List<Employee> employees = [];
///
///   @override
///   List<DataGridRow> get rows => _employeeData;
///
///   @override
///   DataGridRowAdapter buildRow(DataGridRow row) {
///     return DataGridRowAdapter(
///         cells: row.getCells().map<Widget>((e) {
///       return Container(
///         alignment: (e.columnName == 'id' || e.columnName == 'salary')
///             ? Alignment.centerRight
///             : Alignment.centerLeft,
///         padding: EdgeInsets.all(8.0),
///         child: Text(e.value.toString()),
///       );
///     }).toList());
///   }
///
///   @override
///   Widget? buildEditWidget(DataGridRow dataGridRow,
///       RowColumnIndex rowColumnIndex, GridColumn column, submitCell) {
///     // To set the value for TextField when cell is moved into edit mode.
///     final String displayText = dataGridRow
///             .getCells()
///             .firstWhere((DataGridCell dataGridCell) =>
///                 dataGridCell.columnName == column.columnName)
///             .value
///             ?.toString() ??
///         '';
///
///     /// Returning the TextField with the numeric keyboard configuration.
///     if (column.columnName == 'id') {
///       return Container(
///           padding: const EdgeInsets.all(8.0),
///           alignment: Alignment.centerRight,
///           child: TextField(
///             autofocus: true,
///             controller: editingController..text = displayText,
///             textAlign: TextAlign.right,
///             decoration: const InputDecoration(
///                 contentPadding: EdgeInsets.all(0),
///                 border: InputBorder.none,
///                 isDense: true),
///             inputFormatters: [
///               FilteringTextInputFormatter.allow(RegExp('[0-9]'))
///             ],
///             keyboardType: TextInputType.number,
///             onChanged: (String value) {
///               if (value.isNotEmpty) {
///                 print(value);
///                 newCellValue = int.parse(value);
///               } else {
///                 newCellValue = null;
///               }
///             },
///             onSubmitted: (String value) {
///               /// Call [CellSubmit] callback to fire the canSubmitCell and
///               /// onCellSubmit to commit the new value in single place.
///               submitCell();
///             },
///           ));
///     }
///   }
///
///   @override
///   void onCellSubmit(DataGridRow dataGridRow, RowColumnIndex rowColumnIndex,
///       GridColumn column) {
///     final dynamic oldValue = dataGridRow
///             .getCells()
///             .firstWhereOrNull((DataGridCell dataGridCell) =>
///                 dataGridCell.columnName == column.columnName)
///             ?.value ??
///         '';
///
///     final int dataRowIndex = rows.indexOf(dataGridRow);
///
///     if (newCellValue == null || oldValue == newCellValue) {
///       return;
///     }
///
///     if (column.columnName == 'id') {
///       rows[dataRowIndex].getCells()[rowColumnIndex.columnIndex] =
///           DataGridCell<int>(columnName: 'id', value: newCellValue);
///
///       // Save the new cell value to model collection also.
///       employees[dataRowIndex].id = newCellValue as int;
///     }
///
///     // To reset the new cell value after successfully updated to DataGridRow
///     //and underlying mode.
///     newCellValue = null;
///   }
/// }
///
/// ```
/// The following example shows how to enable editing and set the
/// [DataGridSource] for [SfDataGrid].
/// ```dart
///
/// List<Employee> employees = <Employee>[];
///
/// late EmployeeDataSource employeeDataSource;
///
/// @override
/// void initState() {
///   super.initState();
///   employees = getEmployeeData();
///   employeeDataSource = EmployeeDataSource(employeeData: employees);
/// }
///
/// @override
/// Widget build(BuildContext context) {
///   return Scaffold(
///     appBar: AppBar(
///       title: const Text('Syncfusion Flutter DataGrid'),
///     ),
///     body: SfDataGrid(
///       source: employeeDataSource,
///       allowEditing: true,
///       columnWidthMode: ColumnWidthMode.fill,
///       selectionMode: SelectionMode.single,
///       navigationMode: GridNavigationMode.cell,
///       columns: <GridColumn>[
///         GridColumn(
///             columnName: 'id',
///             label: Container(
///                 padding: EdgeInsets.all(16.0),
///                 alignment: Alignment.centerRight,
///                 child: Text(
///                   'ID',
///                 ))),
///         GridColumn(
///             columnName: 'name',
///             label: Container(
///                 padding: EdgeInsets.all(8.0),
///                 alignment: Alignment.centerLeft,
///                 child: Text('Name'))),
///         GridColumn(
///             columnName: 'designation',
///             label: Container(
///                 padding: EdgeInsets.all(8.0),
///                 alignment: Alignment.centerLeft,
///                 child: Text(
///                   'Designation',
///                   overflow: TextOverflow.ellipsis,
///                 ))),
///         GridColumn(
///             columnName: 'salary',
///             label: Container(
///                 padding: EdgeInsets.all(8.0),
///                 alignment: Alignment.centerRight,
///                 child: Text('Salary'))),
///       ],
///     ),
///   );
/// }
/// ```
/// See also,
/// * [GridColumn.allowEditing] ‚Äì You can enable or disable editing for an
/// individual column.
/// * [DataGridSource.onCellBeginEdit]- This will be triggered when a cell is
/// moved to edit mode.
/// * [DataGridSource.canSubmitCell]- This will be triggered before
/// [DataGridSource.onCellSubmit] method is called. You can use this method
/// if you want to not end the editing based on any criteria.
/// * [DataGridSource.onCellSubmit] ‚Äì This will be triggered when the cell‚Äôs
/// editing is completed. ¿ ÀNÅ$¿ Ã`ÄÂ/// Decides whether the editing should be triggered on tap or double tap
/// the cells.
///
/// Defaults to [EditingGestureType.doubleTap].
///
/// See also,
/// * [allowEditing] ‚Äì This will enable the editing option for cells. ¿ ÃyÅ*¿ ÕùÄˇ/// The widget to show over the bottom of the [SfDataGrid].
///
/// This footer will be displayed like normal row and shown below to last row.
///
/// See also,
///
/// [SfDataGrid.footerHeight] ‚Äì This enables you to change the height of the
/// footer. ¿ Õ™Z¿ Õ¯7/// The height of the footer.
///
/// Defaults to 49.0. ¿ ŒÇó¿ –êÇK/// Decides whether [Checkbox] should be displayed in each row to select or
/// deselect the rows.
///
/// Defaults to false.
///
/// If true, [Checkbox] column will be added at the beginning of each row.
/// Rows can be selected only if the [SfDataGrid.selectionMode] is other than
/// none.
///
/// [SfDataGrid.onSelectionChanging] and [SfDataGrid.onSelectionChanging]
/// callbacks will be called whenever you select the rows using [Checkbox] in
/// each row.
///
/// See also,
/// [SfDataGrid.checkboxColumnSettings] ‚Äì Provides the customization options
/// to the checkbox column. ¿ –©ÇT¿ “ÏÇ/// Whether the extent of the horizontal scroll view should be determined by the number of columns available.
///
/// By default, if the DataGrid‚Äôs parent width is infinity, width is set as 300. If `shrinkWrapColumns` property is true, the width is expanding to view all the columns available in DataGrid.
///
/// Shrink wrapping is significantly more expensive than setting the width manually.
///
/// See also,
///
///[shrinkWrapRows] -  Whether the extent of the vertical scroll view should be determined by the number of rows available. ¿ ”ÇR¿ ’HÇ/// Whether the extent of the vertical scroll view should be determined by the number of rows available.
///
/// By default, if the DataGrid‚Äôs parent height is infinity, height is set as 300. If `shrinkWrapRows` property is true, the height is expanding to view all the rows available in DataGrid.
///
/// Shrink wrapping is significantly more expensive than setting the height manually.
///
/// See also,
///
/// [shrinkWrapColumns] - Whether the extent of the horizontal scroll view should be determined by the number of columns available. ¿ ’]ÄÏ¿ ÷3Ä§/// Contains all the properties of the checkbox column.
///
/// This settings are applied to checkbox column, only if
/// [SfDataGrid.showCheckboxColumn] is `true`. ¿ ÷Pç[¿ „õå/// The collection of [GridTableSummaryRow].
///
/// This enables you to show the total or summary for columns i.e Max, Min,
/// Average, and Count for the whole DataGrid.
///
/// Load the required widget in summary cell by overriding and returning the
/// widget in [DataGridSource.buildTableSummaryCellWidget] method.
///
/// The following example shows how to display the table summary rows at the top
/// and bottom with different options.
///
/// ```dart
/// @override
/// Widget build(BuildContext context) {
///   return Scaffold(
///     appBar: AppBar(
///       title: const Text('Syncfusion Flutter DataGrid'),
///     ),
///     body: SfDataGrid(
///       source: employeeDataSource,
///       tableSummaryRows: [
///         GridTableSummaryRow(
///             showSummaryInRow: true,
///             title: 'Total Employee Count: {Count}',
///             columns: [
///               GridSummaryColumn(
///                   name: 'Count',
///                   columnName: 'name',
///                   summaryType: GridSummaryType.count)
///             ],
///             position: GridTableSummaryRowPosition.top),
///         GridTableSummaryRow(
///             showSummaryInRow: false,
///             columns: [
///               GridSummaryColumn(
///                   name: 'Sum',
///                   columnName: 'salary',
///                   summaryType: GridSummaryType.sum)
///             ],
///             position: GridTableSummaryRowPosition.bottom)
///       ],
///       columns: <GridColumn>[
///         GridColumn(
///             columnName: 'id',
///             label: Container(
///                 padding: EdgeInsets.all(16.0),
///                 alignment: Alignment.center,
///                 child: Text(
///                   'ID',
///                 ))),
///         GridColumn(
///             columnName: 'name',
///             label: Container(
///                 padding: EdgeInsets.all(8.0),
///                 alignment: Alignment.center,
///                 child: Text('Name'))),
///         GridColumn(
///             columnName: 'designation',
///             label: Container(
///                 padding: EdgeInsets.all(8.0),
///                 alignment: Alignment.center,
///                 child: Text(
///                   'Designation',
///                   overflow: TextOverflow.ellipsis,
///                 ))),
///         GridColumn(
///             columnName: 'salary',
///             label: Container(
///                 padding: EdgeInsets.all(8.0),
///                 alignment: Alignment.center,
///                 child: Text('Salary'))),
///       ],
///     ),
///   );
/// }
///
/// class EmployeeDataSource extends DataGridSource {
/// @override
/// Widget? buildTableSummaryCellWidget(
///     GridTableSummaryRow summaryRow,
///     GridSummaryColumn? summaryColumn,
///     RowColumnIndex rowColumnIndex,
///     String summaryValue) {
///   return Container(
///       padding: EdgeInsets.all(16.0),
///       alignment: Alignment.centerLeft,
///       child: Text(summaryValue));
/// }
/// ``` ¿ „≤Ç¿ Â≤ÅŸ/// The number of rows to show on each page.
///
/// This property is applicable only if the [SfDataPager] is used to represent
/// the paging functionality.
///
/// If you set the value as null, the rows per page is automatically decided
/// based on divided value of the number of rows loaded through [DataGridSource.rows] by [SfDataPager.pageCount].
///
/// If you want to maintain the rows per page constantly the same, set the required number of rows to this property. ¿ ÂƒÇW¿ ËÇ!/// Decides how many rows should be added with the currently visible items in viewport size.
///
/// By default, the rows which are presented in viewport will be re-used
/// when the vertical scrolling is performed for better performance.
///
/// You can set the rows cache extent to avoid the visible changes which are occurred
/// due to re-using. For example, if you are showing the checkbox in a column and
/// not set the rows using this property, checkbox state changes with the
/// animation can be seen when vertical scrolling is perform ¿ Ë"Çm¿ ÍÅÇ8/// Decides whether the UI filtering should be enabled for all the columns.
///
/// [GridColumn.allowFiltering] has the highest priority over this property.
///
/// See also,
/// * [SfDataGrid.onFilterChanging] ‚Äì This callback will be called if the
/// column is being filtered through UI filtering.
/// * [SfDataGrid.onFilterChanged] ‚Äì This callback will be called if the
/// column is filtered through UI filtering.
/// * [DataGridSource.filterConditions] ‚Äì This property holds the
/// collection of the filter conditions which are applied for various columns. ¿ ÍñÄÈ¿ ÎoÄ¶/// Called when the filtering is being applied through UI filtering.
///
/// You can return `false` from this callback to restrict the column from
/// being filtered. ¿ ÎÜÄÂ¿ Ï\Ä§/// Called after the UI filtering is applied to [SfDataGrid].
///
/// This callback will not be triggered when the filter conditions are added
/// programmatically. ¿ ÏrÄË¿ ÌMÄØ/// The shape of the checkbox.
///
/// This is applicable for checkbox which is shown when enable the [showCheckboxColumn] property.
///
/// See also,
///
/// [Checkbox.shape]  ¿ ÌaF¿ ÌÑ   ¿ Ìa¿ Ìb ¿ ÌÆ¿ ‹”¿ ÓKÄì/// Contains the state for a [SfDataGrid]. This class can be used to
/// programmatically show the refresh indicator, see the [refresh]
/// method.  ¿ Ó£%¿ Ó∑ ¿ Ó√¿ ÓÕ&¿ Ó· ¿ ÓÓ¿ Ó¯%¿ Ô ¿ Ô¿ Ô"+¿ Ô6 ¿ ÔI¿ ÔT¿ Ôf  ¿ Ôx%¿ Ôì  ¿ Ô¢1¿ ÔΩ  ¿ Ôÿ0¿ ÔÌ  ¿ 5¿ 6  ¿ I0¿ W ¿ h¿ u¿ v¿ ~'¿ ì  ¿ ™)¿ ø  ¿ ÿ¿ È  ¿ ¸¿ Ò  ¿ Ò¿ Ò*  ¿ Ò7*¿ ÒM  ¿ Òf¿ Òz  ¿ Òä$¿ Òù  ¿ Ò≥+¿ Ò…  ¿ ÒÂ¿ ÒÎ   )¿ Ò˝É¿ Ú   ¿ Ò˝¿ Ò˛¿ ıÅG¿ ı  ¿ ı7¿ ıG   ¿ ˆ_Ñ¿ ˆd  ¿ ˆà!¿ ˆû  ¿ ˆ´¿ ˆπ   ¿ ˙ÄÜN¿ ˙Ö  ¿ ˙ß¿ ˙Ø   ¿ ‘Å?¿ Ÿ  ¿ ˘ ¿
   ¿Ç¿    ¿&á˘¿+    ¿%r¿8   ¿%¿&¿ùÅπ¿∞  ¿  ¿–  ¿ù¿û¿Â¿\É¿a  ¿v¿Ö   ¿~Éë¿É    ¿Å®¿    ¿√É¿¿»    ¿âà»¿é  ¿°¿±   ¿#Wn¿#\  ¿#i¿#w   ¿#ÀÜl¿#–  ¿#Ê¿#Î   ¿*=ã¿*B    ¿5≥Ü,¿5∏  ¿5œ'¿5’  ¿5Ò¿;ÂÄ§¿;Í    ¿<èÜ¿<î    ¿BØÉ¿B¥  ¿B¬¿B»  ¿B÷¿Eº?¿E¡    ¿FÄÊ¿F  ¿F¿F/   ¿FÌâx¿FÚ  ¿G"¿G3  ¿GI¿GR  ¿Gf!¿Gl  ¿GÇ¿PkíH¿Pp    ¿bπX¿bœ    ¿cπ5¿c  ¿c.¿c:   ¿úRÅë¿úW  ¿úÄ¿úë  ¿úß¿ú∞  ¿úƒ!¿ú   ¿ú‡¿ùÈÖ"¿ùÓ  ¿û	¿û  ¿û'&¿û-  ¿ûV%¿û\  ¿ûÑ¿ûä  ¿û© ¿ûØ  ¿ûH¿ûv¿ûõ¿ûƒ¿£Ö>¿£  ¿£B¿£N  ¿£X¿£d   ¿®UÅn¿®Z    ¿©…Å_¿©Œ    ¿´.Åœ¿´3    ¿≠Ä¸¿≠    ¿ÆÅ¿Æ
    ¿ØÅ«¿ØbF/// Need to add the check box column, when showCheckboxColumn is true. ¿Øu+¿Øå   ¿∞‡ÉŸ¿≥:Ç'/// Show the refresh indicator and call the
/// [DataGridSource.handleRefresh].
///
/// To access this method, create the [SfDataGrid] with a
/// [GlobalKey<SfDataGridState>].
///
/// The future returned from this method completes when the
/// [DataGridSource.handleRefresh] method‚Äôs future completes.
///
/// By default, if you call this method without any parameter,
/// [RefreshIndicator] will be shown. If you want to disable the
/// [RefreshIndicator] and call the [DataGridSource.handleRefresh] method
/// alone, pass the parameter as `false`. ¿≥C ¿≥I  ¿≥_¿¥øá¿¿¥—   ¿¥ø¿¥¿¿ºÖÄà¿ºó  ¿ºß¿º≥  ¿ºÖ¿ºÜ¿ΩÖú¿Ω'  ¿Ω-¿Ω;  ¿Ω¿Ω¿¬µá…¿¬«   ¿¬µ¿¬∂ ¿ Ö¿ x±¿–tÖ∑/// A datasource for obtaining the row data for the [SfDataGrid].
///
/// The following APIs are mandatory to process the data,
/// * [rows] - The number of rows in a datagrid and row selection depends
/// on the [rows]. So, set the collection required for datagrid in
/// [rows].
/// * [buildRow] - The data needed for the cells is obtained from
/// [buildRow].
///
/// Call the [notifyDataSourceListeners] when performing CRUD in the underlying
/// datasource.
///
/// [DataGridSource] objects are expected to be long-lived, not recreated with
/// each build.
/// ``` dart
/// final List<Employee> _employees = <Employee>[];
///
/// class EmployeeDataSource extends DataGridSource {
///   @override
///   List<DataGridRow> get rows => _employees
///       .map<DataGridRow>((dataRow) => DataGridRow(cells: [
///             DataGridCell<int>(columnName: 'id', value: dataRow.id),
///             DataGridCell<String>(columnName: 'name', value: dataRow.name),
///             DataGridCell<String>(
///                 columnName: 'designation', value: dataRow.designation),
///             DataGridCell<int>(columnName: 'salary', value: dataRow.salary),
///           ]))
///       .toList();
///
///   @override
///   DataGridRowAdapter? buildRow(DataGridRow row) {
///     return DataGridRowAdapter(
///         cells: row.getCells().map<Widget>((dataCell) {
///           return Text(dataCell.value.toString());
///         }).toList());
///   }
/// }
/// ```  ¿’ä2¿’ú ¿’∫¿’ª¿’≠¿’π¿’Æ¿’√1¿’’ ¿’Ú¿’Û¿’Â¿’Ò¿’Ê¿’˚Ää¿÷eT/// Holds the collection of [DataGridRow] to be displayed in the [SfDataPager] page.¿÷É¿÷Ñ¿÷v¿÷Ç¿÷w¿÷å}¿÷ÍR/// Helps to suspend the multiple update on SfDataGrid using with
/// SfDataPager.¿◊¿◊+¿◊&  ¿◊Be¿◊k 	¿◊•¿◊¶¿◊Ü¿◊§¿◊á¿◊è¿◊ì¿◊£¿◊î¿Ë"D¿Ë@ ¿Ëd¿Ëe¿ËQ¿Ëc¿ËR¿–…Ä©¿—Pg/// The collection of rows to display in [SfDataGrid].
///
/// This must be non-null, but may be empty.   ¿‘Åt¿’dÅ./// Return the copy of the [DataGridSource.rows].
/// It holds the sorted collection if the sorting is applied in DataGrid.
///
/// Use this property to get the corresponding visible row index to perform the customization
/// such as alternate row color, setting row color based on row index and so on.   ¿◊ÆÅ◊¿Ÿ'Å9/// Holds the collection of [FilterCondition] based on the columns.
///
/// Here, key is the name of the column. Value is the collection of filter
/// conditions.
///
/// Use [DataGridSource.addFilterCondition] and
/// [DataGridSource.removeFilterCondition] to add or remove the filter
/// conditions for columns.   ¿‡vá®¿Á˛Ü⁄/// The collection of [SortColumnDetails] objects to sort the columns in
/// [SfDataGrid].
///
/// You can use this property to sort the columns programmatically also.
/// Call [sort] method after you added the column details in [sortedColumns]
/// programmatically.
///
/// The following example show how to sort the columns on datagrid  loading,
///
/// ```dart
/// @override
/// Widget build(BuildContext context) {
///   return Scaffold(
///     appBar: AppBar(
///       title: const Text('Syncfusion Flutter DataGrid'),
///     ),
///     body: Column(
///       children: [
///         TextButton(
///           child: Text('Click'),
///           onPressed: () {
///             _employeeDataSource.sortedColumns
///                 .add(SortColumnDetails('id', SortDirection.ascending));
///             _employeeDataSource.sort();
///           },
///         ),
///         SfDataGrid(
///           source: _employeeDataSource,
///           allowSorting: true,
///           columns: <GridColumn>[
///               GridColumn(columnName: 'id', label: Text('ID')),
///               GridColumn(columnName: 'name', label: Text('Name')),
///               GridColumn(columnName: 'designation', label: Text('Designation')),
///               GridColumn(columnName: 'salary', label: Text('Salary')),
///           ],
///         ),
///       ],
///     ),
///   );
/// }
///```
/// See also:
///
/// * [SfDataGrid.allowSorting] ‚Äì which allows users to sort the columns in
/// [SfDataGrid].
/// * [GridColumn.allowSorting] - which allows users to sort the corresponding
/// column in [SfDataGrid].
/// * [DataGridSource.sort] - call this method when you are adding the
/// [SortColumnDetails] programmatically to [DataGridSource.sortedColumns].   ¿—xÇí¿”Ç>/// Called to obtain the widget for each cell of the row.
///
/// This method will be called for every row that are visible in datagrid‚Äôs
/// view port from the collection which is assigned to [DataGridSource.rows]
/// property.
///
/// Return the widgets in the order in which those should be displayed in
/// each column of a row in [DataGridRowAdapter.cells].
///
/// The number of widgets in the collection must be exactly as many cells
/// as [SfDataGrid.columns] in the [SfDataGrid].
///
/// This method will be called whenever you call the [notifyListeners] method. ¿”˘¿‘   ¿ŸãÜÂ¿‡7Ü /// Called whenever you call [notifyListeners] or [notifyDataSourceListeners]
/// in the DataGridSource class. If you want to recalculate all columns
/// width (may be when underlying data gets changed), return true.
///
/// Returning true may impact performance as the column widths are
/// recalculated again (whenever the notifyListeners is called).
///
/// If you are aware that column widths are going to be same whenever
/// underlying data changes, return 'false' from this method.
///
/// Note: Column widths will be recalculated automatically whenever a new
/// instance of DataGridSource is assigned to SfDataGrid.
/// ``` dart
/// class EmployeeDataSource extends DataGridSource {
///   @override
///   List<DataGridRow> get rows => _employees
///       .map<DataGridRow>((dataRow) => DataGridRow(cells: [
///             DataGridCell<int>(columnName: 'id', value: dataRow.id),
///             DataGridCell<String>(columnName: 'name', value: dataRow.name),
///             DataGridCell<String>(
///                 columnName: 'designation', value: dataRow.designation),
///             DataGridCell<int>(columnName: 'salary', value: dataRow.salary),
///           ]))
///       .toList();
///
///   @override
///   bool shouldRecalculateColumnWidths() {
///     return true;
///   }
///
///   @override
///   DataGridRowAdapter? buildRow(DataGridRow row) {
///     return DataGridRowAdapter(
///         cells: row.getCells().map<Widget>((dataCell) {
///           return Text(dataCell.value.toString());
///         }).toList());
///   }
/// }
///
/// ```  ¿‡$¿‡%¿ËmÖ¿Ï≠ÉÒ/// Called when the sorting is applied to the column.
///
/// Overriding this method gives complete control over sorting. You can handle
/// the sorting completely in your own way. The rows argument provides the
/// unsorted [DataGridRow] collection.
///
/// You can apply the sorting to rows argument. DataGrid will render the rows
/// based on the [rows] argument. You don‚Äôt need to call [notifyListeners]
/// within this method. However, you must override this method only if you
/// want to write the entire sorting logic by yourself. Otherwise, for custom
/// comparison, you can just override [DataGridSource.compare] method and
/// return the custom sorting order.
///
/// For most of your cases, the 'compare' method should be sufficient.
/// The [DataGridSource.compare] method can be used to do custom sorting based
/// on the length of the text, case insensitive sorting, and so on.
///
/// See also,
///
/// [DataGridSource.compare] ‚Äì To write the custom sorting for most of the use
/// cases. ¿Ïº¿Ïœ  ¿Ïö¿Ïõ¿ÌÑÅ˜¿ÓåÄ˘/// To update the sorted or filtered collection in _paginatedRows, notifyListener should be
/// called instead notifyDataGridPropertyChangeListener. Because, notifyListener is common for
/// in DataPagerDelegate and DataGridSource will get notified.   ¿ÔÅÉ¿ÔÖ  ¿Ôú%¿Ôµ  ¿Ô√¿Ô–  ¿Ô“¿Ôﬂ   ¿Ú°å™¿˝Dâ /// Called when the sorting is applied for column. This method compares the
/// two objects and returns the order either they are equal, or one is
/// greater than or lesser than the other.
///
/// You can return the following values,
/// * a negative integer if a is smaller than b,
/// *	zero if a is equal to b, and
/// *	a positive integer if a is greater than b.
///
/// You can override this method and do the custom sorting based
/// on your requirement. Here [sortColumn] provides the details about the
/// column which is currently sorted with the sort direction. You can get the
/// currently sorted column and do the custom sorting for specific column.
///
///
/// The below example shows how to sort the `name` column based on the case
/// insensitive in ascending or descending order.
///
/// ```dart
/// class EmployeeDataSource extends DataGridSource {
///   @override
///   List<DataGridRow> get rows => _employees
///       .map<DataGridRow>((dataRow) => DataGridRow(cells: [
///             DataGridCell<int>(columnName: 'id', value: dataRow.id),
///             DataGridCell<String>(columnName: 'name', value: dataRow.name),
///             DataGridCell<String>(
///                 columnName: 'designation', value: dataRow.designation),
///             DataGridCell<int>(columnName: 'salary', value: dataRow.salary),
///           ]))
///       .toList();
///
///   @override
///   DataGridRowAdapter? buildRow(DataGridRow row) {
///     return DataGridRowAdapter(
///         cells: row.getCells().map<Widget>((dataCell) {
///           return Text(dataCell.value.toString());
///         }).toList());
///   }
///
///  @override
///   int compare(DataGridRow? a, DataGridRow? b, SortColumnDetails sortColumn) {
///    if (sortColumn.name == 'name') {
///      final String? valueA = a
///          ?.getCells()
///          .firstWhereOrNull((dataCell) => dataCell.columnName == 'name')
///          ?.value;
///      final String? valueB = b
///          ?.getCells()
///          .firstWhereOrNull((dataCell) => dataCell.columnName == 'name')
///          ?.value;
///
///      if (valueA == null || valueB == null) {
///        return 0;
///      }
///
///      if (sortColumn.sortDirection == DataGridSortDirection.ascending) {
///        return valueA.toLowerCase().compareTo(valueB.toLowerCase());
///      } else {
///        return valueB.toLowerCase().compareTo(valueA.toLowerCase());
///      }
///    }
///
///    return super.compare(a, b, sortColumn);
///  }
///
/// ``` ¿˝L¿˝Z  ¿˝\¿˝j  ¿˝l¿˝  ¿˝2¿˝3¿ˇQÅÙ¿ˇU  ¿ˇh¿ˇq  ¿ˇx¿ˇÅ  ¿ˇà#¿ˇü   ¿KÉ¿P    ¿iÖf¿	bÑä/// Call this method when you are adding the [SortColumnDetails]
/// programmatically to the [DataGridSource.sortedColumns].
///
/// ```dart
/// @override
/// Widget build(BuildContext context) {
///   return Scaffold(
///     appBar: AppBar(
///       title: const Text('Syncfusion Flutter DataGrid'),
///     ),
///     body: Column(
///       children: [
///         FlatButton(
///           child: Text('Click'),
///           onPressed: () {
///             _employeeDataSource.sortedColumns
///                 .add(SortColumnDetails('id', SortDirection.ascending));
///             _employeeDataSource.sort();
///           },
///         ),
///         SfDataGrid(
///           source: _employeeDataSource,
///           allowSorting: true,
///           columns: <GridColumn>[
///               GridColumn(columnName: 'id', label:Text('ID')),
///               GridColumn(columnName: 'name', label:Text('Name')),
///               GridColumn(columnName: 'designation', label: Text('Designation')),
///               GridColumn(columnName: 'salary', label: Text('Salary')),
///           ],
///         ),
///       ],
///     ),
///   );
/// }
/// ```   ¿	’Ä‹¿
äÄô/// An indexer to retrieve the data from the underlying datasource. If the
/// sorting is applied, the data will be retrieved from the sorted datasource. ¿
ç	¿
í   ¿
∑Å€¿uÅÅ/// Called when [LoadMoreRows] function is called from the
/// [SfDataGrid.loadMoreViewBuilder].
///
/// Call the [notifyListeners] to refresh the datagrid based on current
/// available rows.
///
/// See also,
///
/// [SfDataGrid.loadMoreViewBuilder] - A builder that sets the widget to
/// display at end of the datagrid when end of the datagrid is reached on
/// vertical scrolling.  ¿Z¿[¿òÅW¿◊Å/// Called when the `swipe to refresh` is performed in [SfDataGrid].
///
/// This method will be called only if the
/// [SfDataGrid.allowPullToRefresh] property returns true.
///
/// Call the [notifyListeners] to refresh the datagrid based on current
/// available rows.  ¿º¿Ω¿ıÖL¿§É^/// Call this method to add the [FilterCondition] programmatically.
///
/// ```dart
/// @override
/// Widget build(BuildContext context) {
///   return Column(
///     children: [
///       Expanded(
///         child: SfDataGrid(source: _employeeDataSource, columns: [
///           GridColumn(columnName: 'id', label: Text('ID')),
///           GridColumn(columnName: 'name', label: Text('Name')),
///           GridColumn(columnName: 'designation', label: Text('Designation')),
///           GridColumn(columnName: 'salary', label: Text('Salary')),
///         ]),
///       ),
///       MaterialButton(
///           child: Text('Add Filter'),
///           onPressed: () {
///             _employeeDataSource.addFilter('id',
///                 FilterCondition(type: FilterType.greaterThan, value: 1005));
///           }),
///     ],
///   );
/// }
/// ``` ¿Æ¿∂  ¿¡¿“   ¿GÖÓ¿ÉX/// Remove the [FilterCondition] from the given column.
///
/// ```dart
/// @override
/// Widget build(BuildContext context) {
///   return Column(
///     children: [
///       Expanded(
///         child: SfDataGrid(source: _employeeDataSource, columns: [
///           GridColumn(columnName: 'id', label: Text('ID')),
///           GridColumn(columnName: 'name', label: Text('Name')),
///           GridColumn(columnName: 'designation', label: Text('Designation')),
///           GridColumn(columnName: 'salary', label: Text('Salary')),
///         ]),
///       ),
///       MaterialButton(
///           child: Text('Remove Filter'),
///           onPressed: () {
///             _employeeDataSource.removeFilter('name',
///                 FilterCondition(type: FilterType.equals, value: 'James'));
///           }),
///     ],
///   );
/// }
/// ``` ¿˝¿  ¿¿!   ¿;Ü¿7É¢/// Clear the [FilterCondition] from a given column or clear all the filter
/// conditions from all the columns.
///
/// Pass the required [columnName] to remove the filter conditions from the
/// specific column.
///
/// ```dart
/// @override
/// Widget build(BuildContext context) {
///   return Column(
///     children: [
///       Expanded(
///         child: SfDataGrid(source: _employeeDataSource, columns: [
///           GridColumn(columnName: 'id', label: Text('ID')),
///           GridColumn(columnName: 'name', label: Text('Name')),
///           GridColumn(columnName: 'designation', label: Text('Designation')),
///           GridColumn(columnName: 'salary', label: Text('Salary')),
///         ]),
///       ),
///       MaterialButton(
///           child: Text('Clear Filters'),
///           onPressed: () {
///             _employeeDataSource.clearFilters();
///           }),
///     ],
///   );
/// }
/// ``` ¿E¿N   ¿DÅ¿I  ¿X+¿o   ¿ …äV¿*éâ/// Called to obtain the widget when a cell is moved into edit mode.
///
/// The following example shows how to override this method and return the
/// widget for specific column.
///
/// ```dart
///
/// TextEditingController editingController = TextEditingController();
///
/// dynamic newCellValue;
///
/// @override
/// Widget? buildEditWidget(DataGridRow dataGridRow,
///     RowColumnIndex rowColumnIndex, GridColumn column,
///     CellSubmit submitCell) {
///   // To set the value for TextField when cell is moved into edit mode.
///   final String displayText = dataGridRow
///       .getCells()
///       .firstWhere((DataGridCell dataGridCell) =>
///   dataGridCell.columnName == column.columnName)
///       .value
///       ?.toString() ??
///       '';
///
///   /// Returning the TextField with the numeric keyboard configuration.
///   if (column.columnName == 'id') {
///     return Container(
///         padding: const EdgeInsets.all(8.0),
///         alignment: Alignment.centerRight,
///         child: TextField(
///           autofocus: true,
///           controller: editingController..text = displayText,
///           textAlign: TextAlign.right,
///           decoration: const InputDecoration(
///               contentPadding: EdgeInsets.all(0),
///               border: InputBorder.none,
///               isDense: true),
///           inputFormatters: [
///             FilteringTextInputFormatter.allow(RegExp('[0-9]'))
///           ],
///           keyboardType: TextInputType.number,
///           onChanged: (String value) {
///             if (value.isNotEmpty) {
///               print(value);
///               newCellValue = int.parse(value);
///             } else {
///               newCellValue = null;
///             }
///           },
///           onSubmitted: (String value) {
///             /// Call [CellSubmit] callback to fire the canSubmitCell and
///             /// onCellSubmit to commit the new value in single place.
///             submitCell();
///           },
///         ));
///   }
/// }
/// ```
/// Call the cellSubmit function whenever you are trying to save the cell
/// values. When you call this method, it will call [canSubmitCell] and
/// [onCellSubmit] methods. So, your usual cell value updation will be done
/// in single place. ¿*û¿*´  ¿*æ¿*Œ  ¿*›¿*È  ¿*¿*¸   ¿+%Ç•¿-PÇ/// Called whenever the cell is moved into edit mode.
///
/// If you want to disable editing for the cells in specific scenarios,
/// you can return false.
///
/// [rowColumnIndex] represents the index of row and column which are
/// currently in view not based on the actual index. If you want to get the
/// actual row index even after sorting is applied, you can use
/// `DataGridSource.rows.indexOf` method and pass the [dataGridRow]. It will
/// provide the actual row index from unsorted [DataGridRow] collection. ¿-`¿-m  ¿-y¿-â  ¿-ü¿-´   ¿-–Ü≤¿4!Ö“/// Called whenever the cell‚Äôs editing is completed.
///
/// Typically, this will be called whenever the [notifyListeners] is called
/// when cell is in editing mode and key navigation is performed to move a
/// cell to another cell from the cell which is currently editing.
/// For eg, Enter key, TAB key and so on.
///
/// The following example show how to override this method and save the
/// currently edited value for specific column.
///
/// ``` dart
/// @override
/// void onCellSubmit(DataGridRow dataGridRow, RowColumnIndex rowColumnIndex,
///     GridColumn column) {
///   final dynamic oldValue = dataGridRow
///       .getCells()
///       .firstWhereOrNull((DataGridCell dataGridCell) =>
///   dataGridCell.columnName == column.columnName)
///       ?.value ??
///       '';
///
///   final int dataRowIndex = rows.indexOf(dataGridRow);
///
///   if (newCellValue == null || oldValue == newCellValue) {
///     return;
///   }
///
///   if (column.columnName == 'id') {
///     rows[dataRowIndex].getCells()[rowColumnIndex.columnIndex] =
///         DataGridCell<int>(columnName: 'id', value: newCellValue);
///
///     // Save the new cell value to model collection also.
///     employees[dataRowIndex].id = newCellValue as int;
///   }
///
///   // To reset the new cell value after successfully updated to DataGridRow
///   //and underlying mode.
///   newCellValue = null;
/// }
///```
/// This method will never be called when you return false from [onCellBeginEdit]. ¿4.¿4;  ¿4G¿4W  ¿4m¿4y   ¿4àÅØ¿5øÅ!/// Called whenever the cell‚Äôs editing is completed i.e. prior to
/// [onCellSubmit] method.
///
/// If you want to restrict the cell from being end its editing, you can
/// return false. Otherwise, return true. [onCellSubmit] will be called only
/// if the [canSubmitCell] returns true. ¿5Õ¿5⁄  ¿5Ê¿5ˆ  ¿6¿6   ¿6=ÄÏ¿6ƒ{/// Called when you press the [LogicalKeyboardKey.escape] key when
/// the [DataGridCell] on editing to cancel the editing. ¿6’¿6‚  ¿6Ó¿6˛  ¿7¿7    ¿7/Ñ|¿7I  ¿7Z¿7_  ¿7l¿7q  ¿7/¿70¿;±Ñ◊¿<«Ä¸/// Calculates the summary value for the table summary row of a specific column.
///
/// Override this method to write the custom logic to calculate the custom
/// summary.
///
/// The `summaryColumn` will be null for the spanned table summary columns. ¿<›¿<Ú  ¿= ¿=  ¿=&¿=6   ¿@éÇ•¿BlÅ∫/// Called to obtain the widget for each cell of the table summary row.
///
/// Typically, a [Text] widget. `summaryValue` argument holds the calculated
/// summary value based on [GridSummaryColumn.summaryType]. Use this
/// `summaryValue` argument and display in your required widget.
///
/// This method will be called for visible cells in table summary rows.
///
/// The `summaryColumn` will be null for the spanned table summary columns. ¿Bê¿B•  ¿B∑ ¿BÀ  ¿B‡¿B  ¿C¿C    ¿EU∞H¿FªÅW/// Controls a [SfDataGrid] widget.
///
/// This can be used to control the selection and current-cell operations such
/// as programmatically select a row or rows, move the current-cell to
/// required position.
///
/// DataGrid controllers are typically stored as member variables in [State]
/// objects and are reused in each [State.build]. ¿F¯ÅÈ ¿Gc¿Gud/// Creates the [DataGridController] with the [selectedIndex], [selectedRow]
/// and [selectedRows].¿G¿GÑ  ¿Gû¿G¨  ¿Gø6¿G“  ¿Gì¿Gî¿G‡¿GÛ¿GÙ¿GÊ¿GÚ¿GÁ¿H¿H¿H¿H5¿H&¿H7¿H]¿HO¿H_¿Hk¿Hl¿Hr¿Hs¿HÁ+¿H˝  ¿I≈;¿I◊ ¿IÁ¿IÎ¿I˜¿IÏ¿I¯¿I˘¿I˛¿Iˇ¿K–¿K‘  ¿Ot¿OÅ  ¿Qá¿Qì  ¿R¿R(  ¿VL2¿V[ ¿Vj¿Vx¿Vy
¿IÄ®¿I£m/// The collection of objects that contains object of corresponding
/// to the selected rows in [SfDataGrid].   ¿JÅd¿Jm/// The collection of objects that contains object of corresponding
/// to the selected rows in [SfDataGrid]. ¿Jå!¿Jü   ¿Kq[¿K¨//// An index of the corresponding selected row.   ¿KÈ|¿L1;/// Whether the currently selected cell is in editing mode.   ¿MÖÅ¿Mº//// An index of the corresponding selected row. ¿M ¿Mœ   ¿NßÄ…¿OTÄè/// An object of the corresponding selected row.
///
/// The given object must be given from the underlying datasource of the
/// [SfDataGrid].   ¿OîÅÄ¿P4Äè/// An object of the corresponding selected row.
///
/// The given object must be given from the underlying datasource of the
/// [SfDataGrid]. ¿P@¿PN   ¿Qi¿Qa8/// The current scroll offset of the vertical scrollbar.   ¿Q©o¿QÚ:/// The current scroll offset of the horizontal scrollbar.   ¿UâÄø¿V,ÄÉ/// A cell which is currently active.
///
/// This is used to identify the currently active cell to process the
/// key navigation.   
¿LkÅ¿Lp    ¿R@ÉC¿TÄÇ///If the [rowIndex] alone is given, the entire row will be set as dirty.
///So, data which is displayed in a row will be refreshed.
/// You can call this method when the data is updated in row in
///  underlying datasource.
///
/// If the `recalculateRowHeight` is set as true along with the [rowIndex],
/// [SfDataGrid.onQueryRowHeight] callback will be called for that row.
///  So, the row height can be reset based on the modified data.
///  This is useful when setting auto row height
/// using [SfDataGrid.onQueryRowHeight] callback. ¿Tã¿Tê  ¿Tö!¿T†  ¿T∂¿VÖÖ#¿VÀ=/// Moves the current-cell to the specified cell coordinates. ¿V›¿VÌ   ¿[Æç¿]|Å®/// Scrolls the [SfDataGrid] to the given row and column index.
///
/// If you want animation on scrolling, you can pass true as canAnimate argument.
///
/// Also, you can control the position of a row when it comes to view by
/// passing the [DataGridScrollPosition] as an argument for rowPosition where
/// as you can pass [DataGridScrollPosition] as an argument for columnPosition
/// to control the position of a column. ¿]â¿]ë  ¿]ö¿]¢  ¿]∂¿]º  ¿]÷A¿]Ó  ¿^ O¿^8  ¿]»¿]˚¿^¿^¿^S¿^i¿^j¿h”Ç+¿jÅ/// Scrolls the [SfDataGrid] to the given index.
///
/// If you want animation on scrolling, you can pass true as canAnimate argument.
///
/// Also, you can control the position of a row when it comes to view by passing
/// the [DataGridScrollPosition] as an argument for position. ¿j¿j   ¿j1¿j7  ¿jQ>¿ji  ¿jC¿js¿jâ¿jä¿kÇ>¿lDÅ /// Scrolls the [SfDataGrid] to the given column index.
///
/// If you want animation on scrolling, you can pass true as canAnimate argument.
///
/// Also, you can control the position of a row when it comes to view by passing
/// the [DataGridScrollPosition] as an argument for position. ¿lS¿l[  ¿lo¿lu  ¿lè>¿lß  ¿lÅ¿l±¿l«¿l»¿mHÅ›¿n Ä°/// Scroll the vertical scrollbar from current position to the given value.
///
/// If you want animation on scrolling, you can pass true as canAnimate argument. ¿n¿n  ¿n.¿n4  ¿n@¿o+Å‡¿o‚Ä†/// Scroll the horizontal scrollbar from current value to the given value.
///
/// If you want animation on scrolling, you can pass true as canAnimate argument. ¿o˚¿p  ¿p¿p  ¿p$¿qÇq¿q\B/// Begins the edit to the given [RowColumnIndex] in [SfDataGrid]. ¿qf¿qv   ¿sàÇ¿s»7/// Ends the current editing of a cell in [SfDataGrid].    ¿u°Ñj¿xzÇª/// A delegate that provides the row count details and method to listen the
/// page navigation in [SfDataPager].
///
/// The following code initializes the data source and controller.
///
/// ```dart
/// finalList<Employee>paginatedDataTable=<Employee>[];
/// ```
///
/// The following code example shows how to initialize the [DataPagerDelegate].
///
/// ```dart
/// class PaginatedDataGridSource extends DataPagerDelegate{
/// @override
/// Future<bool> handlePageChange(int oldPageIndex, int newPageIndex) async {
///  _paginatedData = paginatedDataTable
///    .getRange(startRowIndex, endRowIndex )
///    .toList(growable: false);
///  notifyListeners();
///  return true;
/// }
/// }
/// ```  ¿xëR¿x’9/// Number of pages to be displayed in the [SfDataPager].¿x‚ ¿xÍÅ¿yµÄ±/// Called when the page is navigated.
///
/// Return true, if the navigation should be performed. Otherwise, return
/// false to disable the navigation for specific page index. ¿y∆¿yÀ  ¿yÿ¿y›    ¿zà4¿zdM/// A class that can be provided the change notification to the [SfDataGrid].  ¿zùu¿z… ¿zÎ¿z˜¿{¿z¯¿{¿{¿|Äî¿|P ¿|z¿|Ü¿|¶¿|á¿|ß¿|® ¿{u¿{  ¿{9 ¿{R   ¿{î{¿{ô  ¿{∑ ¿{–   ¿|∞Äï¿|µ  ¿|‡(¿}   ¿}KÄõ¿}P  ¿}~(¿}ü   ¿}ÏH¿}˛   ¿}Ï¿}Ì¿~:ÅË¿gÅ/// Calls all the datagrid source listeners.
/// Call this method whenever the underlying data is added or removed. If the value of the specific cell is updated, call this method with RowColumnIndex argument where it refers the corresponding row and column index of the cell. ¿Ç¿ì  ¿T¿U¿Ä(Ç¿Ä∑ÄÜ/// Call this method whenever the rowColumnIndex, propertyName and recalculateRowHeight of the underlying data are updated internally. ¿ÄÁ¿Ä¯  ¿Å¿Å  ¿Å+!¿Å1  ¿ÅG ¿íªñÌ¿íÃ	/// To Do ¿íÂà® ¿íÙ¿ì	/// To Do¿ì&¿ì&  ¿ì8¿ìF   ¿õì&¿õØ///To do ¿õ„¿õÓ  ¿ú %¿ú	/// To do ¿ú,.¿úG	/// To do ¿úa(¿ú{	/// To do ¿úê=¿úΩ	/// To do ¿ú‘.¿úÔ	/// To do ¿ù	-¿ù#	/// To do ¿ù='¿ùW	/// To do ¿ùk*¿ùÖ	/// To do ¿ùú.¿ù∑	/// To do ¿ù—4¿ùÎ	/// To do ¿û;¿û'	/// To do ¿ûN'¿ûh	/// To do ¿û|/¿ûö	/// To do ¿û≤$¿ûŒ	/// To do ¿û›áœ¿¶¢á/// The icon to indicate the filtering applied in column.
///
/// If you want to change the icon filter or filtered state, you can use the [Builder]
/// widget and return the respective icon for the state. You have to return
/// the icons for both the states even if you want to change the icon
/// for specific state.
///
/// ```dart
/// @override
/// Widget build(BuildContext context) {
///   return Scaffold(
///     appBar: AppBar(
///       title: const Text('Syncfusion Flutter DataGrid',
///           overflow: TextOverflow.ellipsis),
///     ),
///     body: SfDataGridTheme(
///       data: SfDataGridThemeData(filterIcon: Builder(
///         builder: (context) {
///           Widget? icon;
///           String columnName = '';
///           context.visitAncestorElements((element) {
///             if (element is GridHeaderCellElement) {
///               columnName = element.column.columnName;
///             }
///             return true;
///           });
///           var column = _employeeDataSource.filterConditions.keys
///               .where((element) => element == columnName)
///               .firstOrNull;
///           if (column != null) {
///             icon = const Icon(
///               Icons.filter_alt_outlined,
///               size: 20,
///               color: Colors.purple,
///             );
///           }
///           return icon ??
///               const Icon(
///                 Icons.filter_alt_off_outlined,
///                 size: 20,
///                 color: Colors.deepOrange,
///               );
///         },
///       )),
///       child: SfDataGrid(
///         source: _employeeDataSource,
///         allowFiltering: true,
///         allowSorting: true,
///         columns: getColumns(),
///       ),
///     ),
///   );
/// }
/// ``` ¿¶≥Ä˘¿ßùÄ—/// The color of the filter icon which indicates whether the column is filtered or not.
///
/// This is not applicable when `filterIcon` property is set.
/// This applies the color to default filter icon only. ¿ß≥ÄÏ¿®ãÄø/// The color for the filter icon when a pointer is hovering over it.
///
/// This is not applicable when `filterIcon` property is set.
/// This applies the color to default filter icon only. ¿®¶q¿©M/// The color of the number displayed when the order of the sorting is shown. ¿©ÄÜ¿©ÜX/// Creates a copy of this theme but with the given fields replaced with the new values.        ¿C:ÄΩ¿CÇA/// Refreshes the effective rows based on the given `filterRows`. ¿Có¿Cß  ¿CÆ¿C¡   ¿C˚Äﬁ¿Dwt/// Apply sorting to the given rows. It is used to invoke the
/// `DataGridSource.performSorting` method internally. ¿DÜ¿Dñ  ¿Dù¿D∞   ¿D›t¿E$/// Helps to refresh the data pager. ¿E¿E(   ¿ÇGÅÌ¿ÇŸÄä/// Call this method whenever the rowColumnIndex, propertyName and recalculateRowHeight of the
/// underlying data are updated internally. ¿Çˇ¿É  ¿É¿É-  ¿ÉA¿ÉJ  ¿É\!¿Éb  ¿Éx¿Ñ8Ä™¿Ñá@/// Invokes the `handleLoadMoreRows` method in [DataGridSource]. ¿Ñö¿Ñ™   ¿ÑÊÄõ¿Ö0;/// Invokes the `handleRefresh` method in [DataGridSource]. ¿Ö>¿ÖN   ¿ÖÖ}¿Ö∑+/// Refreshes the current [DataGridSource]. ¿Ö»¿Öÿ   ¿ÜÅ¿ÜQ7/// Gets the `effectiveRows` from the [DataGridSource]. ¿Ü_¿Üo   ¿áÑ ¿áT2/// Helps to set the page count in DataGridSource. ¿áa¿át  ¿á}¿áÖ   ¿ãÄ‘¿ãuO/// Sets the given selected index to the controller's `selectedIndex` property. ¿ãâ¿ãù  ¿ã®¿ã≠   ¿ã˜Ä€¿åMO/// Updates the given [DataGridRow] to the controller's `selectedRow` property. ¿åe¿åy  ¿åÑ¿åí   ¿å÷Ä‰¿ç$G/// Updates the given index to the controller's `currentCell` property. ¿çA¿çU  ¿ç`"¿çp   ¿çæÄ¡¿éK/// Updates the given offset to the controller's `verticalOffset` property. ¿é%¿é9  ¿éD¿éL   ¿éÉÄ«¿é◊M/// Updates the given offset to the controller's `horizontalOffset` property. ¿éÓ¿è  ¿è¿è   ¿èNÄÂ¿èõF/// Sets the `childColumnIndexes` property in the [StackedHeaderCell]. ¿è∑#¿è   ¿è‹¿èÁ   ¿ê7Ä«¿êéK/// Helps to get the child column indexes of the given `StackedHeaderCell`. ¿ê§#¿ê∑   ¿ëÄÏ¿ëOF/// Call this method to add the [FilterCondition] in the UI filtering. ¿ëc¿ës  ¿ëz¿ëÇ  ¿ëí ¿ë©   ¿ëÚÄ≈¿íBI/// Call this method to remove the [FilterCondition] in the UI filtering. ¿íY¿íi  ¿íp¿íx    Ç’ÄÖÉ8/// Signature for [SfDataGrid.onQueryRowHeight] callback  É@ÉR   É^Ä≤É§</// Signature for [SfDataGrid.onSelectionChanging] callback.  É‘ÉÁ  ÉÒÑ   ÑÄ∞ÑY;/// Signature for [SfDataGrid.onSelectionChanged] callback.  ÑàÑõ  Ñ•Ñ∏   Ñ»Ä¬Ö@/// Signature for [SfDataGrid.onCurrentCellActivating] callback.  ÖF ÖV  Öh Öx   ÖéÄ¿Ö◊?/// Signature for [SfDataGrid.onCurrentCellActivated] callback.  Ü
 Ü  Ü, Ü<   ÜRÄÆÜ∏[/// Signature for [SfDataGrid.onCellTap] and [SfDataGrid.onCellSecondaryTap]
/// callbacks.  Ü‡Ü¯   áÄúáF8/// Signature for [SfDataGrid.onCellDoubleTap] callback.  áz$áò   á§ÄúáÊ8/// Signature for [SfDataGrid.onCellLongPress] callback.  à$à8   àDsàêB/// The signature of [DataGridSource.handleLoadMoreRows] function.    àªÄ®â@/// Signature for the [SfDataGrid.loadMoreViewBuilder] function.  â2â@  âHâV   âgÄ°â™9/// Signature for the [SfDataGrid.onSwipeStart] callback.  â€+âˆ   äÄ•äP:/// Signature for the [SfDataGrid.onSwipeUpdate] callback.  äÇ-äû   äµÄôäˆ7/// Signature for the [SfDataGrid.onSwipeEnd] callback.  ã%'ã>   ãRÄÀã´O/// Holds the arguments for the [SfDataGrid.startSwipeActionsBuilder] callback.  ã‡ãÓ  ãˆå  åå   å!Ääåéb/// The signature of [DataGridSource.canSubmitCell] and
/// [DataGridSource.onCellSubmit] methods.    åØÄúå˘@/// Signature for the [SfDataGrid.onColumnResizeStart] callback.  ç) çC   çOÄüçöA/// Signature for the [SfDataGrid.onColumnResizeUpdate] callback.  çÀ!çÊ   çÚÄêé:>/// Signature for the [SfDataGrid.onColumnResizeEnd] callback.  ébéz   éÜÄ°éÕ=/// Signature for the [SfDataGrid.onFilterChanging] callback.  è#è   è+Äüèq</// Signature for the [SfDataGrid.onFilterChanged] callback.  è•#è¬   èŒÄòê>/// Signature for the [DataGridSourceChangeNotifier] listener.  êEêV   êjÄ€ê≤>/// Signature for the [DataGridSourceChangeNotifier] listener.  êÈê˙  ëë  ë)ë/       ë√ .YÄÇÄ¿ÄˆÄ¯ÅÅEÅpÅûÅ‘Å˚ÇÇ<ÇhÇ©Ç”Ç’ÉÉ\É^ÉúÉ–ÑÑÑQÑÑÑ∆Ñ»Ö
ÖBÖåÖéÖœÜÜPÜRÜ†Ü∞ááá>ává¢á§áﬁààBàDàààπàªà˝â.âeâgâ¢â◊ä
ääHä~ä≥äµäÓã!ãPãRã£ã‹åå!åZåÜå≠åØåÒç%çMçOçíç«ççÚé2éÑéÜé≈é˛è)è+èiè°èÃèŒêê@êhêjê™ê‰ë
ë%ëGëIëÇëáëŸëﬁí$íSíhíõíÁíÈìììUìjìéìêì’ìÎîî"î'î*î,îXî]î¨î‚îıïïBïäïåï®ïƒï∆ï‚ïÈñ8ñLñ_ñbñdñ¢ñßñ˜óó"ó\ó¶ó®óƒó◊óŸó˜òòò=òDòãò†òΩò¿ò¬ôôbôÇôáôñôõôÌô˛ööWöÉöÖö…öÎöÓöõ2õ7õFõKõöõµõÙú
úPútúyú{ú«úÛú˙ùJùôùÎû7ûGûjûlû•û¨ûœûÊûËü7üLüSü°ü∂üΩ††[†r†t†õ†û†††Ÿ†ﬁ°,°_°d°r°w° °‚¢3¢E¢b¢†¢∏¢Ã¢ﬂ¢˝££=£c£ä£å£’£Ó§§§-§D§F§~§¢§©§ˆ•••`•±•Ÿ•˜•˘¶H¶l¶s¶å¶¨¶Æ¶‹ßßß@ßoßrßtß•ß™ßπßæ®®,®q®ç®©® ®Ó®©!©7©9©b©i©z©Å©∫©÷©ÿ™ ™F™I™K™l™q™µ™∫´´W´{´Ä´œ¨¨¨j¨o¨¿¨˙≠5≠:≠H≠≠À≠–≠·≠˙ÆÆ/Æ8Æ=ÆNÆzÆñÆæÆØØPØíØ‚∞(∞4∞=∞B∞^∞®∞Ô±5±}±≈≤≤V≤ú≤„≥+≥4≥;≥@≥V≥ö≥Ø≥…≥Í¥¥
¥¥F¥W¥á¥∆µµ_µÜµ”∂$∂7∂M∂R∂c∂ö∂æ∂˙∑1∑L∑U∑\∑a∑j∑ï∑ƒ∑À∏∏2∏M∏i∏x∏ö∏¬∏Ìπ-πsπ•πº∫∫;∫n∫ê∫∏∫◊∫¸ªªGªoªíª…ººº5ºQºoºéº±º”ºËΩΩ!Ω<ΩfΩ±Ω˙ææ?ænæõæªæ›øø'ø?øXønøíø¥ø⁄¿ @¿ @:¿ @Y¿ @y¿ @ñ¿ @∂¿ @Û¿ A¿ A$¿ AJ¿ Aï¿ A—¿ AË¿ B¿ B/¿ BJ¿ Bl¿ Bà¿ B£¿ Bº¿ BÊ¿ C¿ C=¿ Cj¿ CÑ¿ CÜ¿ Cæ¿ C≈¿ C›¿ C¯¿ C˙¿ D&¿ D-¿ DE¿ Df¿ Dh¿ Dì¿ Dö¿ D¥¿ D◊¿ DŸ¿ E/¿ EC¿ EJ¿ Eö¿ E°¿ Eπ¿ EŸ¿ E€¿ E¸¿ F¿ FO¿ Fû¿ F•¿ F‚¿ G¿ G¿ G5¿ G<¿ Gf¿ Gm¿ Gë¿ Gª¿ GΩ¿ H¿ H¿ H!¿ Hq¿ Hì¿ Hö¿ H◊¿ Hﬁ¿ I¿ IP¿ IR¿ I†¿ Iµ¿ Iº¿ J¿ J4¿ JW¿ JY¿ JÇ¿ Jâ¿ J÷¿ JÓ¿ Jı¿ K)¿ K0¿ KX¿ Kä¿ Kå¿ K≈¿ KÃ¿ L¿ L4¿ L;¿ LÉ¿ L∫¿ L¡¿ Lı¿ L¸¿ M%¿ M,¿ M|¿ Më¿ M…¿ MÀ¿ N¿ N:¿ N<¿ Nd¿ Nk¿ N™¿ N±¿ N⁄¿ N·¿ O¿ O)¿ O+¿ OT¿ O[¿ O´¿ Oº¿ OÛ¿ Oı¿ P7¿ P>¿ Pä¿ P ¿ PÈ¿ Q"¿ Q$¿ Qo¿ Qá¿ Qé¿ Q◊¿ R¿ R¿ R-¿ R^¿ R`¿ R∞¿ RÃ¿ R”¿ RÏ¿ RÛ¿ SC¿ Sl¿ Sn¿ Sº¿ S–¿ S¸¿ S˛¿ T)¿ T0¿ T{¿ Tï¿ T‘¿ T÷¿ U¿ U¿ U[¿ Uû¿ U≤¿ UÛ¿ Uı¿ V(¿ VU¿ VW¿ Vß¿ V…¿ W¿ W¿ WO¿ WÖ¿ Wá¿ WŒ¿ WÏ¿ X%¿ X'¿ Xt¿ X{¿ X¬¿ Y¿ Y	¿ Y¿ Y%¿ Y6¿ Y=¿ Ya¿ Y¥¿ Y’¿ Z(¿ ZH¿ Zi¿ Zk¿ Zπ¿ Z¿¿ [¿ [F¿ [M¿ [b¿ [i¿ [z¿ [Å¿ [‘¿ [ı¿ \H¿ \i¿ \ê¿ \í¿ \÷¿ \›¿ \Ú¿ \˘¿ ]
¿ ]¿ ]2¿ ]Ö¿ ]¶¿ ]˘¿ ^¿ ^8¿ ^:¿ ^Å¿ ^à¿ ^ù¿ ^§¿ ^µ¿ ^º¿ _¿ _0¿ _É¿ _§¿ _»¿ _ ¿ `¿ `&¿ `-¿ `G¿ `N¿ `]¿ `n¿ `ö¿ `∂¿ `ﬁ¿ `˝¿ a¿ aS¿ aó¿ aÈ¿ b1¿ b>¿ bG¿ bN¿ bá¿ bö¿ bÃ¿ c¿ cX¿ c™¿ c”¿ d"¿ du¿ dä¿ d¢¿ d©¿ dº¿ dı¿ e¿ eY¿ eé¿ eß¿ e≤¿ eª¿ e¬¿ eÕ¿ e‘¿ e€¿ eÏ¿ eÛ¿ fB¿ fW¿ fß¿ f∫¿ fˇ¿ gG¿ gë¿ g‡¿ g¸¿ g˛¿ h9¿ h@¿ hZ¿ ha¿ h¶¿ h≠¿ hæ¿ h≈¿ i
¿ iR¿ iú¿ iÎ¿ j¿ j¿ j`¿ j}¿ jÑ¿ jû¿ j•¿ jÍ¿ jÒ¿ k¿ k	¿ kN¿ kñ¿ k‡¿ l/¿ lS¿ lU¿ lß¿ l›¿ l‰¿ l˝¿ m¿ m=¿ mo¿ mv¿ má¿ mé¿ m”¿ n¿ ne¿ n¥¿ n”¿ n’¿ o#¿ o9¿ o@¿ ok¿ or¿ oÉ¿ oä¿ o†¿ o–¿ o“¿ oˇ¿ p¿ pU¿ p£¿ p≥¿ p∫¿ p…¿ p⁄¿ q¿ qU¿ që¿ q—¿ r¿ rb¿ rÉ¿ r®¿ r»¿ s¿ s+¿ sZ¿ sl¿ s|¿ sä¿ só¿ s†¿ s´¿ sﬁ¿ s‡¿ t.¿ t¿ t–¿ tÛ¿ t˙¿ u¿ u9¿ u;¿ u¿ v¿ v¿ v<¿ vl¿ vn¿ v∞¿ w0¿ w7¿ wk¿ wô¿ wõ¿ wÍ¿ x*¿ x1¿ x¿ xƒ¿ y¿ ye¿ y}¿ yÑ¿ y°¿ y®¿ y˘¿ zE¿ zm¿ zt¿ zÉ¿ zî¿ z¿¿ z⁄¿ {!¿ {>¿ {g¿ {â¿ {Œ¿ {ˇ¿ |&¿ |a¿ |r¿ |y¿ |¶¿ |œ¿ |Ù¿ }$¿ }Y¿ }Ä¿ }ß¿ }’¿ ~¿ ~<¿ ~Ç¿ ~“¿ ~Ó¿ .¿ C¿ W¿ i¿ y¿ ù¿ ﬂ¿ Ä%¿ Äy¿ Ä√¿ Ä”¿ Ä·¿ ÄÌ¿ Äˆ¿ Å¿ Å¿ Å#¿ Å*¿ Åu¿ Å≈¿ Ç¿ ÇX¿ Ç_¿ Çn¿ Ç¿ Ç´¿ Ç≈¿ É¿ É)¿ ÉR¿ Ét¿ Éπ¿ É‰¿ Ñ¿ ÑV¿ Ñ|¿ Ñ°¿ Ñ∆¿ ÑÚ¿ Ö!¿ ÖU¿ Öô¿ ÖÁ¿ Ü¿ Ü&¿ ÜI¿ Üs¿ Ü†¿ Ü“¿ Ü˘¿ á¿ áC¿ ám¿ á†¿ á“¿ à¿ àF¿ àÉ¿ àª¿ àÛ¿ â¿ âS¿ ât¿ âë¿ â¬¿ âˇ¿ ä7¿ äo¿ äö¿ ä–¿ äÒ¿ ã¿ ã*¿ ãD¿ ã\¿ ãr¿ ãÖ¿ ãò¿ ã®¿ ãÃ¿ å¿ åT¿ å®¿ åÚ¿ ç¿ ç¿ ç¿ ç%¿ ç0¿ çc¿ çe¿ ç∂¿ ç√¿ ç ¿ ç€¿ ç‚¿ é,¿ éW¿ éy¿ é{¿ éœ¿ è!¿ èe¿ èl¿ è¥¿ è‚¿ è‰¿ ê.¿ ê5¿ êÇ¿ êØ¿ ê±¿ ë¿ ëV¿ ë•¿ ë¨¿ ëÔ¿ íE¿ íL¿ í]¿ íd¿ íá¿ í´¿ íÃ¿ íË¿ íÍ¿ ì*¿ ì1¿ ìI¿ ìi¿ ìk¿ ìü¿ ì¶¿ î ¿ î¿ î>¿ î@¿ îr¿ îy¿ î—¿ îÿ¿ ï¿ ï¿ ï:¿ ïA¿ ïâ¿ ïº¿ ïæ¿ ïÊ¿ ïÌ¿ ñ>¿ ñV¿ ñã¿ ñç¿ ñﬁ¿ ó¿ ó¿ ó_¿ ó±¿ óƒ¿ ò¿ ò¿ òV¿ ò•¿ ò∆¿ ô¿ ô¿ ôK¿ ôR¿ ôc¿ ôj¿ ô÷¿ öF¿ öi¿ ök¿ öº¿ ö”¿ ö⁄¿ õ'¿ õz¿ õÀ¿ õ“¿ ú.¿ ús¿ úz¿ úÃ¿ ù ¿ ùh¿ ùõ¿ ù¢¿ ùÓ¿ û¿ û
¿ ûR¿ û¶¿ û≠¿ ûÒ¿ ü¿ ü¿ ü"¿ üN¿ üi¿ üÜ¿ ü™¿ ü»¿ ü“¿ üŸ¿ üÍ¿ †¿ †0¿ †K¿ †ä¿ †ò¿ †µ¿ †ﬁ¿ °¿ °6¿ °S¿ °ù¿ °∞¿ °Ã¿ °‹¿ ¢ ¿ ¢¿ ¢@¿ ¢o¿ ¢î¿ ¢–¿ £¿ £.¿ £M¿ £i¿ £Ñ¿ £´¿ £‹¿ §¿ §<¿ §p¿ §§¿ §ø¿ §Ì¿ •%¿ •J¿ •Ö¿ •π¿ •„¿ ¶¿ ¶E¿ ¶a¿ ¶|¿ ¶•¿ ¶ÿ¿ ¶˝¿ ß8¿ ßl¿ ß¢¿ ß≤¿ ß¿¿ ßÃ¿ ß’¿ ß·¿ ßË¿ ®¿ ®	¿ ®¿ ®!¿ ®K¿ ®v¿ ®û¿ ®¬¿ ®ƒ¿ ©5¿ ©<¿ ©_¿ ©ã¿ ©ç¿ ™ ¿ ™¿ ™E¿ ™~¿ ™Ä¿ ™Ó¿ ™ı¿ ´3¿ ´n¿ ´p¿ ´•¿ ´⁄¿ ´‹¿ ¨ ¿ ¨=¿ ¨D¿ ¨^¿ ¨e¿ ¨∂¿ ¨◊¿ ¨ﬁ¿ ≠@¿ ≠G¿ ≠ñ¿ ≠ﬂ¿ ≠˛¿ Æ¿ Æ¿ Æ¿ ÆT¿ Æ[¿ Æ¶¿ Æ≠¿ ÆÀ¿ Æ“¿ Ø¿ Øb¿ Øá¿ ØØ¿ ØÏ¿ ∞3¿ ∞Å¿ ∞¨¿ ∞˜¿ ±F¿ ±]¿ ±w¿ ±Ç¿ ±â¿ ±∏¿ ±ø¿ ±Á¿ ±Ó¿ ≤¿ ≤7¿ ≤>¿ ≤Q¿ ≤â¿ ≤Ø¿ ≤Ê¿ ≥¿ ≥R¿ ≥}¿ ≥®¿ ≥’¿ ¥¿ ¥¿ ¥.¿ ¥9¿ ¥@¿ ¥S¿ ¥ç¿ ¥⁄¿ µ*¿ µ\¿ µ{¿ µπ¿ µ˛¿ ∂¿ ∂;¿ ∂N¿ ∂U¿ ∂•¿ ∂—¿ ∂¿ ∑%¿ ∑X¿ ∑{¿ ∑ü¿ ∑Â¿ ∏¿ ∏J¿ ∏Ñ¿ ∏µ¿ ∏‹¿ π¿ πJ¿ π`¿ πó¿ π∆¿ πÛ¿ ∫¿ ∫P¿ ∫n¿ ∫ö¿ ∫±¿ ∫«¿ ∫¯¿ ªJ¿ ªô¿ ªº¿ ª“¿ ªÁ¿ ªÙ¿ ªˇ¿ º¿ º¿ ºl¿ ºé¿ ºæ¿ º›¿ Ω!¿ Ωf¿ ΩÑ¿ Ωó¿ Ωû¿ Ω›¿ Ω‰¿ æ'¿ æ<¿ æI¿ æP¿ æ|¿ æ≈¿ ø¿ ø¿ øY¿ øò¿ ø•¿ ø¨¿ ¿ ¿ ¿"¿ ¿B¿ ¿M¿ ¿V¿ ¿]¿ ¿h¿ ¿≠¿ ¿◊¿ ¿Ê¿ ¿Ì¿ ¡¿ ¡$¿ ¡W¿ ¡^¿ ¡o¿ ¡â¿ ¡•¿ ¡Õ¿ ¬¿ ¬!¿ ¬(¿ ¬9¿ ¬e¿ ¬¿ ¬ö¿ ¬Ÿ¿ ¬Á¿ √¿ √-¿ √N¿ √Ç¿ √¥¿ √Í¿ ƒ¿ ƒ)¿ ƒN¿ ƒs¿ ƒ©¿ ƒ‚¿ ≈¿ ≈%¿ ≈A¿ ≈\¿ ≈É¿ ≈®¿ ≈›¿ ∆¿ ∆C¿ ∆^¿ ∆å¿ ∆±¿ ∆Ê¿ «¿ «B¿ «j¿ «§¿ «¿¿ «€¿ »¿ »)¿ »^¿ »ó¿ »«¿ »◊¿ »Â¿ »Ò¿ »˙¿ …¿ …¿ …d¿ …~¿ …œ¿ …Í¿  1¿  Ä¿  ¡¿ À¿ À.¿ ÀJ¿ ÀL¿ Àò¿ À™¿ À±¿ À‰¿ ÀÎ¿ À¸¿ ÃE¿ Ãu¿ Ãw¿ Ã∂¿ ÃΩ¿ Õ¿ Õ¿ Õ'¿ Õ.¿ Õ~¿ Õç¿ Õ¶¿ Õ®¿ Õ…¿ Õ–¿ ÕÈ¿ Œ¿ Œ	¿ ŒX¿ Œr¿ Œy¿ Œì¿ Œö¿ ŒË¿ œ9¿ œF¿ œM¿ œö¿ œÎ¿ œ¸¿ –¿ –¿ –d¿ –É¿ –•¿ –ß¿ —¿ —¿ —‚¿ —È¿ “A¿ “H¿ “Y¿ “`¿ “ﬂ¿ ” ¿ ”¿ ”n¿ ”u¿ ‘5¿ ‘<¿ ‘ï¿ ‘ú¿ ‘≠¿ ‘¥¿ ’;¿ ’Y¿ ’[¿ ’ñ¿ ’ù¿ ’⁄¿ ÷¿ ÷L¿ ÷N¿ ÷~¿ ÷Ö¿ ÷‘¿ ◊¿ ◊¿ ◊]¿ ◊£¿ ◊™¿ ◊˛¿ ÿ(¿ ÿ/¿ ÿ>¿ ÿO¿ ÿ{¿ ÿï¿ ÿ∞¿ ÿÔ¿ ÿ˝¿ Ÿ¿ ŸC¿ Ÿd¿ Ÿà¿ Ÿ≥¿ ŸÓ¿ ⁄¿ ⁄4¿ ⁄\¿ ⁄â¿ ⁄∆¿ ⁄‹¿ €¿ €?¿ €k¿ €â¿ €±¿ €◊¿ ‹¿ ‹A¿ ‹W¿ ‹ò¿ ‹®¿ ‹Ã¿ ‹Á¿ ›¿ ›1¿ ›g¿ ›õ¿ ›ø¿ ›ﬁ¿ ›˙¿ ﬁ¿ ﬁ<¿ ﬁa¿ ﬁñ¿ ﬁ ¿ ﬁ¯¿ ﬂ¿ ﬂA¿ ﬂf¿ ﬂõ¿ ﬂœ¿ ﬂÛ¿ ‡¿ ‡U¿ ‡q¿ ‡å¿ ‡µ¿ ‡⁄¿ ·¿ ·C¿ ·s¿ ·É¿ ·ë¿ ·ù¿ ·¶¿ ·≠¿ ·Ê¿ ·˜¿ ‚#¿ ‚N¿ ‚{¿ ‚•¿ ‚«¿ ‚‚¿ „¿ „<¿ „e¿ „n¿ „y¿ „Æ¿ „∞¿ „‡¿ „Á¿ ‰9¿ ‰Z¿ ‰a¿ ‰±¿ Â&¿ Â-¿ Â•¿ Â¿¿ Â¬¿ Ê"¿ Ê)¿ Êu¿ ÊΩ¿ Êƒ¿ Á¿ Ár¿ Áø¿ Áˇ¿ Ë¿ Ë ¿ Ëo¿ Ëv¿ Ë∆¿ ËÕ¿ Ëﬁ¿ È+¿ Èa¿ È≠¿ È›¿ Í"¿ Ít¿ Íí¿ Íî¿ Í‹¿ Í„¿ Î0¿ ÎG¿ ÎÇ¿ ÎÑ¿ Î≈¿ ÎÃ¿ Ï¿ Ï5¿ Ïn¿ Ïp¿ Ïí¿ Ïô¿ Ï˛¿ Ì¿ Ì¿ Ì¿ Ì5¿ Ì]¿ Ì_¿ Ìl¿ Ì©¿ Ì¨¿ ÌÆ¿ ÌÙ¿ Ó8¿ ÓE¿ Óv¿ Ó°¿ ÓÀ¿ Óˆ¿ Ô ¿ ÔP¿ ÔR¿ Ôv¿ Ô†¿ Ô÷¿ ¿ ¿ G¿ |¿ ®¿ ÷¿ ˙¿ Ò¿ Ò5¿ Òd¿ Òà¿ Ò±¿ Ò·¿ Ò„¿ Ò˘¿ Ò˚¿ Ú¿ Ú¿ Ú>¿ Úu¿ Ú≤¿ Ú„¿ ÚÂ¿ Û6¿ Û_¿ ÛÖ¿ ÛΩ¿ Ûı¿ Ù9¿ ÙH¿ Ùl¿ Ùn¿ Ùª¿ ÙÒ¿ ı	¿ ı¿ ı¿ ı[¿ ı¶¿ ıµ¿ ıº¿ ıæ¿ ıÊ¿ ˆ$¿ ˆV¿ ˆ[¿ ˆ]¿ ˆÇ¿ ˆÀ¿ ˜¿ ˜I¿ ˜x¿ ˜π¿ ˜»¿ ˜œ¿ ˜—¿ ˜Û¿ ¯:¿ ¯d¿ ¯Ç¿ ¯â¿ ¯ã¿ ¯Æ¿ ¯Ô¿ ˘+¿ ˘I¿ ˘P¿ ˘R¿ ˘m¿ ˘†¿ ˘‰¿ ˙.¿ ˙J¿ ˙p¿ ˙w¿ ˙|¿ ˙~¿ ˙¬¿ ˚¿ ˚¿ ˚¿ ˚ ¿ ˚_¿ ˚™¿ ˚‰¿ ¸-¿ ¸M¿ ¸p¿ ¸Ø¿ ¸È¿ ˝,¿ ˝F¿ ˝c¿ ˝µ¿ ˛¿ ˛5¿ ˛Y¿ ˛¶¿ ˛È¿ ˇ¿ ˇ\¿ ˇ§¿ ˇØ¿ ˇ∏¿ ˇﬁ¿ ˇˇ¿ #¿ t¿ ñ¿ ª¿ ƒ¿ À¿ –¿ “¿¿M¿w¿ï¿¡¿	¿¿¿¿:¿m¿•¿œ¿ ¿D¿t¿¿¿…¿–¿˘¿¿"¿$¿7¿V¿£¿«¿…¿Û¿ı¿¿G¿z¿∂¿∏¿Ó¿ ¿T¿õ¿¢¿ÿ¿!¿(¿*¿a¿°¿⁄¿¿¿E¿î¿∑¿˝¿ˇ¿	'¿	Q¿	Ü¿	π¿	¿	Ú¿
¿
a¿
ú¿
⁄¿¿¿'¿v¿x¿≠¿¸¿˛¿¿!¿#¿1¿I¿s¿î¿ô¿õ¿©¿¿¿D¿~¿¥¿ª¿Ω¿‡¿¿¿5¿S¿X¿Z¿ñ¿ÿ¿Á¿Ó¿¿2¿4¿P¿w¿¢¿»¿ ¿¿^¿é¿≤¿ÿ¿˘¿¿n¿u¿z¿|¿¶¿À¿Ù¿C¿i¿p¿r¿Å¿‡¿Ë¿ı¿]¿•¿¿P¿¿Å¿®¿‡¿Á¿È¿¿¿¿5¿s¿í¿•¿∫¿ﬂ¿Ë¿Ô¿Ò¿¿6¿Ä¿≥¿∫¿ø¿¡¿Ô¿'¿g¿è¿œ¿¿7¿z¿¬¿Í¿.¿h¿ê¿œ¿¿=¿Ä¿Ö¿á¿√¿¯¿3¿p¿∑¿˜¿˘¿
¿g¿q¿Ä¿Á¿X¿∑¿ı¿4¿N¿_¿h¿j¿¥¿˜¿˘¿¿(¿1¿3¿D¿†¿™¿π¿ /¿ í¿ ‰¿!+¿!-¿!|¿!~¿!≈¿!ˇ¿"¿"P¿"ú¿"û¿"Ω¿"Œ¿"◊¿"Ÿ¿"Ó¿#¿#<¿#G¿#N¿#S¿#U¿#É¿#ë¿#©¿#¬¿#«¿#…¿#˙¿$¿$Z¿$ô¿$œ¿%¿%R¿%r¿%√¿&¿&9¿&L¿&W¿&Y¿&ö¿&∫¿'	¿'0¿'~¿'Œ¿(	¿(>¿(ê¿(ƒ¿)¿)9¿)L¿)]¿)ï¿)ÿ¿)˝¿*¿*¿*$¿*-¿*4¿*9¿*;¿*`¿*¢¿*±¿*∏¿*À¿+¿+(¿+*¿+z¿+µ¿+·¿,(¿,1¿,3¿,[¿,å¿,é¿,Œ¿-	¿-J¿-w¿-®¿-Î¿-ˆ¿-¯¿.¿.¿.¿.S¿.¢¿.€¿/¿/E¿/t¿/√¿/Ã¿/Œ¿/¿0.¿07¿09¿0]¿0´¿0Õ¿1¿18¿1à¿1ø¿1¿1˚¿2¿2¿2¿2=¿2V¿2q¿2s¿2¿¿3¿3(¿31¿3{¿3º¿3√¿3≈¿4¿46¿4o¿4¨¿4Û¿54¿5;¿5@¿5B¿5î¿5±¿5¸¿6#¿6g¿6Ø¿6¯¿78¿7`¿7~¿7¶¿7≠¿7÷¿7˝¿8E¿8ë¿8ﬁ¿9¿9a¿9´¿9Û¿:¿:C¿:q¿:¬¿;¿;'¿;S¿;Ö¿;¡¿;Ã¿;’¿;‹¿;·¿;„¿;ˇ¿<¿<$¿<I¿<b¿<}¿<Ü¿<ã¿<ç¿<©¿<„¿<Ú¿<˘¿<˚¿=G¿=è¿=ë¿=≠¿=º¿=√¿=≈¿> ¿>K¿>M¿>Å¿>ê¿>ó¿>ô¿>ƒ¿?¿?V¿?X¿?h¿?µ¿?¿?˘¿@¿@U¿@£¿@Ò¿AB¿Aq¿A£¿A…¿AÈ¿B ¿B"¿BL¿Bi¿BÇ¿Bü¿B¶¿B´¿B≠¿B‡¿B˝¿C¿C!¿CD¿Cw¿Cö¿Cœ¿D¿D¿D¿D¿DT¿DÖ¿Dñ¿Dü¿D°¿DÊ¿E
¿E¿E¿E¿EL¿EÄ¿Eá¿E≥¿E∏¿E∫¿E◊¿E¯¿E˝¿Eˇ¿FB¿Fe¿Fê¿Fó¿F∫¿F›¿F‰¿FÈ¿FÎ¿G¿GC¿G`¿Gç¿G∂¿G€¿H¿H>¿HÖ¿H¬¿I¿I¿IO¿Iî¿Iñ¿I∂¿I…¿I‘¿IÎ¿I˛¿J¿J>¿Je¿J§¿J ¿J¯¿K$¿KF¿KS¿K`¿Ki¿Kp¿Kr¿K≤¿KÃ¿K”¿K’¿Kˇ¿L¿Le¿Ló¿L¢¿L©¿L´¿L—¿LÊ¿M/¿MW¿MÉ¿M ¿MÓ¿M˘¿N ¿N¿N/¿ND¿Næ¿N…¿N–¿N“¿O¿O=¿OD¿OF¿On¿OÉ¿O≠¿OÕ¿OÙ¿P¿P,¿P.¿PP¿P[¿Pb¿Pg¿Pi¿Pë¿P≠¿P»¿PÂ¿Q¿Q5¿QU¿Q{¿Qπ¿QÔ¿R#¿R]¿R£¿R’¿S¿SM¿SÖ¿Sø¿SÔ¿T/¿Tq¿Tó¿T…¿U¿U3¿Uk¿UØ¿U·¿V¿VK¿Vç¿V…¿W¿W3¿WX¿W}¿W≥¿WÛ¿X5¿Xs¿X≠¿X˘¿Y1¿Y{¿Yß¿Y◊¿Z¿Z1¿ZY¿Zù¿Z›¿[!¿[Q¿[ã¿[«¿[˚¿\5¿\q¿\ß¿\ﬂ¿]¿]8¿]l¿]à¿]∫¿]Ÿ¿^¿^L¿^n¿^¶¿^À¿_
¿_A¿_i¿_â¿_µ¿_Ì¿`-¿`a¿`ã¿`¡¿`Ò¿a#¿aW¿aá¿aª¿aÌ¿b¿b¿bD¿bz¿b©¿b∞¿bµ¿b∑¿bÙ¿c¿c¿cG¿cå¿c≤¿d ¿d#¿d_¿dn¿dπ¿dˆ¿d˛¿e¿e\¿e¨¿e¿f2¿f_¿fì¿fø¿g¿g?¿gf¿gû¿g‚¿h¿hM¿h{¿hØ¿h˚¿i%¿iu¿iû¿iﬁ¿j,¿j~¿j¨¿j˙¿k%¿kc¿kØ¿k¿l#¿li¿l†¿lÿ¿m¿mC¿mï¿mø¿m˚¿nE¿n}¿n©¿nÈ¿o¿oF¿oÑ¿o®¿o¿p¿pQ¿pS¿p•¿p€¿q$¿q-¿qf¿q®¿qØ¿q±¿q‚¿r¿rH¿rì¿rú¿r◊¿s¿s"¿s$¿so¿sª¿s¬¿sƒ¿sÁ¿t!¿ti¿tk¿tà¿tƒ¿tÊ¿u8¿u:¿uÉ¿uô¿uΩ¿u˝¿v:¿vw¿v≥¿vÔ¿vÒ¿w¿w9¿wa¿w°¿wÂ¿x¿x/¿x1¿xn¿x™¿x—¿y
¿y¿y¿y%¿y'¿yG¿yn¿yº¿yﬁ¿z'¿zI¿zn¿z¿¿z˘¿{,¿{t¿{…¿|¿|<¿|e¿|ã¿|∏¿|Ò¿}$¿}1¿}<¿}E¿}L¿}N¿}t¿}ú¿}“¿~¿~U¿~î¿~ü¿~Õ¿~÷¿~›¿~ﬂ¿¿E¿Ç¿º¿Ì¿Ä+¿Äm¿Äv¿Ä}¿Ä¿Äõ¿Ä∏¿Äÿ¿Ä˛¿Å¿ÅG¿Åm¿Åê¿Å≠¿Å’¿Å˙¿Ç!¿Ç>¿Ç]¿ÇÉ¿Ç¢¿Ç÷¿É¿É\¿Éö¿É‡¿Ñ¿Ñ\¿Ñ}¿Ñ©¿Ñ¬¿Ñƒ¿Ö¿Öh¿Ö¶¿Ö˜¿Ü!¿Ü*¿Üh¿Üç¿Ü∂¿Ü€¿Üˇ¿áM¿áô¿áﬂ¿áÏ¿à*¿à5¿à>¿à@¿àj¿à∞¿àÊ¿àË¿â#¿âS¿âò¿âö¿â‘¿ä
¿ä¿ä¿äO¿ä}¿äØ¿ä÷¿ã ¿ã)¿ã+¿ãK¿ãM¿ãä¿ãÀ¿ã‘¿ã÷¿ã˘¿å¿å'¿å)¿åE¿åG¿åi¿åk¿åó¿åô¿å∆¿ç¿çI¿çv¿ç¨¿çÆ¿ç€¿ç›¿ç˚¿é¿é=¿ée¿éé¿é÷¿è¿è@¿èe¿è™¿èµ¿èæ¿è¿¿ê¿ê`¿êØ¿êˆ¿ë¿ë6¿ëw¿ëô¿ë ¿ëı¿í&¿íi¿ík¿í∑¿ì¿ìU¿ìv¿ìñ¿ìﬂ¿î¿î¿îF¿îQ¿îZ¿î\¿îz¿î£¿î≈¿îÍ¿ï¿ï2¿ïZ¿ïõ¿ïæ¿ïÙ¿ï˝¿ïˇ¿ñ!¿ñ`¿ñÑ¿ñ©¿ñ—¿ñ¯¿ó"¿óD¿óÑ¿óÆ¿óÿ¿ó„¿óÏ¿óÓ¿ò#¿òr¿òº¿ò‚¿òÎ¿òÌ¿ô¿ô¿ôg¿ô≥¿ôÂ¿ö¿ö`¿ö¿ö≠¿ö˛¿õ,¿õu¿õÄ¿õ¢¿õ∆¿ú¿ú9¿úB¿úI¿úN¿úP¿úy¿ú°¿úæ¿úÎ¿ù"¿ù\¿ùÅ¿ù™¿ù‡¿ùÂ¿ùÁ¿û ¿ûP¿û~¿û£¿ûœ¿ûÎ¿ü/¿ü\¿üu¿ü«¿üŒ¿ü–¿üˆ¿†A¿†~¿†æ¿†˘¿° ¿°¿°¿°Z¿°a¿°c¿°ï¿°Õ¿¢¿¢A¿¢Å¿¢µ¿¢∑¿¢‹¿£¿£¿£¿£¿£<¿£n¿£ò¿£À¿£Û¿§=¿§D¿§p¿§ú¿§£¿§•¿§˜¿•=¿•q¿•£¿•‘¿¶	¿¶S¿¶ï¿¶”¿ß¿ß#¿ßo¿ß≥¿ßÛ¿®<¿®E¿®L¿®Q¿®S¿®z¿®´¿®·¿®Ë¿®Í¿©¿©L¿©S¿©U¿©Ç¿©π¿©¿¿©≈¿©«¿©Â¿™ ¿™\¿™å¿™ø¿™˜¿´¿´¿´%¿´*¿´,¿´J¿´y¿´†¿´‚¿¨¿¨0¿¨Q¿¨o¿¨é¿¨∞¿¨≤¿¨˙¿¨ˇ¿≠¿≠)¿≠[¿≠ç¿≠œ¿≠¸¿Æ¿Æ¿Æ.¿Æc¿Æï¿Æ⁄¿Ø
¿Ø¿Ø¿Ø[¿Ø•¿ØÀ¿Ø¯¿∞¿∞%¿∞D¿∞ì¿∞–¿∞◊¿∞‹¿∞ﬁ¿±¿±4¿±;¿±x¿±ù¿±§¿±„¿≤$¿≤+¿≤m¿≤±¿≤˛¿≥+¿≥o¿≥•¿≥‰¿¥¿¥X¿¥h¿¥¶¿¥Ø¿¥∂¿¥ª¿¥Ω¿¥ ¿¥Ï¿µ ¿µR¿µâ¿µ¬¿µ˜¿µ˘¿∂%¿∂Z¿∂\¿∂°¿∂£¿∂€¿∑'¿∑.¿∑0¿∑r¿∑t¿∑ñ¿∑‘¿∏#¿∏W¿∏®¿∏‘¿∏Á¿∏˘¿π¿πb¿πd¿π¥¿π¸¿∫L¿∫k¿∫ò¿∫€¿ª¿ª4¿ªV¿ªò¿ªπ¿º
¿º¿º'¿ºO¿ºV¿ºX¿º|¿ºÅ¿ºÉ¿ºê¿º¿¿ºÁ¿Ω
¿Ω¿Ω¿Ω¿ΩF¿Ωs¿Ωè¿Ωñ¿Ωò¿Ω≥¿Ω˙¿æC¿æï¿æ÷¿ø%¿ø'¿øú¿øˇ¿¿6¿¿r¿¿≠¿¿∂¿¿›¿¿ı¿¡)¿¡a¿¡l¿¡ê¿¡ø¿¡˜¿¬ ¿¬¿¬"¿¬A¿¬b¿¬ô¿¬£¿¬¨¿¬±¿¬≥¿¬¿¿¬‘¿¬˚¿¬˝¿√¿√]¿√¿√á¿√î¿√ﬁ¿ƒZ¿ƒ«¿≈	¿≈B¿≈t¿≈≠¿≈ÿ¿≈Ù¿∆¿∆)¿∆H¿∆h¿∆ò¿∆«¿∆Ú¿∆˘¿«@¿«b¿«â¿«–¿«¸¿»*¿»,¿»;¿»w¿»¬¿» ¿»◊¿…6¿…ê¿…’¿…˙¿ ,¿ e¿ {¿ Ä¿ É¿ Ö¿ »¿ Õ¿À¿ÀS¿Àó¿À§¿ÀÁ¿À¯¿À˝¿ÃN¿Ã_¿Ãd¿Ã¥¿Ã≈¿Ã”¿Õ¿Õ¿ÕD¿ÕU¿ÕÖ¿Õƒ¿Œ¿Œ]¿ŒÑ¿Œ—¿œ"¿œ5¿œK¿œP¿œa¿œò¿œº¿œ¯¿–/¿–J¿–S¿–Z¿–c¿–e¿–©¿–«¿—¿—¿—8¿—t¿—v¿—≥¿—∫¿“	¿“Y¿“j¿“q¿“æ¿“˘¿” ¿”M¿”Å¿”à¿”⁄¿‘¿‘¿‘C¿‘ê¿‘ó¿‘¯¿’L¿’Ü¿’à¿’ø¿’¡¿’˜¿’˘¿÷Q¿÷à¿÷ä¿÷œ¿÷„¿◊¿◊¿◊>¿◊@¿◊Ä¿◊™¿◊¨¿◊Û¿◊˙¿ÿH¿ÿ[¿ÿb¿ÿï¿ÿﬂ¿ÿ˛¿Ÿ<¿Ÿá¿Ÿâ¿Ÿ⁄¿⁄%¿⁄k¿⁄r¿⁄∏¿⁄¸¿€¿€L¿€ç¿€î¿€·¿‹¿‹.¿‹g¿‹z¿‹¨¿‹Ì¿›8¿›ä¿›≥¿ﬁ¿ﬁU¿ﬁj¿ﬁÇ¿ﬁâ¿ﬁú¿ﬁÃ¿ﬁ‰¿ﬁÔ¿ﬁˆ¿ﬂ	¿ﬂB¿ﬂh¿ﬂ¶¿ﬂﬂ¿ﬂ¸¿‡¿‡¿‡¿‡"¿‡0¿‡Z¿‡m¿‡r¿‡t¿‡¿¿‡’¿‡‹¿·(¿·x¿·ë¿·ò¿·Ë¿·Ô¿·˛¿‚¿‚;¿‚U¿‚p¿‚Ø¿‚Ω¿‚÷¿‚Ô¿„
¿„1¿„R¿„á¿„÷¿‰¿‰¿‰+¿‰F¿‰t¿‰ô¿‰¡¿Â¿ÂQ¿Â©¿Â˜¿Ê¿Ê¿Ê-¿Ê;¿ÊG¿ÊP¿ÊZ¿Êk¿Êr¿Ê¡¿Ê÷¿Á(¿ÁG¿Áë¿Á‡¿Ë ¿Ëi¿Ëk¿Ë§¿Ë´¿Ë˝¿ÈK¿Èu¿È|¿ÈÕ¿Í¿Íi¿Í∫¿Î¿Î/¿Î6¿ÎÄ¿Î“¿Ï¿Ï ¿Ï1¿Ï8¿Ïä¿Ïò¿Ï¶¿Ï◊¿Ï˘¿Ì¿Ì¿Ì?¿Ìr¿Ì{¿ÌÄ¿ÌÇ¿Ì·¿ÓC¿ÓÖ¿Ó¢¿ÓΩ¿Ó„¿Ô¿Ô/¿ÔI¿Ôq¿Ôx¿Ô}¿Ô¿Ôñ¿Ô‰¿	¿C¿É¿¡¿‰¿Ò¿Ò¿Òe¿Ò±¿Ò⁄¿Ú¿Ú#¿Ú,¿Ú3¿Úq¿Úò¿Úù¿Úü¿ÚÓ¿Û8¿Ûf¿Ûm¿Ûô¿ÛÕ¿ÛÛ¿Ù'¿Ù.¿Ùr¿Ùø¿ı¿ı^¿ıe¿ıl¿ıª¿ı¿ı˜¿ˆ¿ˆ?¿ˆR¿ˆÑ¿ˆ≈¿˜¿˜b¿˜ã¿˜⁄¿¯-¿¯B¿¯Z¿¯a¿¯t¿¯≠¿¯”¿˘¿˘J¿˘g¿˘r¿˘y¿˘ã¿˘‡¿˙¿˙0¿˙M¿˙ú¿˙µ¿˙⁄¿˙˜¿˚F¿˚_¿˚f¿˚ö¿˚≤¿˚¿¿˚«¿¸¿¸a¿¸v¿¸¡¿¸œ¿¸€¿¸‚¿˝¿˝¿˝%¿˝0¿˝>¿˝ç¿˝◊¿˝Î¿˛
¿˛U¿˛i¿˛p¿˛r¿˛º¿ˇ¿ˇH¿ˇM¿ˇO¿ˇb¿ˇ∞¿ˇÌ¿ 
¿ ¿ B¿ U¿ ^¿ ç¿ õ¿ ∏¿ À¿ Ô¿¿¿;¿B¿G¿I¿g¿å¿≤¿Ÿ¿Á¿¿¿¿W¿Å¿√¿Ï¿1¿8¿:¿¿§¿¶¿Û¿G¿`¿e¿g¿´¿Í¿Ò¿ ¿¿=¿W¿r¿±¿ø¿ÿ¿Ò¿¿3¿T¿â¿ÿ¿¿¿-¿H¿v¿õ¿√¿¿Q¿©¿˜¿	¿	¿	-¿	;¿	G¿	P¿	[¿	l¿	Ü¿	Ã¿	—¿	”¿
!¿
s¿
≥¿
µ¿
Û¿¿#¿n¿Ö¿å¿ù¿§¿¿=¿X¿f¿î¿ñ¿ﬁ¿Â¿¿Q¿X¿£¿∫¿»¿Ò¿Û¿:¿A¿P¿a¿ç¿•¿º¿”¿¿^¿§¿¯¿B¿U¿e¿Ç¿Æ¿œ¿¿Z¿o¿}¿â¿í¿ù¿Â¿&¿\¿à¿ü¿ß¿©¿⁄¿‹¿¿7¿>¿C¿E¿Ä¿á¿ñ¿ß¿”¿Î¿¿¿b¿§¿Í¿>¿à¿õ¿´¿»¿˜¿¿T¿¶¿ª¿…¿’¿ﬁ¿È¿4¿k¿±¿¿¿«¿…¿¿8¿:¿Y¿Ü¿î¿«¿Œ¿–¿˙¿+¿2¿7¿9¿à¿∞¿∑¿¿¿%¿4¿E¿q¿â¿†¿∑¿ ¿B¿à¿‹¿&¿9¿I¿f¿ï¿∂¿Ì¿¿¿¿%¿0¿]¿Ü¿‘¿¿1¿f¿q¿ô¿Ω¿Î¿ ¿+¿4¿;¿@¿B¿à¿¿¿È¿ -¿ 4¿ 6¿ P¿ R¿ õ¿ ¿¿ ≈¿ «¿!¿!¿!d¿!á¿!é¿!ù¿!§¿!Ó¿!ı¿"¿"¿"*¿"b¿"ü¿"√¿#¿#A¿#Z¿#í¿#…¿#›¿#˙¿$¿$¿$`¿$ä¿$ß¿$⁄¿%¿%,¿%N¿%í¿%ø¿%Û¿&+¿&Z¿&¿&£¿&È¿&˝¿'2¿'_¿'ä¿'≠¿'„¿'ˇ¿()¿(>¿(R¿(Å¿(—¿)¿)?¿)S¿)f¿)q¿)z¿)Ö¿)“¿*¿*l¿*Ñ¿*∏¿+
¿+¿+!¿+#¿+\¿+c¿+Æ¿+À¿+“¿,¿,j¿,≠¿,˝¿-I¿-ô¿-µ¿-«¿-Ã¿-Œ¿.¿.¿.\¿.™¿.¿/¿/$¿/o¿/¢¿/©¿/π¿/ ¿0¿0;¿0i¿0Ç¿0¿¿0˜¿1¿1 ¿1'¿1d¿1k¿1¨¿1ø¿1 ¿1—¿1˚¿2B¿2ã¿2í¿2“¿3¿3¿3!¿3s¿3ì¿3±¿3∫¿3ƒ¿4¿4g¿4Ñ¿4Ü¿4À¿4È¿4¿5<¿5å¿5∏¿6¿6"¿64¿69¿6;¿6Å¿6Ω¿7¿7+¿7-¿7:¿7Å¿7∂¿7ﬂ¿8¿8¿8¿8I¿8l¿8n¿8∞¿8Â¿9¿9K¿9M¿9ü¿9¡¿9Ì¿:¿:¿:¿:X¿:™¿:˘¿;¿;0¿;7¿;9¿;h¿;Ä¿;Ç¿;®¿;≠¿;Ø¿<¿<
¿<X¿<h¿<o¿<æ¿<˛¿=H¿=ê¿=¿¿=¬¿=Í¿>¿>8¿>v¿>§¿>À¿?¿?;¿?d¿?®¿?Ô¿?¸¿@¿@¿@%¿@3¿@~¿@Ö¿@ä¿@å¿@◊¿@ﬁ¿A.¿Av¿A∫¿A¡¿B¿B¿Bb¿Bä¿B±¿B⁄¿C ¿C¿C0¿C5¿C8¿C:¿C}¿Cœ¿Cˆ¿C˘¿C˚¿D:¿Dr¿D∏¿Dÿ¿D€¿D›¿E¿E2¿EP¿ES¿EU¿Ez¿E¿Eœ¿F¿F/¿F4¿FÇ¿Fµ¿Fˆ¿GF¿Ga¿Gx¿Gò¿Gπ¿G˘¿H¿HG¿Hx¿H§¿H¬¿Hﬁ¿H„¿HÂ¿I¿I¿I^¿Iã¿I√¿J¿J¿JL¿Jy¿J≤¿Jﬂ¿JÓ¿Jı¿J˜¿K¿Kh¿Km¿Ko¿K¢¿KŒ¿KÂ¿KÁ¿L&¿Lg¿Li¿Lç¿L∑¿LÚ¿M¿MR¿M`¿Mu¿M|¿MÅ¿MÉ¿M∂¿M„¿N¿N!¿N(¿N*¿NR¿Nû¿N£¿N•¿NŸ¿N‡¿O,¿OA¿Or¿Oê¿Oí¿O∆¿OÕ¿P¿P.¿P`¿Pã¿Pö¿P°¿P£¿P«¿Q¿Q¿Q¿QT¿QÖ¿Q•¿Qß¿QÂ¿R¿R<¿R>¿Rã¿R…¿S¿S+¿S2¿SÅ¿SÃ¿T¿TD¿Ty¿T¡¿TÓ¿U%¿UJ¿UÄ¿UÖ¿Uá¿U∞¿U∑¿V ¿V¿VJ¿VÅ¿VÉ¿Vƒ¿Vˇ¿W)¿Wd¿Wâ¿W¿¿X¿XU¿Xí¿X–¿Y¿Y_¿Y≥¿YÀ¿Z	¿Z¿Z'¿Zd¿Zú¿Z⁄¿[¿[d¿[ä¿[ï¿[û¿[•¿[™¿[¨¿[Ô¿[ˆ¿\K¿\R¿\û¿\Ô¿]A¿]m¿]Ø¿]–¿^¿^I¿^{¿^•¿^‡¿_¿_.¿_e¿_ë¿_À¿_Õ¿`¿`C¿`Å¿`í¿`õ¿`ù¿`€¿a¿a_¿aó¿a∂¿b¿bF¿by¿b{¿b¬¿b‚¿c,¿cc¿cã¿cû¿c€¿d¿d0¿dB¿dK¿dM¿dê¿d®¿dø¿d⁄¿e¿e+¿eO¿e{¿e∂¿eœ¿e—¿f¿f1¿fK¿fh¿fî¿fª¿f‚¿g¿gT¿gp¿gr¿gï¿g‘¿hW¿hÇ¿h√¿h ¿hœ¿h—¿i¿i¿ia¿ih¿iº¿i˝¿j*¿jK¿jõ¿j¬¿j˚¿k ¿k¿k=¿kD¿kô¿k†¿kÙ¿l5¿lh¿lâ¿lŸ¿m¿m?¿mD¿mF¿mï¿mú¿mÒ¿n'¿nQ¿n{¿nÀ¿o¿o"¿o'¿o)¿ow¿o~¿o”¿p¿p5¿p_¿pØ¿q¿q¿q¿q¿qU¿qà¿q≤¿qÌ¿r¿rD¿rå¿rŸ¿rÍ¿rÛ¿rı¿s/¿sx¿s¿sÑ¿sÜ¿s¡¿s’¿sˇ¿t:¿t_¿të¿tŸ¿u&¿u7¿u@¿uB¿uê¿uó¿uú¿uü¿u°¿uÓ¿v¿v¿v^¿vc¿vp¿v©¿v≤¿v∑¿w¿w¿w¿wX¿wg¿w∂¿w‡¿x¿x1¿xJ¿x]¿xd¿xk¿xt¿xè¿xÃ¿xÊ¿xË¿y¿y¿yf¿y¶¿yÛ¿z¿z
¿z¿z¿z^¿zõ¿zÂ¿{¿{¿{^¿{ã¿{ê¿{í¿{‹¿|¿|¿|¿|J¿|t¿|¨¿|Æ¿|⁄¿}¿}B¿}G¿}I¿}x¿}´¿}„¿}Ë¿}Í¿}˜¿~¿~1¿~6¿~8¿~h¿R¿`¿¶¿Á¿Ä¿Ä¿Ä$¿Ä&¿Ä∞¿Ä‡¿Å¿Å%¿ÅR¿Åõ¿Å¨¿Å◊¿Å˛¿Ç6¿Ç=¿ÇB¿ÇE¿ÇG¿Çß¿Ç‘¿É¿É=¿ÉX¿ÉÉ¿Éµ¿É‹¿Ñ¿Ñ3¿Ñ6¿Ñ8¿Ñz¿Ñ∫¿Ñ·¿Ñ‰¿ÑÊ¿Ö#¿Ö^¿ÖÄ¿ÖÉ¿ÖÖ¿Ö≤¿Ö‚¿Ü¿Ü¿Ü¿Ü?¿Üy¿Üø¿Ü‚¿ÜÓ¿á¿á¿á¿á¿áO¿áí¿áœ¿à¿à#¿à%¿àé¿à£¿à«¿â¿â1¿â:¿â?¿âA¿âå¿âª¿ä¿äM¿äh¿ä±¿ä·¿ã¿ã¿ã¿ã¿ã¿ãp¿ã¡¿ãÚ¿ãı¿ã˜¿åH¿åa¿å§¿å—¿å‘¿å÷¿ç¿ç=¿çá¿çπ¿çº¿çæ¿é¿éV¿é~¿éÅ¿éÉ¿é“¿è¿èI¿èL¿èN¿èñ¿è≥¿è¯¿ê2¿ê5¿ê7¿êÑ¿êÃ¿ê˝¿ë ¿ë¿ëJ¿ëé¿ë∑¿ëÌ¿ë¿ëÚ¿í=¿íÜ¿í∂¿íπ¿íª¿í∆¿í„¿í¿íÚ¿ì
¿ìU¿ì°¿ì¥¿î¿î>¿îq¿î∏¿îˇ¿ïF¿ïÄ¿ï≥¿ïÒ¿ñ$¿ñ\¿ñè¿ñ«¿ñ˘¿ó=¿óp¿óí¿ó·¿ò	¿òK¿òâ¿ò¨¿ò¿ô¿ôP¿ôd¿ôá¿ô±¿ôÃ¿ö¿ö7¿ög¿ö°¿öÂ¿õ)¿õO¿õä¿õè¿õë¿õù¿õº¿õæ¿õ·¿õ¸¿õ˛¿ú¿ú(¿ú*¿ú7¿ú9¿ú]¿ú_¿úl¿ún¿úå¿úé¿úõ¿úù¿ú–¿ú“¿úﬂ¿ú·¿ù¿ù¿ù¿ù¿ù9¿ù;¿ùH¿ùJ¿ùg¿ùi¿ùv¿ùx¿ùò¿ùö¿ùß¿ù©¿ùÕ¿ùœ¿ù‹¿ùﬁ¿û¿û
¿û¿û¿ûJ¿ûL¿ûY¿û[¿ûx¿ûz¿ûá¿ûâ¿ûÆ¿û∞¿ûΩ¿ûø¿ûŸ¿û€¿ü¿ü¿üy¿ü»¿†¿†,¿†3¿†B¿†S¿†¿†ô¿†¥¿†Ú¿°%¿°3¿°U¿°ë¿°µ¿°‘¿°˝¿¢8¿¢s¿¢∞¿¢≈¿¢Â¿¢˙¿£B¿£Ç¿£•¿£ß¿£Œ¿£Ù¿§$¿§C¿§n¿§Ñ¿§ó¿§∑¿§ÿ¿•¿•/¿•`¿•x¿•ä¿•õ¿•ª¿•Á¿¶¿¶/¿¶U¿¶e¿¶s¿¶¿¶à¿¶ì¿¶Ø¿¶±¿ß¿ß¿ßT¿ßè¿ßØ¿ß±¿ß˙¿®¿®B¿®}¿®¢¿®§¿®ı¿©¿©¿©x¿©ß¿©™     DataGridRowDataGridCellDataGridRowAdapterStackedHeaderRowStackedHeaderCellGridTableSummaryRowGridSummaryColumn
SfDataGridSfDataGridStateDataGridSourcerefreshEffectiveRowsperformSortingupdateDataPagerDataGridControllerDataPagerDelegateDataGridSourceChangeNotifier%notifyDataGridPropertyChangeListenershandleLoadMoreRowshandleRefreshupdateDataSourceeffectiveRowssetPageCountupdateSelectedIndexupdateSelectedRowupdateCurrentCellIndexupdateVerticalOffsetupdateHorizontalOffsetsetChildColumnIndexesgetChildColumnIndexesaddFilterConditionsremoveFilterConditionsDataGridThemeHelper ·è