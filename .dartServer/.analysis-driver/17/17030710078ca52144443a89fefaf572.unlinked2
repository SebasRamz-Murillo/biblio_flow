ÄƒbodyappBar	bodyScrimbottomSheetsnackBarmaterialBannerpersistentFooterbottomNavigationBarfloatingActionButtondrawer	endDrawer	statusBarchildofmaybeOfcreateState
_scaffolds_materialBanners_materialBannerController
_snackBars_snackBarController_snackBarTimer_accessibleNavigationdidChangeDependencies	_register_unregister_updateScaffolds_isRootshowSnackBar_handleSnackBarStatusChangedremoveCurrentSnackBarhideCurrentSnackBarclearSnackBarsshowMaterialBanner"_handleMaterialBannerStatusChangedremoveCurrentMaterialBannerhideCurrentMaterialBannerclearMaterialBannersbuilddispose_scaffoldMessengerStateupdateShouldNotifyfloatingActionButtonSizebottomSheetSizecontentBottom
contentTop	minInsetsminViewPaddingscaffoldSizesnackBarSizematerialBannerSizetextDirectionbeginendanimatorprogress	getOffsettoStringbottomNavigationBarTopfloatingActionButtonArea_scaleFloatingActionButtoncopyWithcontextfloatingActionButtonScalegeometryvalue_updateWithbottomWidgetsHeightappBarHeightmaterialBannerHeight==hashCode
extendBodyextendBodyBehindAppBargeometryNotifier$previousFloatingActionButtonLocation#currentFloatingActionButtonLocation)floatingActionButtonMoveAnimationProgress"floatingActionButtonMotionAnimatorisSnackBarFloatingsnackBarWidthextendBodyBehindMaterialBannerperformLayoutshouldRelayoutfabMoveAnimationfabMotionAnimatorcurrentController_previousController_previousScaleAnimation_previousRotationAnimation_currentScaleAnimation_extendedCurrentScaleAnimation_currentRotationAnimation_previousChild	initStatedidUpdateWidget_entranceTurnTween_updateAnimations%_handlePreviousAnimationStatusChanged_isExtendedFloatingActionButton_onProgressChanged_updateGeometryScalefloatingActionButtonLocationfloatingActionButtonAnimatorpersistentFooterButtonspersistentFooterAlignmentonDrawerChangedonEndDrawerChangeddrawerScrimColorbackgroundColorresizeToAvoidBottomInsetprimarydrawerDragStartBehaviordrawerEdgeDragWidthdrawerEnableOpenDragGestureendDrawerEnableOpenDragGesturerestorationId
geometryOf	hasDrawerrestoreState
_drawerKey_endDrawerKey_bodyKey	hasAppBarhasEndDrawerhasFloatingActionButton_appBarMaxHeightappBarMaxHeight_drawerOpened_endDrawerOpenedisDrawerOpenisEndDrawerOpen_drawerOpenedCallback_endDrawerOpenedCallback
openDraweropenEndDrawer_scaffoldMessenger_messengerSnackBar_updateSnackBar_messengerMaterialBanner_updateMaterialBanner_dismissedBottomSheets_currentBottomSheet_currentBottomSheetKey_persistentSheetHistoryEntry _maybeBuildPersistentBottomSheet_closeCurrentBottomSheetcloseDrawercloseEndDrawer_updatePersistentBottomSheet_buildBottomSheetshowBottomSheet#_floatingActionButtonMoveController_floatingActionButtonAnimator%_previousFloatingActionButtonLocation_floatingActionButtonLocation)_floatingActionButtonVisibilityController$_floatingActionButtonVisibilityValue_showFloatingActionButton_moveFloatingActionButton_handleStatusBarTap_geometryNotifier_resizeToAvoidBottomInset_addIfNonNull_buildEndDrawer_buildDrawer_showBodyScrim_bodyScrimColorshowBodyScrim	isEnabledinvoke_widget
_completerclosedclosesetStatestartingPointcurve	transformanimationController
enableDrag	onClosingonDismissed	onDisposebuilderisPersistent	elevationshapeclipBehaviorconstraintsanimationCurve_handleDragStart_handleDragEnd_handleStatusChangeextentChanged_isLocalHistoryEntry%_kDefaultFloatingActionButtonLocation%_kDefaultFloatingActionButtonAnimator_standardBottomSheetCurve _kBottomSheetDominatesPercentage_kMinBottomSheetScrimOpacity_kMaxBottomSheetScrimOpacity_ScaffoldSlotScaffoldMessengerScaffoldMessengerState_ScaffoldMessengerScopeScaffoldPrelayoutGeometry_TransitionSnapshotFabLocationScaffoldGeometry_ScaffoldGeometryNotifier_BodyBoxConstraints_BodyBuilder_ScaffoldLayout_FloatingActionButtonTransition$_FloatingActionButtonTransitionStateScaffoldScaffoldState_DismissDrawerActionScaffoldFeatureController_BottomSheetSuspendedCurve_StandardBottomSheet_StandardBottomSheetStatePersistentBottomSheetController_ScaffoldScopeÅ–
lerpDoubleDragStartBehaviorFloatingActionButtonLocationendFloatFloatingActionButtonAnimatorscalingCurvestandardEasingdoubleSnackBarMaterialBannerBuildContextofshowSnackBarshowMaterialBannerdebugCheckHasScaffoldMessengerStatefulWidgetWidget	GlobalKeyMaterialAppscaffoldMessengerKey"dependOnInheritedWidgetOfExactType_scaffoldMessengerStateoverrideStateTickerProviderStateMixinLinkedHashSetQueueMaterialBannerClosedReasonAnimationControllerSnackBarClosedReasonTimerboolvoidMediaQueryData
MediaQuerycontextaccessibleNavigationisActivereasontimeoutdidChangeDependenciesadd
isNotEmpty_updateSnackBar_updateMaterialBannerremovescaffoldfindAncestorStateOfTypecontainsdurationclosebehaviorSnackBarBehaviorfloatingfloatingActionButtonpersistentFooterButtonsbottomNavigationBarcreateAnimationControllervsyncaddStatusListenerisEmptyisDismissedforward_withAnimationfallbackKey	UniqueKey	CompleterfirstsetStateaddLast	exceptionFlutterErrorStringdiagnosticstoDescriptionListDiagnosticsNodeErrorSummaryErrorDescription	ErrorHintdescribeOwnershipChain	fromPartsAnimationStatus	dismissedremoveFirst	completedreverse
_completerisCompletedcompletecancelvaluehidestatusthenmountedcleardebugCheckHasMediaQuery
ModalRoutedynamic	isCurrent_widgetactionscaffoldMessengerStatechildwidgetdisposeInheritedWidgetFloatingActionButtonOffset	immutableSizezeroBottomSheetbody
EdgeInsetsbottomappBartoppaddingresizeToAvoidBottomInsetviewPadding
viewInsetsTextDirection	getOffsetbeginendprogressobjectRuntimeTypeValueNotifier
geometryOfBottomAppBarRectbottomNavigationBarToplerpcenterfloatingActionButtonAreaChangeNotifierValueListenableRenderObjectfindRenderObjectownerdebugDoingPaint_scaleFloatingActionButtonfloatingActionButtonScalecopyWithnotifyListenersBoxConstraintsObjectmaterialBannerHeightbottomWidgetsHeightappBarHeightinthashhashCodeStatelessWidgetLayoutBuilderbuilderconstraintsmaxdataMultiChildLayoutDelegateloosetightenwidthheighthasChildlayoutChildpositionChildpersistentFootermaxWidth	maxHeightmaterialBannerclampDouble	bodyScrimsnackBarbottomSheetbottomSheetSizecontentBottom
contentTopfloatingActionButtonSize	minInsetsscaffoldSizesnackBarSizematerialBannerSizetextDirectionminViewPaddingsizemin	statusBardrawertight	endDrawer_updateWith)floatingActionButtonMoveAnimationProgress$previousFloatingActionButtonLocation#currentFloatingActionButtonLocation
extendBodyextendBodyBehindAppBar	Animation	initStatekFloatingActionButtonSeguecurrentControllerdidUpdateWidgetfabMotionAnimatorfabMoveAnimationkey
AnimatableTween!kFloatingActionButtonTurnIntervalchain
CurveTweencurveCurveseaseInCurvedAnimationparentanimatedrivegetScaleAnimationgetRotationAnimationAnimationMinIntervalTrainHoppingAnimationaddListener
isExtendedStack	alignment	AlignmentcenterRightchildrenFadeTransitionopacityScaleTransitionscaleRotationTransitionturnsgeometryNotifiershowBottomSheetTextCenterAppBarcenterDockedSafeAreaTabBar
TabBarViewTabControllerDrawerBottomNavigationBarshowModalBottomSheetAlignmentDirectional	centerEndstartCircularNotchedRectanglebackgroundColorPreferredSizeWidgetSizedBoxexpandListView
TextButtonOverflowBarltrrtl
openDrawercloseDrawer	NavigatorpopdrawerEnableOpenDragGestureDrawerCallbackopenEndDrawercloseEndDrawerendDrawerEnableOpenDragGestureDrawerThemeData
scrimColorColorsblack54ColorMaterial	ThemeDatascaffoldBackgroundColorLocalHistoryEntryBottomSheetThemeDataprimaryRestorationBucketRestorationScopeRestorationManagerBuilderdescribeElementregisterForUpdates	hasDrawerRestorationMixinrestorationIdregisterForRestorationDrawerControllerStateRestorableBoolcurrentStateonDrawerChangedcallonEndDrawerChanged
IconButtonopen
_snackBars_materialBannersDraggableScrollableNotificationextentinitialExtentprecisionErrorToleranceonRemoveDraggableScrollableActuatorresetaddLocalHistoryEntrygrowablesheetanimationControllerNotificationListeneronNotificationStatefulBuilderStateSetterisPersistent_isLocalHistoryEntryfuturewhenCompleteWidgetBuilderShapeBorderClip
enableDrag	onClosingonDismissed	onDispose shouldDisposeAnimationController	elevationshapeclipBehaviorVoidCallbackfntransitionAnimationController
lowerBound
upperBoundTickerFutureisAnimatinggetAnimationRestartfromScrollControllerPrimaryScrollControllermaybeOf
hasClients	animateToDurationmillisecondseaseOutCircfloatingActionButtonLocationfloatingActionButtonAnimator_unregister	_registerLayoutIdremovePadding
removeLeftremoveLeftPadding	removeTopremoveTopPaddingremoveRightremoveRightPaddingremoveBottomremoveBottomPaddingremoveBottomInsetremoveViewInsetsmaintainBottomViewPaddingidDrawerControllerDrawerAlignmentdrawerCallbackdragStartBehaviordrawerDragStartBehaviordrawerScrimColoredgeDragWidthdrawerEdgeDragWidthenableOpenDragGestureisDrawerOpenblackModalBarrierwithOpacitydebugCheckHasDirectionalityThemeDirectionalityKeyedSubtreedismissiblecolorpreferredHeightForpreferredSizeisFiniteConstrainedBoxFlexibleSpaceBarcreateSettingscurrentExtentbottomCentersnackBarThemefixedMaterialBannerThemeDataMaterialBannerTheme	Container
decorationBoxDecorationborderBorderDividercreateBorderSideIntrinsicHeightpersistentFooterAlignmentallspacingoverflowAlignmentOverflowBarAlignmentplatformTargetPlatformiOSmacOSGestureDetectorHitTestBehavioropaqueonTapexcludeFromSemanticsandroidfuchsialinuxwindowsScrollNotificationObserverAnimatedBuilder	animationActionsactionsTypeActionIntentDismissIntentCustomMultiChildLayoutdelegate"floatingActionButtonMotionAnimatorisSnackBarFloatingextendBodyBehindMaterialBannersnackBarWidthDismissActionisEndDrawerOpenFutureeaseOutParametricCurveeaseOutCubic	transformdescribeIdentityDragStartDetailslinearDragEndDetails$_floatingActionButtonVisibilityValueshowBodyScrim	minExtentAligntopStartheightFactor	Semantics	container	onDismissonDragStart	onDragEndStatefulWidgetStateTickerProviderStateMixinInheritedWidgetFloatingActionButtonLocationChangeNotifierValueListenableBoxConstraintsStatelessWidgetMultiChildLayoutDelegateRestorationMixinDismissActionParametricCurveScaffoldFeatureController ⁄°¶è°2ådxˆ0|ﬂ    Ä¶  
dart:async  Äª  dart:collection  Ä’  ÄÁmathÄÍ	dart:mathÅÅ
lerpDouble ÄÒ  dart:ui  Å  package:flutter/foundation.dartÅdÅzDragStartBehavior Å>  package:flutter/gestures.dart  Å}  package:flutter/widgets.dart  Å•  app_bar.dart  Åº  banner.dart  Å“  banner_theme.dart  ÅÓ  bottom_sheet.dart  Ç
  colors.dart  Ç   curves.dart  Ç6  
debug.dart  ÇK  divider.dart  Çb  drawer.dart  Çx  flexible_space_bar.dart  Çö  floating_action_button.dart  Ç¿  $floating_action_button_location.dart  ÇÔ  material.dart  É  snack_bar.dart  É   snack_bar_theme.dart  É?  
theme.dart    	dart:core¿ Î] ¿ˆÍåﬂ <ÄÜÄ§Ä•Ä∫Ä‘ÄÅÅÅ=Å|Å£Å§ÅªÅ—ÅÌÇ	ÇÇ5ÇJÇaÇwÇôÇøÇÓÉÉÉ>ÉSÉTÉlÉëÉ∑É”ÉÈÑÑÑÉÑÙÑıÖ-ÖyÖùÖ“ÜÜ4Ü5ÜJÜRÜ\ÜiÜxÜÑÜñÜ™Ü¡ÜŸÜ„ÜÜ˝Üˇá áJáNáëáïáÂàààhà≤à„ââ"âjâªääYä|äÄäîä„äÁã:ãJãNãëãïã£ãßãıåFåòåÏç:çeçøçé<éXégéÄéûéüéœé’èèèèmè|èÇèòè‰ê%ê+êÉêïêõêÓë@ëåë÷ííí'íwíƒììVì¢ì«ìÕî%î7î=îâî√î…îŸîﬂï/ïnïæïÎñ&ñCñxñyñÎóóóójóÅóáó⁄ó‡óóˆò?òéòœòÏòÌô_ôäôéôèôõôﬂô·ô‚öööRö£öÓõ9õGõKõ~õ‹ú.úÊùù≤ùﬁù˜ûûû#ûDûÇû“üülüíüªüÁ†	†1†r†x†µ†ÿ†‹†›°°&°'°D°g°ã°ì°î°Ω°Á°Ô°ı°˘°˙¢'¢]¢ê¢•¢©¢™¢∆¢˝££@£j£r£x£|£}£Õ§§>§õ§÷§⁄§€§Ì§Ó•=•ä•—•ˆ•¸¶K¶ò¶Á¶ı¶˚ßLßRß£ß„®2®a®g®∞®–®÷®Ï©=©C©≠©ø©≈©˘©ˇ™Q™°™Ô´A´ë´Á¨	¨¨%¨ê¨ñ≠ ≠≠≠v≠Ç≠ü≠ÓÆÆ"ÆnÆßÆ≈ÆıØØ!ØpØæ∞∞]∞|∞ ∞Û± ±2±S±^±∑±æ±»±‹≤≤≤(≤B≤U≤~≤Ã≥≥g≥ø≥ﬂ¥.¥Ñ¥ª¥Ã¥Âµ9µèµ‘∂+∂Å∂¿∂—∂ˇ∑N∑_∑n∑•∑±∑ª∑–∑‹∑Î∑Ò∑Ú∏	∏∏∏L∏b∏à∏Ø∏≈∏È∏ıππ6π`πjπyπüπµπﬂ∫0∫<∫X∫g∫ã∫ö∫æ∫Õ∫”∫◊∫ÿª"ª5ª;ªåª⁄º8ºTºrºÄºÜºŸº˚ΩΩ#ΩAΩ\ΩñΩºΩ¿Ω¡æææXæ≤æŒø(ø6ø<øèø±øŸø˚¿ @¿ @G¿ @`¿ @Ü¿ @¨¿ @∂¿ @¿¿ @∆¿ @‰¿ @ˇ¿ A¿ A¿ AM¿ Aé¿ A®¿ B¿ B¿ B¿ B~¿ Bñ¿ Bª¿ B÷¿ B⁄¿ B€¿ BÙ¿ Bı¿ CJ¿ Cù¿ CÍ¿ D¿ D¿ Dj¿ D√¿ E¿ E&¿ E,¿ Eâ¿ E…¿ F¿ FS¿ FY¿ F¢¿ F¬¿ F»¿ Fﬁ¿ G5¿ G;¿ G´¿ GΩ¿ H9¿ HE¿ Hb¿ H∑¿ H‰¿ HÎ¿ IC¿ IÇ¿ I¶¿ I‹¿ J¿ J¿ Ji¿ J√¿ K¿ Ki¿ Kà¿ K‚¿ L¿ L ¿ LV¿ L{¿ LÑ¿ L„¿ LÍ¿ L¸¿ M(¿ M0¿ MH¿ M_¿ Mc¿ Md¿ M®¿ Mæ¿ M‰¿ N¿ N'¿ NQ¿ N]¿ Ny¿ N§¿ N‘¿ Nﬁ¿ NÌ¿ O¿ O/¿ O>¿ Ob¿ Oq¿ Oï¿ O§¿ O™¿ OÆ¿ OØ¿ Oˇ¿ P¿ P¿ Po¿ P√¿ Q3¿ QO¿ Qs¿ QÅ¿ Qá¿ QÊ¿ R¿ R*¿ R0¿ R1¿ Rk¿ Ró¿ Rõ¿ Rú¿ RÌ¿ RÛ¿ S9¿ S•¿ S¡¿ T'¿ T5¿ T;¿ Tö¿ Tº¿ TÍ¿ U¿ U¿ U^¿ Uw¿ Uù¿ U√¿ UÕ¿ U◊¿ U›¿ U·¿ U‚¿ V3¿ V|¿ Vú¿ W¿ W¿ W¿ Wñ¿ W¥¿ WÂ¿ X¿ X
¿ X¿ X¿ X>¿ Xl¿ X™¿ XÁ¿ XË¿ Y	¿ YJ¿ Yx¿ Y¬¿ Z ¿ Z9¿ ZM¿ Zï¿ Zﬂ¿ ZÓ¿ [3¿ [y¿ [«¿ [›¿ [Î¿ \2¿ \@¿ \J¿ \R¿ \X¿ \Y¿ \}¿ \°¿ \º¿ \√¿ \«¿ \»¿ \‘¿ \Á¿ ]¿ ])¿ ]D¿ ]Y¿ ]]¿ ]_¿ ]`¿ ]ò¿ ]∫¿ ]‘¿ ^¿ ^I¿ ^J¿ ^Ç¿ ^É¿ ^è¿ _¿ _¿ _¿ _Q¿ _x¿ _|¿ _∂¿ _˛¿ `:¿ `>¿ `~¿ `≥¿ `æ¿ `‡¿ a1¿ ay¿ aù¿ a¿¿ a·¿ aˇ¿ b+¿ bH¿ bj¿ bä¿ b™¿ b–¿ bÒ¿ b˜¿ b¯¿ c-¿ c3¿ c¿ c¶¿ cß¿ c€¿ c·¿ d#¿ dC¿ da¿ db¿ d™¿ d¡¿ d«¿ e¿ eV¿ e§¿ eª¿ e¡¿ f¿ f^¿ fÆ¿ f»¿ fÊ¿ fÁ¿ g.¿ gE¿ gK¿ gê¿ g◊¿ h¿ h¿ h[¿ h®¿ h¯¿ i¿ i'¿ i(¿ ip¿ iâ¿ iè¿ iŸ¿ i¸¿ jP¿ j}¿ jÉ¿ j¡¿ j˜¿ k¿ k¿ kc¿ k|¿ kÇ¿ k—¿ l¿ lk¿ lª¿ lﬁ¿ m¿ m¿ m,¿ m2¿ mÅ¿ mÕ¿ n¿ n¿ nU¿ n£¿ nÛ¿ o¿ o"¿ oq¿ oî¿ oØ¿ o∞¿ o·¿ oÁ¿ p6¿ pQ¿ pR¿ pâ¿ pè¿ p‰¿ q¿ q¿ qD¿ qi¿ qk¿ ql¿ q∏¿ qº¿ r¿ rf¿ rq¿ rΩ¿ ræ¿ s¿ s¿ sG¿ sq¿ s†¿ sπ¿ s∫¿ s∆¿ t¿ t&¿ tV¿ tÇ¿ tú¿ t£¿ tß¿ t®¿ t¥¿ t ¿ uD¿ uH¿ uJ¿ uK¿ uò¿ uú¿ uﬁ¿ v¿ v¿ v\¿ v∞¿ v¥¿ w ¿ wB¿ w^¿ wb¿ w∞¿ wı¿ x ¿ x¿ x]¿ xx¿ xô¿ xº¿ x¬¿ x√¿ y¿ yY¿ y_¿ yï¿ yΩ¿ yæ¿ y˛¿ z¿ zH¿ zp¿ zq¿ zµ¿ z”¿ zÊ¿ zÏ¿ zÌ¿ {¿ {*¿ {b¿ {k¿ {q¿ {r¿ {õ¿ {œ¿ {Ô¿ |¿ |
¿ |G¿ |K¿ |L¿ |§¿ |∫¿ |ÿ¿ |¸¿ } ¿ }'¿ }D¿ }ô¿ }Ù¿ }˚¿ }ˇ¿ ~¿ ~¿ ~h¿ ~°¿ ~¡¿ ~¬¿ ~‡¿ ¿ "¿ #¿ /¿ N¿ ^¿ £¿ Ì¿ Ä	¿ Ä]¿ Ä≥¿ Å¿ Å¿ Å%¿ Å8¿ ÅB¿ Åé¿ Åí¿ Åì¿ Å®¿ ÅÃ¿ Å¿ Ç¿ Ç¿ ÇÄ¿ Ç¢¿ Çÿ¿ É¿ É¿ É0¿ É4¿ É6¿ É7¿ ÉÉ¿ É’¿ Éÿ¿ Ñ#¿ Ñv¿ Ñ≈¿ Ö¿ Öb¿ ÖÑ¿ Ö∑¿ Ö’¿ ÖÈ¿ Ö˛¿ Ü%¿ ÜE¿ Üm¿ Üô¿ Ü¬¿ ÜÁ¿ á	¿ á6¿ á`¿ áa¿ áÖ¿ á¢¿ á«¿ á»¿ à¿ àj¿ àΩ¿ â¿ â¿ â5¿ âO¿ âc¿ âi¿ âë¿ âœ¿ ä¿ ä:¿ ä>¿ ä?¿ äK¿ ä∑¿ äπ¿ ä∫¿ ã¿ ã^¿ ãz¿ ã}¿ ã“¿ å!¿ åN¿ åe¿ åÉ¿ å≠¿ å≈¿ åË¿ ç¿ ç4¿ ç5¿ çJ¿ çc¿ çà¿ çâ¿ çï¿ çº¿ çÓ¿ é¿ é¿ é¿ é"¿ éf¿ éæ¿ é˝¿ é˛¿ è'¿ èy¿ èù¿ èû¿ è–¿ è˙¿ êM¿ ên¿ êo¿ êä¿ ê¨¿ ê€¿ êÛ¿ ë¿ ë ¿ ë-¿ ëD¿ ëO¿ ëX¿ ë_¿ ëc¿ ëe¿ ëf¿ ëü¿ ë≥¿ ë–¿ ëÚ¿ í¿ í7¿ íY¿ íë¿ í»¿ ì¿ ì;¿ ìa¿ ìÇ¿ ì†¿ ì ¿ ì¸¿ î¿ îD¿ îm¿ î™¿ îÊ¿ ï	¿ ï8¿ ï9¿ ïR¿ ïw¿ ïï¿ ï∏¿ ï›¿ ñ¿ ñ¿ ñ]¿ ñß¿ ñ·¿ ó*¿ ó+¿ óL¿ ók¿ ól¿ óô¿ óö¿ ó¶¿ ó»¿ ò¿ ò¿ ò_¿ òÆ¿ ò˛¿ ô:¿ ô;¿ ôò¿ ôø¿ ô‹¿ ö¿ ö!¿ ö"¿ öL¿ ö°¿ ö·¿ õ¿ õ¿ õ ¿ õD¿ õ{¿ õ˜¿ ú/¿ ú{¿ úÿ¿ úﬁ¿ úﬂ¿ ù¿ ùR¿ ùÉ¿ ù–¿ ùŸ¿ ûL¿ ûÅ¿ û¿ ûˆ¿ û˜¿ ü ¿ üR¿ üÆ¿ ü¸¿ ü˝¿ †0¿ †]¿ †é¿ †ñ¿ †ú¿ †ù¿ †Î¿ °/¿ °Q¿ °ª¿ °º¿ °‰¿ ¢,¿ ¢-¿ ¢E¿ ¢s¿ ¢’¿ £.¿ £6¿ £7¿ £y¿ £™¿ £Ã¿ §¿ §J¿ §n¿ §w¿ §Ø¿ §Ò¿ §˜¿ §¯¿ •J¿ •ô¿ •‡¿ ¶*¿ ¶1¿ ¶Ü¿ ¶…¿ ß¿ ßd¿ ß¥¿ ß€¿ ß‹¿ ®¿ ®%¿ ®R¿ ®õ¿ ®Ã¿ ®Ó¿ ®˜¿ ©@¿ ©{¿ ©Å¿ ©Ç¿ ©»¿ ©Ù¿ ™7¿ ™á¿ ™ç¿ ™é¿ ™Ω¿ ´¿ ´2¿ ´p¿ ´y¿ ´—¿ ¨]¿ ¨c¿ ¨d¿ ¨å¿ ¨ƒ¿ ≠"¿ ≠#¿ ≠q¿ ≠ï¿ ≠Ë¿ Æ¿ Æ8¿ ÆÇ¿ ÆÂ¿ Ø¿ Ø2¿ ØP¿ Øl¿ Øê¿ Ø¿¿ ØÊ¿ ∞¿ ∞¿ ∞}¿ ∞Â¿ ±2¿ ±T¿ ±s¿ ±∞¿ ±π¿ ±˝¿ ≤3¿ ≤9¿ ≤:¿ ≤f¿ ≤æ¿ ≤Â¿ ≥	¿ ≥+¿ ≥o¿ ≥z¿ ≥Ç¿ ≥É¿ ≥´¿ ≥˘¿ ¥5¿ ¥D¿ ¥à¿ ¥ÿ¿ µ)¿ µu¿ µä¿ µ÷¿ ∂¿ ∂<¿ ∂W¿ ∂_¿ ∂`¿ ∂∑¿ ∑ ¿ ∑!¿ ∑2¿ ∑v¿ ∑Å¿ ∑Á¿ ∏I¿ ∏¥¿ ∏÷¿ π/¿ πQ¿ πç¿ π‘¿ πÙ¿ ∫S¿ ∫™¿ ª¿ ªS¿ ªd¿ ª}¿ ªÓ¿ ªˇ¿ º¿ º¿ º%¿ º:¿ ºF¿ ºL¿ ºM¿ ºz¿ º€¿ Ω¿ Ω¿ Ω¿ ΩG¿ Ωå¿ Ωƒ¿ Ω ¿ ΩÀ¿ Ω¯¿ æ@¿ æ{¿ æÅ¿ æÇ¿ æ§¿ æ⁄¿ ø¿ ø¿ ø¿ ø ¿ ø,¿ øa¿ øè¿ ø≈¿ ø˘¿ ¿e¿ ¿«¿ ¡'¿ ¡U¿ ¡ú¿ ¡†¿ ¡¢¿ ¡£¿ ¡¿ ¡Ù¿ ¬=¿ ¬A¿ ¬|¿ ¬¡¿ √ ¿ √:¿ √y¿ √£¿ √º¿ √‡¿ ƒ¿ ƒ)¿ ƒN¿ ƒw¿ ƒ°¿ ƒÀ¿ ƒÃ¿ ƒ„¿ ≈¿ ≈G¿ ≈{¿ ≈|¿ ≈∑¿ ≈Ê¿ ≈Á¿ ≈Û¿ ∆S¿ ∆U¿ ∆V¿ ∆–¿ «*¿ «_¿ «è¿ «¡¿ «ˆ¿ »o¿ »†¿ »Ÿ¿ …¿ …'¿ …(¿ …4¿ …I¿ …`¿ …a¿ …ê¿ …º¿ …œ¿  ¿  )¿  *¿  J¿  ù¿  ∑¿  „¿  ¿ À:¿ Àä¿ À´¿ À±¿ Àµ¿ À∂¿ À¬¿ À’¿ À¯¿ Ã¿ Ã¿ Ã¿ Ã¿ Ãb¿ Ãà¿ Õ¿ ÕQ¿ Õl¿ Õr¿ Õ´¿ Õ·¿ Œ:¿ ŒH¿ ŒN¿ Œë¿ Œ”¿ œ¿ œ^¿ œô¿ œ∏¿ œ‹¿ –
¿ –¿ –#¿ –r¿ –¿¿ —¿ —5¿ —Q¿ —r¿ —â¿ —∑¿ —ø¿ —≈¿ —…¿ — ¿ “¿ “D¿ “R¿ “¿ “Ä¿ “ù¿ “Œ¿ ”¿ ”9¿ ”U¿ ”\¿ ”≈¿ ”‹¿ ‘¿ ‘¿ ‘(¿ ‘/¿ ‘0¿ ‘{¿ ‘£¿ ‘ø¿ ‘∆¿ ’9¿ ’:¿ ’p¿ ’Ó¿ ÷r¿ ÷s¿ ÷î¿ ÷¯¿ ◊^¿ ◊Œ¿ ◊œ¿ ÿ=¿ ÿ≠¿ ÿÆ¿ ÿÍ¿ Ÿ'¿ Ÿ+¿ Ÿ,¿ Ÿs¿ ŸÖ¿ Ÿ∂¿ ⁄¿ ⁄(¿ ⁄V¿ ⁄`¿ ⁄h¿ ⁄p¿ ⁄t¿ ⁄u¿ ⁄Æ¿ ⁄ÿ¿ ⁄ˆ¿ ⁄˙¿ ⁄˚¿ €¿ €.¿ €@¿ €h¿ €Ç¿ €«¿ ‹¿ ‹"¿ ‹R¿ ‹w¿ ‹Ö¿ ‹î¿ ‹±¿ ‹ﬂ¿ ›¿ ›;¿ ›b¿ ›s¿ ›Ç¿ ›Ω¿ ›ÿ¿ ﬁ¿ ﬁ.¿ ﬁ]¿ ﬁÄ¿ ﬁè¿ ﬁõ¿ ﬁ®¿ ﬁ√¿ ﬁÓ¿ ﬂ¿ ﬂE¿ ﬂh¿ ﬂw¿ ﬂÑ¿ ﬂç¿ ﬂî¿ ﬂò¿ ﬂô¿ ﬂ∑¿ ‡¿ ‡¿ ‡¿ ‡I¿ ‡r¿ ‡ö¿ ‡°¿ ‡•¿ ‡ß¿ ‡®¿ ‡Í¿ ‡Ó¿ ·2¿ ·6¿ ·k¿ ·º¿ ·Í¿ ·Ó¿ ‚¿ ‚P¿ ‚ú¿ ‚‰¿ „¿ „¿ „¸¿ ‰ ¿ ‰I¿ ‰Y¿ ‰]¿ ‰q¿ ‰ø¿ Â¿ Â]¿ Âó¿ Âõ¿ Ê ¿ Ê¿ ÊM¿ Ê]¿ Êa¿ Êu¿ Ê¬¿ Á¿ Á_¿ Áó¿ ÁÊ¿ Ë¿ Ë!¿ ËÑ¿ Ëà¿ Ë—¿ Ë·¿ ËÂ¿ È!¿ È%¿ Èl¿ È≥¿ È˙¿ ÍA¿ ÍÖ¿ Í∫¿ Í˛¿ Î@¿ ÎO¿ ÎS¿ Îì¿ ÎŸ¿ Ï¿ ÏZ¿ Ïí¿ Ï”¿ ÏÌ¿ ÏÒ¿ Ì¿ Ì¿ Ì%¿ Ì)¿ Ìf¿ Ìù¿ Ì€¿ Ó	¿ Ó¿ ÓT¿ Óë¿ Óﬂ¿ Ô)¿ Ôn¿ Ôy¿ Ô}¿ Ôë¿ Ô‚¿ ,¿ 0¿ <¿ â¿ µ¿ À¿ Ò¿ ÒE¿ ÒQ¿ ÒY¿ Ò`¿ Òh¿ Òx¿ Ò|¿ Ò¿¿ Òˇ¿ Ú6¿ Ú:¿ ÚH¿ ÚL¿ Úú¿ Ú¿¿ Û¿ ÛJ¿ Ûõ¿ ÛÏ¿ Ù:¿ ÙÇ¿ Ùì¿ Ù‚¿ ı+¿ ı<¿ ıç¿ ı‹¿ ˆ-¿ ˆk¿ ˆª¿ ˆ¯¿ ˜@¿ ˜è¿ ˜ƒ¿ ¯¿ ¯`¿ ¯ß¿ ˘¿ ˘,¿ ˘i¿ ˘|¿ ˘ã¿ ˘ú¿ ˘´¿ ˘ ¿ ˘Ò¿ ˙¿ ˙:¿ ˙¿ ˙ê¿ ˙™¿ ˙æ¿ ˙€¿ ˙˘¿ ˚¿ ˚)¿ ˚L¿ ˚e¿ ˚°¿ ˚æ¿ ˚Á¿ ¸¿ ¸ ¿ ¸M¿ ¸}¿ ¸ï¿ ¸µ¿ ¸ÿ¿ ˝¿ ˝7¿ ˝8¿ ˝~¿ ˝…¿ ˛¿ ˛9¿ ˛?¿ ˛å¿ ˛⁄¿ ˛‡¿ ˇ'¿ ˇm¿ ˇπ¿ ¿ H¿ N¿ ^¿ d¿ ¨¿ —¿ Í¿ Î¿9¿Ö¿≥¿π¿ˇ¿¿¿\¿b¿r¿x¿¬¿‹¿¿¿:¿_¿`¿ã¿ë¿’¿¿b¿Ø¿‚¿Ë¿6¿á¿÷¿¿F¿L¿ö¿Í¿7¿l¿Ç¿É¿œ¿’¿ˇ¿%¿&¿t¿z¿Â¿	)¿	*¿	Ö¿	ã¿	ı¿
9¿
:¿
É¿
â¿
”¿¿!¿Z¿`¿õ¿Õ¿¸¿˝¿L¿R¿Ü¿æ¿ø¿	¿U¿¿Ö¿°¿ß¿Ó¿Ù¿G¿v¿|¿í¿Ã¿¿^¿h¿n¿¿¿“¿Í¿Î¿B¿k¿l¿∂¿˚¿%¿+¿G¿M¿ó¿ù¿Û¿"¿(¿>¿n¿≤¿ ¿¿¿l¿~¿ô¿ö¿Ù¿ ¿!¿|¿Ç¿Ã¿¿'¿(¿u¿{¿Ω¿›¿ﬁ¿&¿,¿z¿õ¿°¿Ò¿¿,¿-¿[¿a¿∞¿˛¿4¿:¿ä¿€¿'¿N¿T¿ú¿È¿¿¿j¿≥¿»¿Œ¿¿e¿±¿—¿◊¿Á¿Ì¿;¿r¿∏¿¿F¿c¿d¿≠¿¸¿H¿N¿ñ¿Á¿3¿9¿Q¿y¿z¿√¿…¿ ¿ _¿ e¿ ©¿  ¿ ‡¿ ·¿!$¿!W¿!X¿!¢¿!∞¿!∂¿!¸¿"G¿"ï¿"ﬂ¿#¿#=¿#b¿#c¿#ß¿#¿¿#∆¿#ˇ¿$¿$>¿$h¿$i¿$´¿$ƒ¿$ ¿%¿%	¿%B¿%o¿%p¿%∂¿%º¿&¿&:¿&@¿&ç¿&ﬁ¿&‰¿&Ù¿&˙¿'G¿'Y¿'x¿'y¿'∆¿'Ë¿'Ó¿(;¿(¿(Ö¿(≈¿(À¿(·¿)1¿)b¿)h¿)∂¿)»¿)Œ¿)‰¿*4¿*¿*Ã¿+¿+d¿+v¿+|¿+ ¿+‹¿+‚¿,/¿,z¿, ¿-¿-T¿-Z¿-™¿-Û¿.7¿.=¿.ä¿.—¿/¿/ ¿/t¿/é¿/£¿/©¿/›¿/Ò¿0B¿0K¿0c¿0Œ¿10¿1É¿1å¿1ù¿2 ¿2X¿2Ö¿2Ã¿2’¿2Ê¿3F¿3§¿4¿4c¿4¿¿5¿5G¿5P¿5á¿5è¿5ì¿5î¿5·¿6¿6	¿6Z¿6¢¿6®¿6Ë¿6Ó¿6˛¿7¿7M¿7ò¿7∞¿7Ë¿8¿8B¿8F¿8G¿8î¿8ƒ¿8 ¿9¿9¿9]¿9ß¿9ı¿:¿:¿:Z¿:®¿:Ó¿;¿;#¿;n¿;Ω¿<¿<V¿<h¿<∂¿=¿=?¿=u¿=ã¿=Ê¿=Ò¿>¿>o¿>ƒ¿>œ¿>‚¿?G¿?°¿?–¿@¿@$¿@7¿@ô¿@˘¿AY¿A√¿AŒ¿B¿B¿B¿BB¿BF¿BG¿Bï¿B£¿B©¿Bˆ¿CD¿Cë¿C‚¿C˜¿C˝¿D=¿DC¿DS¿DY¿D™¿DÔ¿EC¿Ek¿Eà¿E¶¿F¿F6¿FC¿Fõ¿F∆¿FÃ¿F–¿F—¿F›¿G¿G¿G¿G.¿G2¿G~¿G¶¿H¿H¿HE¿HF¿HR¿Hõ¿H’¿I¿I¿I¿I+¿I,¿IÜ¿I„¿I‰¿J¿J¿JM¿J|¿J∫¿JÈ¿K*¿K_¿K´¿Kˆ¿K˜¿L¿LD¿LJ¿Lì¿L∆¿M¿ME¿MF¿Mu¿M{¿Mã¿Më¿M›¿MÚ¿N"¿N#¿NU¿N[¿Nk¿Nq¿N¡¿Nÿ¿O¿O¿O=¿Oã¿Oü¿O«¿O—¿Oˇ¿P¿P	¿P
¿P;¿Pè¿P£¿PŒ¿Pÿ¿Q	¿Q¿Q¿Q¿Q7¿Q=¿Qé¿Q¿¿Q∆¿R¿Rd¿Rr¿Rx¿R¿¿R◊¿R›¿S.¿SD¿Så¿S∑¿SΩ¿S‚¿SÊ¿SÁ¿T¿T¿Tm¿T®¿TÆ¿T¸¿UL¿UZ¿U`¿U®¿Uø¿U≈¿V¿V/¿Vq¿Vô¿Vü¿V«¿VÀ¿VÃ¿W¿W3¿W4¿WF¿Wó¿Wò¿WÂ¿X ¿XÉ¿X≤¿X¬¿X√¿Xˆ¿Y
¿Y:¿YD¿YJ¿YN¿YO¿Yh¿Yi¿Y¬¿Y˜¿ZZ¿Z[¿ZÆ¿Zœ¿[j¿[ü¿[Ø¿[∞¿[Ô¿\¿\?¿\I¿\O¿\S¿\T¿\u¿\v¿\ª¿]¿]¿]p¿]±¿]È¿^¿^¿^I¿^é¿^„¿_5¿_`¿_–¿`.¿`à¿`æ¿a
¿aQ¿az¿a¥¿aÁ¿a˜¿bP¿b\¿bó¿b…¿b”¿bÈ¿bÒ¿bÚ¿cJ¿c§¿c¿¿cÔ¿di¿d§¿d—¿d€¿e¿e¿e¿eI¿ej¿e≤¿eÚ¿f"¿fH¿fu¿f”¿f‰¿fÛ¿g ¿g¿g'¿gY¿gb¿gh¿gl¿gm¿gë¿g∏¿g¿h¿h¿h0¿hq¿h†¿h¨¿h¡¿hÕ¿h”¿h◊¿hÿ¿i¿i¿ii¿iÄ¿i§¿iÀ¿i–¿i‘¿i’¿j¿j¿ji¿jÉ¿jÆ¿jŸ¿jﬂ¿j„¿j‰¿k¿kF¿kJ¿kK¿kÜ¿k£¿k√¿k˘¿l¿l,¿lD¿l\¿l}¿lì¿l≈¿lÃ¿l‹¿m3¿mO¿mö¿m€¿n7¿nB¿nJ¿n]¿ng¿nh¿nõ¿o¿o.¿o/¿oN¿om¿on¿o•¿o¡¿oÛ¿p#¿pP¿pX¿p^¿p_¿pÖ¿p†¿p…¿pŸ¿p·¿q¿qO¿qr¿qs¿qç¿q¬¿q ¿qÀ¿q˜¿r¿r/¿r9¿r:¿r¿r∞¿r∏¿r‘¿r⁄¿r€¿s¿s¿sC¿s¢¿s ¿s÷¿s‚¿s„¿t¿t0¿tO¿th¿tÖ¿tç¿tì¿tî¿tº¿t◊¿u¿u6¿uL¿uw¿uâ¿uì¿u–¿uÔ¿u¯¿v¿vL¿vd¿vú¿v™¿v¥¿vΩ¿v”¿v¿w¿w?¿wh¿wr¿w{¿wì¿wµ¿w›¿w˘¿x¿x/¿xO¿xV¿xW¿xp¿x¨¿x≤¿x≥¿x‰¿x˜¿y¿y¿y3¿yW¿yü¿y¥¿yª¿yø¿y¿¿z¿zO¿zU¿zß¿zª¿z¡¿{¿{Q¿{d¿{j¿{µ¿|¿|(¿|.¿|Å¿|«¿}¿}¿}j¿}∏¿}Ï¿}Ú¿~A¿~è¿~≈¿~À¿¿l¿∏¿ﬂ¿Â¿˚¿ÄE¿Äè¿Äø¿Ä≈¿Å(¿Å:¿ÅJ¿ÅP¿Åü¿Å≥¿Åˇ¿ÇL¿Ç\¿Ç≠¿É¿É@¿É]¿Éy¿Éê¿É®¿É¿¿É·¿É˜¿Ñ/¿Ñ6¿ÑF¿Ñn¿Ñä¿Ñ’¿Ö¿Ör¿Ö}¿ÖÖ¿Öò¿Ö¢¿Ö–¿Ö—¿ÖÒ¿Üw¿Üâ¿Üª¿ÜÃ¿ÜÈ¿á¿á<¿áZ¿áp¿áî¿á∂¿á÷¿à'¿à0¿à8¿à¿àÉ¿àÑ¿à§¿à‰¿â'¿ân¿â≠¿âÆ¿âÙ¿âı¿ä6¿ä]¿ä√¿äƒ¿ã¿ãI¿ãá¿ã•¿ãÒ¿å-¿åi¿åp¿åt¿åu¿å¶¿å”¿ç¿ç¿ç¿çj¿çΩ¿é¿é8¿éÆ¿éÈ¿è¥¿ê/¿ê5¿ê6¿êH¿êà¿êª¿ê√¿êƒ¿ë"¿ë¿ëî¿ë·¿ëÂ¿ëÊ¿í¿í¿íh¿í¥¿íﬁ¿í˝¿ì]¿ìÆ¿ì◊¿ì‰¿î¿î=¿îF¿îL¿îP¿îQ¿î`¿îa¿îï¿îñ¿îΩ¿îÒ¿îı¿îˆ¿ï¿ï¿ï.¿ïÑ¿ïˆ¿ñh¿ñ≥¿ñÚ¿ó¿ó¿óG¿óN¿óO¿óî¿ó¿¿ó”¿ó⁄¿óﬁ¿óﬂ¿óÎ¿ò¿ò>¿ò±¿ô
¿ô~¿ôÑ¿ô›¿öL¿öR¿öâ¿öõ¿ö˝¿õ7¿õQ¿õ™¿õ‰¿õÛ¿ú
¿úC¿ú†¿ú€¿úÍ¿ú¯¿ù¿ù¿ù#¿ùK¿ùo¿ùø¿ùÎ¿ù˙¿û"¿û*¿û0¿û4¿û5¿ûA¿ûb¿û≥¿ûÍ¿üK¿üõ¿ü¡¿†¿†L¿†R¿†ó¿† ¿†Û¿†Ù¿°¿°?¿°C¿°D¿°P¿°c¿°Ñ¿°∑¿°¿¢¿¢8¿¢X¿¢m¿¢q¿¢r¿¢à¿¢•¿¢∏¿¢Œ¿¢Û¿£¿£=¿£d¿£à¿£¥¿£ª¿£˚¿§ ¿§C¿§j¿§ì¿§ö¿§∑¿§Ô¿§ı¿§ˆ¿•<¿•X¿•°¿•™¿•∞¿•±¿• ¿•ﬁ¿•¿¶¿¶>¿¶I¿¶R¿¶X¿¶\¿¶]¿¶¨¿¶–¿¶Ï¿ß¿ß¿ß-¿ßK¿ßu¿ß©¿ßÊ¿®¿®J¿®í¿®¬¿®Ê¿®Ò¿©¿©V¿©ï¿©∂¿©ˆ¿™¿™#¿™)¿™-¿™.¿™z¿™õ¿™¥¿™…¿™€¿™ı¿´¿´<¿´m¿´™¿´Ÿ¿¨¿¨S¿¨Ä¿¨°¿¨¨¿¨ ¿≠¿≠M¿≠n¿≠Æ¿≠“¿≠€¿≠·¿≠Â¿≠Ê¿Æ¿Æ-¿Æ.¿Æt¿Æz¿Æ®¿Æ€¿Æˆ¿Ø?¿ØM¿ØS¿Øe¿ØÉ¿Øæ¿Ø∆¿Ø ¿ØÀ¿Ø◊¿Ø˛¿∞,¿∞^¿∞ú¿∞œ¿±¿±¿±F¿±Y¿±i¿±ö¿±¡¿≤ ¿≤@¿≤I¿≤c¿≤É¿≤≤¿≤”¿≥<¿≥p¿≥w¿≥ë¿≥¶¿≥∏¿≥Œ¿≥Ï¿¥¿¥¿¥:¿¥[¿¥{¿¥ù¿¥¿¿¥…¿¥œ¿¥–¿¥Ò¿µ@¿µ®¿µÓ¿∂¿∂¿∂-¿∂r¿∂§¿∂“¿∂ı¿∑¿∑¿∑+¿∑M¿∑n¿∑ë¿∑¥¿∑Ω¿∑√¿∑ƒ¿∑È¿∏¿∏¿∏Q¿∏s¿∏û¿∏∫¿∏ﬂ¿π(¿π3¿π<¿πQ¿πc¿πr¿πï¿π∑¿π◊¿π˙¿∫2¿∫;¿∫A¿∫B¿∫k¿∫ë¿∫Ê¿ª¿ª5¿ª¿ªŸ¿ª⁄¿ªÔ¿º¿º&¿ºF¿ºh¿ºà¿º´¿Ω¿ΩU¿Ω^¿Ωd¿Ωe¿Ωñ¿Ω≈¿ΩÒ¿æD¿æ∞¿æÈ¿æÍ¿æˇ¿ø¿ø<¿øb¿øÑ¿øµ¿øÿ¿ø˚¿¿:¿¿C¿¿I¿¿J¿¿|¿¿ë¿¿£¿¿∂¿¿€¿¿˜¿¡9¿¡H¿¡U¿¡p¿¡à¿¡¨¿¡Ã¿¬	¿¬;¿¬_¿¬}¿¬º¿¬˘¿√¿√¿√,¿√9¿√D¿√l¿√é¿√Æ¿√—¿ƒ¿ƒQ¿ƒZ¿ƒ`¿ƒa¿ƒè¿ƒ§¿ƒ∂¿ƒ⁄¿≈¿≈'¿≈G¿≈j¿≈é¿≈Õ¿≈÷¿≈‹¿≈›¿≈¿∆ ¿∆'¿∆f¿∆†¿∆Õ¿«¿«?¿«H¿«r¿«ë¿«Ø¿«œ¿«¿«˜¿«¯¿»¿»9¿»Z¿»q¿»Ö¿»†¿»Œ¿»ˆ¿…W¿…¿…å¿…Ø¿…”¿…ı¿ ¿ ?¿ J¿ Y¿ |¿ ü¿ ¿¿ „¿ Ú¿ ¯¿ ˘¿À¿ÀH¿Àx¿ÀÖ¿Àµ¿À‚¿ÀË¿ÀÈ¿Ã1¿Ão¿ÃΩ¿Ãƒ¿Ã≈¿Õ¿ÕF¿Õç¿ÕÍ¿ÕÒ¿ÕÚ¿Œ!¿Œi¿Œj¿ŒÖ¿Œ°¿ŒÃ¿Œı¿œ¿œ\¿œﬁ¿œ˙¿–)¿–g¿–x¿–•¿––¿–˙¿—C¿—k¿—ù¿—Ù¿“\¿“±¿“Ë¿”H¿”x¿”≤¿‘¿‘4¿‘G¿‘k¿‘|¿‘ã¿‘ô¿‘§¿‘≠¿‘¥¿‘∏¿‘∫¿‘ª¿‘Ó¿’¿’¿’3¿’4¿’@¿’i¿’ø¿’√¿’ƒ¿’–¿’ˆ¿÷¿÷I¿÷M¿÷O¿÷P¿÷å¿÷ê¿÷‘¿÷˘¿◊0¿◊è¿◊¢¿◊√¿◊ƒ¿ÿ¿ÿB¿ÿC¿ÿ£¿ÿø¿ÿ¿¿Ÿ¿Ÿ/¿Ÿ1¿Ÿ2¿Ÿ~¿ŸŒ¿⁄¿⁄p¿⁄§¿⁄®¿⁄Û¿€=¿€é¿€§¿€®¿€ı¿‹B¿‹í¿‹›¿›¿›¿›Y¿›ú¿›Ω¿›·¿›˝¿ﬁ'¿ﬁQ¿ﬁp¿ﬁq¿ﬁ©¿ﬁØ¿ﬁ›¿ﬁ˚¿ﬁ¸¿ﬂ4¿ﬂI¿ﬂJ¿ﬂV¿ﬂu¿ﬂó¿ﬂ—¿ﬂ“¿ﬂÔ¿ﬂˇ¿‡¿‡¿‡¿‡*¿‡0¿‡1¿‡}¿‡º¿‡Û¿‡˜¿‡¯¿·¿·¿·Z¿·^¿·`¿·a¿·ï¿·¥¿·√¿·Í¿‚¿‚#¿‚B¿‚]¿‚|¿‚ñ¿‚™¿‚∫¿‚—¿‚Á¿‚˚¿„¿„¿„t¿„ç¿„Æ¿„—¿„Ú¿‰¿‰,¿‰L¿‰g¿‰É¿‰ü¿‰ƒ¿‰≈¿‰—¿Â¿Â¿Â¿Âd¿Â™¿Â´¿Â∑¿ÂÃ¿Â„¿Ê¿Ê¿Êb¿Ê≠¿Ê¥¿Ê˚¿Êˇ¿Á ¿Á¿Á¿Á=¿ÁR¿ÁV¿ÁW¿Ác¿Áú¿Á¬¿Ë¿Ë¿Ë¿Ë!¿ËQ¿Ë{¿Ëô¿Ëù¿Ëû¿Ë“¿È¿È;¿È?¿È@¿ÈÖ¿È“¿Í¿Í+¿ÍS¿ÍZ¿Í^¿Í_¿Íî¿Í√¿ÍÂ¿ÍÎ¿ÍÔ¿Í¿Î5¿Îs¿Î¨¿ÎÍ¿ÏY¿Ïá¿Ï≠¿Ì¿Ì¿Ì¿ÌU¿Ì¿ÌÖ¿Ì“¿Ó2¿ÓA¿ÓG¿ÓY¿Ó]¿Ó^¿Ój¿Óë¿Ó≠¿Ó⁄¿Ô¿Ô'¿Ô[¿ÔØ¿Ô«¿Ô“¿Ô€¿ÔÛ¿¿D¿ã¿¥¿“¿Ò¿Ò:¿Òe¿Òå¿Ò∂¿Ò€¿Ú¿Ú9¿ÚZ¿Úâ¿Ú∂¿Ú√¿ÚŒ¿Ú◊¿Úﬁ¿Ú‚¿Ú„¿ÚÂ¿ÚÊ¿Û$¿Û(¿Ûu¿Ûy¿Ûƒ¿Ù¿Ù"¿Ùà¿Ù≥¿Ù≈¿Ù⁄¿ÙÎ¿ı¿ı*¿ı;¿ı<¿ı_¿ıa¿ıb¿ıë¿ı™¿ı«¿ıÎ¿ˆ¿ˆ'¿ˆ(¿ˆ@¿ˆt¿ˆu¿ˆÅ¿ˆ∑¿ˆ‰¿ˆË¿ˆÍ    Ä•  Ä∫  Ä‘ÄÎ Ä ÅÅÅ  Å= ÅdÅzÅ|  Å§  Åª  Å—  ÅÌ  Ç	  Ç  Ç5  ÇJ  Ça  Çw  Çô  Çø  ÇÓ  É  É  É>    á í‡ç≈Üæ/// Manages [SnackBar]s and [MaterialBanner]s for descendant [Scaffold]s.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=lytQi-slT5Y}
///
/// This class provides APIs for showing snack bars and material banners at the
/// bottom and top of the screen, respectively.
///
/// To display one of these notifications, obtain the [ScaffoldMessengerState]
/// for the current [BuildContext] via [ScaffoldMessenger.of] and use the
/// [ScaffoldMessengerState.showSnackBar] or the
/// [ScaffoldMessengerState.showMaterialBanner] functions.
///
/// When the [ScaffoldMessenger] has nested [Scaffold] descendants, the
/// ScaffoldMessenger will only present the notification to the root Scaffold of
/// the subtree of Scaffolds. In order to show notifications for the inner, nested
/// Scaffolds, set a new scope by instantiating a new ScaffoldMessenger in
/// between the levels of nesting.
///
/// {@tool dartpad}
/// Here is an example of showing a [SnackBar] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.0.dart **
/// {@end-tool}
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=lytQi-slT5Y}
///
/// See also:
///
///  * [SnackBar], which is a temporary notification typically shown near the
///    bottom of the app using the [ScaffoldMessengerState.showSnackBar] method.
///  * [MaterialBanner], which is a temporary notification typically shown at the
///    top of the app using the [ScaffoldMessengerState.showMaterialBanner] method.
///  * [debugCheckHasScaffoldMessenger], which asserts that the given context
///    has a [ScaffoldMessenger] ancestor.
///  * Cookbook: [Display a SnackBar](https://flutter.dev/docs/cookbook/design/snackbars) çÚÄ´ éDéUI/// Creates a widget that manages [SnackBar]s for [Scaffold] descendants.é\	éc  ékéz  éáéçéõéîéééóé°yè`/// The widget below this widget in the tree.
///
/// {@macro flutter.widgets.ProxyWidget.child}  èá˘ñÜÖ/// The state from the closest instance of this class that encloses the given
/// context.
///
/// {@tool dartpad}
/// Typical usage of the [ScaffoldMessenger.of] function is to call it in
/// response to a user gesture or an application state change.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.of.0.dart **
/// {@end-tool}
///
/// A less elegant but more expedient solution is to assign a [GlobalKey] to the
/// [ScaffoldMessenger], then use the `key.currentState` property to obtain the
/// [ScaffoldMessengerState] rather than using the [ScaffoldMessenger.of]
/// function. The [MaterialApp.scaffoldMessengerKey] refers to the root
/// ScaffoldMessenger that is provided by default.
///
/// {@tool dartpad}
/// Sometimes [SnackBar]s are produced by code that doesn't have ready access
/// to a valid [BuildContext]. One such example of this is when you show a
/// SnackBar from a method outside of the `build` function. In these
/// cases, you can assign a [GlobalKey] to the [ScaffoldMessenger]. This
/// example shows a key being used to obtain the [ScaffoldMessengerState]
/// provided by the [MaterialApp].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.of.1.dart **
/// {@end-tool}
///
/// If there is no [ScaffoldMessenger] in scope, then this will assert in
/// debug mode, and throw an exception in release mode.
///
/// See also:
///
///  * [maybeOf], which is a similar function but will return null instead of
///    throwing if there is no [ScaffoldMessenger] ancestor.
///  * [debugCheckHasScaffoldMessenger], which asserts that the given context
///    has a [ScaffoldMessenger] ancestor. ññ   óÇqòØÅa/// The state from the closest instance of this class that encloses the given
/// context, if any.
///
/// Will return null if a [ScaffoldMessenger] is not found in the given context.
///
/// See also:
///
///  * [of], which is a similar function, except that it will throw an
///    exception if a [ScaffoldMessenger] is not found in the given context. ò∑ò≈   ôëMô¥   ôëôí ô‚¿ C|õÑÅõ/// State for a [ScaffoldMessenger].
///
/// A [ScaffoldMessengerState] object can be used to [showSnackBar] or
/// [showMaterialBanner] for every registered [Scaffold] that is a descendant of
/// the associated [ScaffoldMessenger]. Scaffolds will register to receive
/// [SnackBar]s and [MaterialBanner]s from their closest ScaffoldMessenger
/// ancestor.
///
/// Typically obtained via [ScaffoldMessenger.of].  õﬁNú úúú)úú*ú+ú0Ä¥úÉ 
úñúõú·úúúµú‡ú∂ú∆ú‚ú„úË.ú˝  ùÄñùa 
ùnùsù≠ùtùçù¨ùéùòùÆùØù¥(ù…  ù‡ùÁ  ù˘ùˇ   ûÇ¬û*   ûû†ﬂÅ†‰  †Ó†˝   °¸Ä¨¢  ¢¢   ¢¨Äœ¢±    §Ä¬§  §$§3   §ì≠Tá’/// Shows a [SnackBar] across all registered [Scaffold]s. Scaffolds register
/// to receive snack bars from their closest [ScaffoldMessenger] ancestor.
/// If there are several registered scaffolds the snack bar is shown
/// simultaneously on all of them.
///
/// A scaffold can show at most one snack bar at a time. If this function is
/// called while another snack bar is already visible, the given snack bar
/// will be added to a queue and displayed after the earlier snack bars have
/// closed.
///
/// To control how long a [SnackBar] remains visible, use [SnackBar.duration].
///
/// To remove the [SnackBar] with an exit animation, use [hideCurrentSnackBar]
/// or call [ScaffoldFeatureController.close] on the returned
/// [ScaffoldFeatureController]. To remove a [SnackBar] suddenly (without an
/// animation), use [removeCurrentSnackBar].
///
/// See [ScaffoldMessenger.of] for information about how to obtain the
/// [ScaffoldMessengerState].
///
/// {@tool dartpad}
/// Here is an example of showing a [SnackBar] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_snack_bar.0.dart **
/// {@end-tool}
///
/// ## Relative positioning of floating SnackBars
///
/// A [SnackBar] with [SnackBar.behavior] set to [SnackBarBehavior.floating] is
/// positioned above the widgets provided to [Scaffold.floatingActionButton],
/// [Scaffold.persistentFooterButtons], and [Scaffold.bottomNavigationBar].
/// If some or all of these widgets take up enough space such that the SnackBar
/// would not be visible when positioned above them, an error will be thrown.
/// In this case, consider constraining the size of these widgets to allow room for
/// the SnackBar to be visible.
///
/// {@tool dartpad}
/// Here is an example showing that a floating [SnackBar] appears above [Scaffold.floatingActionButton].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_snack_bar.1.dart **
/// {@end-tool}
/// ≠a≠k   ∏Ç∆∏  ∏2∏C   ∫⁄ÇÂª·Ä˜/// Removes the current [SnackBar] (if any) immediately from registered
/// [Scaffold]s.
///
/// The removed snack bar does not run its normal exit animation. If there are
/// any queued snack bars, they begin their entrance animation immediately. ª˘9º  ºº+º,Ω√É?æ_Äê/// Removes the current [SnackBar] by running its normal exit animation.
///
/// The closed completer is called after the animation is complete. æu7æã  æìæßæ®¿ AÅ”¿ AïÄÖ/// Removes all the snackBars currently in queue by clearing the queue
/// and running normal exit animation on the current snackBar.   ¿ B˜äk¿ HÑô/// Shows a [MaterialBanner] across all registered [Scaffold]s. Scaffolds register
/// to receive material banners from their closest [ScaffoldMessenger] ancestor.
/// If there are several registered scaffolds the material banner is shown
/// simultaneously on all of them.
///
/// A scaffold can show at most one material banner at a time. If this function is
/// called while another material banner is already visible, the given material banner
/// will be added to a queue and displayed after the earlier material banners have
/// closed.
///
/// To remove the [MaterialBanner] with an exit animation, use [hideCurrentMaterialBanner]
/// or call [ScaffoldFeatureController.close] on the returned
/// [ScaffoldFeatureController]. To remove a [MaterialBanner] suddenly (without an
/// animation), use [removeCurrentMaterialBanner].
///
/// See [ScaffoldMessenger.of] for information about how to obtain the
/// [ScaffoldMessengerState].
///
/// {@tool dartpad}
/// Here is an example of showing a [MaterialBanner] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_material_banner.0.dart **
/// {@end-tool} ¿ H¿ H(   ¿ MfÇG¿ Mk  ¿ Mé¿ Mü   ¿ O±ÇÈ¿ P Å	/// Removes the current [MaterialBanner] (if any) immediately from registered
/// [Scaffold]s.
///
/// The removed material banner does not run its normal exit animation. If there are
/// any queued material banners, they begin their entrance animation immediately. ¿ PËE¿ Q  ¿ Q¿ Q&¿ Q'¿ RûÉB¿ S@Äñ/// Removes the current [MaterialBanner] by running its normal exit animation.
///
/// The closed completer is called after the animation is complete. ¿ S\C¿ Sx  ¿ SÄ¿ Sö¿ Sõ¿ U‰Ç%¿ VÉÄï/// Removes all the [MaterialBanner]s currently in queue by clearing the queue
/// and running normal exit animation on the current [MaterialBanner].   ¿ XÑπ¿ X   ¿ X&¿ X4  ¿ X¿ X¿ \ Äí¿ \€   ¿ \ ¿ \À ¿ ]`Å¢¿ ]f  ¿ ]öÄÆ ¿ ]†¿ ]∑ ¿ ]æ¿ ]Œ  ¿ ]ÿ6¿ ]˘  ¿ ^/¿ ^¿ ^1¿ ^L4¿ ^i   ¿ ^Ö{¿ ^ñ  ¿ ^©¿ ^¬  ¿ ^Ö¿ ^Ü ¿ _íf¿ `ƒÅÆ/// The geometry of the [Scaffold] after all its contents have been laid out
/// except the [FloatingActionButton].
///
/// The [Scaffold] passes this pre-layout geometry to its
/// [FloatingActionButtonLocation], which produces an [Offset] that the
/// [Scaffold] uses to position the [FloatingActionButton].
///
/// For a description of the [Scaffold]'s geometry after it has
/// finished laying out, see the [ScaffoldGeometry]. ¿ `‚Ç ¿ aÅ¿ aöÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.
¿ a°¿ a∞  ¿ aƒ¿ a”  ¿ aÂ¿ aÙ  ¿ b&¿ b  ¿ b/¿ b>  ¿ bL¿ b[  ¿ bn¿ b}  ¿ bé¿ bù  ¿ bÆ ¿ bΩ  ¿ b‘¿ b„   
¿ b˙Ä™¿ cåÄÄ/// The [Size] of [Scaffold.floatingActionButton].
///
/// If [Scaffold.floatingActionButton] is null, this will be [Size.zero]. ¿ c©Ä∂¿ dPÄì/// The [Size] of the [Scaffold]'s [BottomSheet].
///
/// If the [Scaffold] is not currently showing a [BottomSheet],
/// this will be [Size.zero]. ¿ ddÇÄ¿ f◊ÇM/// The vertical distance from the Scaffold's origin to the bottom of
/// [Scaffold.body].
///
/// This is useful in a [FloatingActionButtonLocation] designed to
/// place the [FloatingActionButton] at the bottom of the screen, while
/// keeping it above the [BottomSheet], the [Scaffold.bottomNavigationBar],
/// or the keyboard.
///
/// The [Scaffold.body] is laid out with respect to [minInsets] already. This
/// means that a [FloatingActionButtonLocation] does not need to factor in
/// [EdgeInsets.bottom] of [minInsets] when aligning a [FloatingActionButton]
/// to [contentBottom]. ¿ fÈÇ<¿ iÇ/// The vertical distance from the [Scaffold]'s origin to the top of
/// [Scaffold.body].
///
/// This is useful in a [FloatingActionButtonLocation] designed to
/// place the [FloatingActionButton] at the top of the screen, while
/// keeping it below the [Scaffold.appBar].
///
/// The [Scaffold.body] is laid out with respect to [minInsets] already. This
/// means that a [FloatingActionButtonLocation] does not need to factor in
/// [EdgeInsets.top] of [minInsets] when aligning a [FloatingActionButton] to
/// [contentTop]. ¿ i*ÅÈ¿ k
Å∫/// The minimum padding to inset the [FloatingActionButton] by for it
/// to remain visible.
///
/// This value is the result of calling [MediaQueryData.padding] in the
/// [Scaffold]'s [BuildContext],
/// and is useful for insetting the [FloatingActionButton] to avoid features like
/// the system status bar or the keyboard.
///
/// If [Scaffold.resizeToAvoidBottomInset] is set to false,
/// [EdgeInsets.bottom] of [minInsets] will be 0.0. ¿ kÅÁ¿ lÒÅ∑/// The minimum padding to inset interactive elements to be within a safe,
/// un-obscured space.
///
/// This value reflects the [MediaQueryData.viewPadding] of the [Scaffold]'s
/// [BuildContext] when [Scaffold.resizeToAvoidBottomInset] is false or and
/// the [MediaQueryData.viewInsets] > 0.0. This helps distinguish between
/// different types of obstructions on the screen, such as software keyboards
/// and physical device notches. ¿ mÇ©¿ o°Çw/// The [Size] of the whole [Scaffold].
///
/// If the [Size] of the [Scaffold]'s contents is modified by values such as
/// [Scaffold.resizeToAvoidBottomInset] or the keyboard opening, then the
/// [scaffoldSize] will not reflect those changes.
///
/// This means that [FloatingActionButtonLocation]s designed to reposition
/// the [FloatingActionButton] based on events such as the keyboard popping
/// up should use [minInsets] to make sure that the [FloatingActionButton] is
/// inset by enough to remain visible.
///
/// See [minInsets] and [MediaQueryData.padding] for more information on the
/// appropriate insets to apply. ¿ o≤Äù¿ pC/// The [Size] of the [Scaffold]'s [SnackBar].
///
/// If the [Scaffold] is not showing a [SnackBar], this will be [Size.zero]. ¿ pTÄØ¿ pÒÄã/// The [Size] of the [Scaffold]'s [MaterialBanner].
///
/// If the [Scaffold] is not showing a [MaterialBanner], this will be [Size.zero]. ¿ q_¿ qZ;/// The [TextDirection] of the [Scaffold]'s [BuildContext].   ¿ `≥¿ `¥¿ qlÉ›¿ rwÄ˘/// A snapshot of a transition between two [FloatingActionButtonLocation]s.
///
/// [ScaffoldState] uses this to seamlessly change transition animations
/// when a running [FloatingActionButtonLocation] transition is interrupted by a new transition. ¿ r¿Y ¿ r∆¿ r‰ ¿ rÂ
¿ rÎ  ¿ rÒ¿ r˜  ¿ r˚¿ s  ¿ s
¿ s   ¿ s(¿ s@  ¿ sI&¿ sl  ¿ ss+¿ sñ  ¿ s¢¿ sØ   ¿ sºÄÍ¿ sœ  ¿ sŸ*¿ sÙ  ¿ sº¿ sΩ¿ t™Äù¿ tΩ   ¿ t™¿ t´¿ rf¿ rg¿ uKàµ¿ xÇ©/// Geometry information for [Scaffold] components after layout is finished.
///
/// To get a [ValueNotifier] for the scaffold geometry of a given
/// [BuildContext], use [Scaffold.geometryOf].
///
/// The ScaffoldGeometry is only available during the paint phase, because
/// its value is computed during the animation and layout phases prior to painting.
///
/// For an example of using the [ScaffoldGeometry], see the [BottomAppBar],
/// which uses the [ScaffoldGeometry] to paint a notch around the
/// [FloatingActionButton].
///
/// For information about the [Scaffold]'s geometry that is used while laying
/// out the [FloatingActionButton], see [ScaffoldPrelayoutGeometry]. ¿ xÄ¶ ¿ xe¿ xuA/// Create an object that describes the geometry of a [Scaffold].¿ x|¿ xÇ  ¿ xù¿ x£   ¿ x≈Äˆ¿ y•Ä…/// The distance from the [Scaffold]'s top edge to the top edge of the
/// rectangle in which the [Scaffold.bottomNavigationBar] bar is laid out.
///
/// Null if [Scaffold.bottomNavigationBar] is null. ¿ y¿ÄÆ¿ zVÄÉ/// The [Scaffold.floatingActionButton]'s bounding rectangle.
///
/// This is null when there is no floating action button showing.  ¿ zsÅ◊¿ zÑ  ¿ zü¿ zß   ¿ |NÅ∞¿ |Õi/// Creates a copy of this [ScaffoldGeometry] but with the given fields replaced with
/// the new values. ¿ |‹¿ |Â  ¿ } ¿ }   ¿ wı¿ wˆ¿ ~Ö3¿ ~  ¿ ~jV ¿ ~j¿ ~É ¿ ~Ñ¿ ~ä  ¿ ~ì¿ ~ô  ¿ ~ß¿ ~Æ¿ ~æ¿ ~∑¿ ~Ø¿ ~∫¿ ~ƒ¿ ~◊  ¿ ~‚!¿ ~Í  ¿ ¿   ¿ %Çl¿ F   ¿ %¿ &¿ ÅïÅû¿ Åö  ¿ Å¨¿ Åµ  ¿ Å–¿ Å◊  ¿ ÅÙ!¿ Å˝    ¿ ÖÑÖ4¿ Öä  ¿ ÖπÅ¶ ¿ Öø¿ Ö“ ¿ ÖŸ¿ Ö‡  ¿ ÖÌ¿ ÖÙ  ¿ Ü!¿ Ü  ¿ Ü)¿ Ü8  ¿ ÜI"¿ ÜX  $¿ Üt¿ Üz¿ Üñ¿ Üè¿ Ü{¿ Üí¿ Ü†¿ Ü¶¿ Üø¿ Üª¿ Üß¿ Üæ¿ Ü…¿ Üœ¿ Ü‰¿ Ü›¿ Ü–¿ Ü‡¿ ÜÓ¿ ÜÙ¿ á¿ á¿ Üı¿ á¿ á¿ á¿ á3¿ á,¿ á¿ á/¿ á=¿ áC¿ á]¿ áY¿ áD¿ á\¿ ác ¿ áp  ¿ áá¿ áî  ¿ á§!¿ á±  ¿ äAu¿ äU   ¿ äA¿ äB¿ âÅ5¿ â"  ¿ â%¿ â-  ¿ â¿ â	 ¿ å!ÖC¿ å'  ¿ åPÄ„ ¿ åV¿ åb ¿ åi¿ åx  ¿ åá$¿ åñ  ¿ å±¿ å¿  ¿ åÃ¿ å“¿ åÂ¿ åﬁ¿ å”¿ å·¿ åÔ¿ åı¿ ç¿ ç¿ åˆ¿ ç¿ ç¿ ç$¿ ç1¿ ç*¿ ç%¿ ç-¿ ç7¿ çD  ¿ çL¿ çW  ¿ çe!¿ çp   ¿ çãÉ◊¿ çû  ¿ ç§¿ ç≤  ¿ çã¿ çå ¿ ëf∞;¿ ël  ¿ ë°Éñ ¿ ë°¿ ë∞ ¿ ë∑¿ ë∆  ¿ ë‘¿ ë„  ¿ ëˆ¿ í  ¿ í¿ í&  ¿ í]2¿ íl  ¿ íï1¿ í§  ¿ íÃ7¿ í€  ¿ ì	0¿ ì  ¿ ì? ¿ ìN  ¿ ìe¿ ìt  ¿ ìÜ¿ ìï  ¿ ì§$¿ ì≥  ¿ ìŒ,¿ ì›  *¿ î¿ î	¿ î¿ î¿ î
¿ î¿ î%¿ î+¿ îA¿ î:¿ î,¿ î=¿ îK¿ îQ¿ îj¿ îc¿ îR¿ îf¿ ît¿ îz¿ îß¿ î†¿ î{¿ î£¿ î±¿ î∑¿ î„¿ î‹¿ î∏¿ îﬂ¿ îÌ¿ îÛ¿ ï¿ îˇ¿ îÙ¿ ï¿ ï¿ ï¿ ï5¿ ï.¿ ï¿ ï1¿ ï;¿ ïF  ¿ ïT!¿ ï_  ¿ ïy¿ ïä  ¿ ïó¿ ï®  ¿ ï∫!¿ ïŒ  ¿ ïﬂ0¿ ïˇ  ¿ ñG¿ ñ7  ¿ ñ_F¿ ñÇ  ¿ ñ©6¿ ñ∂  ¿ ñ„E¿ ó  ¿ ó-¿ ó8  ¿ óN¿ ó\  ¿ ón)¿ óy   ¿ óúßÇ¿ ó≠  ¿ óª	¿ ó¡  ¿ óú¿ óù¿ ø"Ç}¿ ø3  ¿ øB¿ øS  ¿ ø"¿ ø# ¿ ¡£Ñ±¿ √@Åñ/// Handler for scale and rotation animations in the [FloatingActionButton].
///
/// Currently, there are two types of [FloatingActionButton] animations:
///
/// * Entrance/Exit animations, which this widget triggers
///   when the [FloatingActionButton] is added, updated, or removed.
/// * Motion animations, which are triggered by the [Scaffold]
///   when its [FloatingActionButtonLocation] is updated. ¿ √{ÅO ¿ √Å¿ √† ¿ √ß¿ √∂  ¿ √¿¿ √œ  ¿ √‰¿ √Û  ¿ ƒ	¿ ƒ  ¿ ƒ-¿ ƒ<  ¿ ƒU¿ ƒ[¿ ƒt¿ ƒm¿ ƒ\¿ ƒp¿ ƒ~¿ ƒÑ¿ ƒû¿ ƒó¿ ƒÖ¿ ƒö¿ ƒ®¿ ƒÆ¿ ƒ»¿ ƒ¡¿ ƒØ¿ ƒƒ¿ ƒŒ¿ ƒ‹  ¿ ƒÂ(¿ ƒ˝  ¿ ≈4¿ ≈4  ¿ ≈I0¿ ≈i  ¿ ≈~f¿ ≈”8/// Controls the current child widget.child as it exits.  ¿ ≈Èi¿ ∆   ¿ ≈È¿ ≈Í ¿ ∆VöP¿ ∆\   ¿ «a,¿ «z  ¿ «ë.¿ «®  ¿ «√1¿ «⁄  ¿ »q-¿ »à  ¿ »¢5¿ »π  ¿ »€0¿ »Ú  ¿ …¿ …  ¿ —ÃÄ±¿ —Ï ¿ “¿ “¿ “¿ “¿ “¿ “T¿ “¿ “¿ “¿ “¿ “!¿ “K¿ “H¿ “M¿ “U¿ “V¿ “[¿ “|¿ “\¿ “f¿ “{¿ “l¿ “g¿ “n¿ “t¿ “u 	¿ …*Çä¿ …;   ¿ …*¿ …+¿ À∏X¿ À…   ¿ À∏¿ Àπ¿ ÃÖ¥¿ Ã%  ¿ Ã5)¿ ÃV  ¿ Ã¿ Ã¿ “ÇÜ®¿ “á    ¿ Ÿ.ÅE¿ Ÿ3  ¿ ŸY¿ Ÿj   ¿ ⁄wÄÇ¿ ⁄|  ¿ ⁄ú¿ ⁄•   ¿ ⁄˝Ñö¿ €  ¿ €¿ €$  ¿ ⁄˝¿ ⁄˛¿ ﬂõÄÄ¿ ﬂ†    ¿ ‡ÄÖ¿ ‡$  ¿ ‡9¿ ‡A    ¿ ‡®¿ fh¿ ˘
ò[/// Implements the basic Material Design visual layout structure.
///
/// This class provides APIs for showing drawers and bottom sheets.
///
/// To display a persistent bottom sheet, obtain the
/// [ScaffoldState] for the current [BuildContext] via [Scaffold.of] and use the
/// [ScaffoldState.showBottomSheet] function.
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with a [body] and [FloatingActionButton].
/// The [body] is a [Text] placed in a [Center] in order to center the text
/// within the [Scaffold]. The [FloatingActionButton] is connected to a
/// callback that increments a counter.
///
/// ![The Scaffold has a white background with a blue AppBar at the top. A blue FloatingActionButton is positioned at the bottom right corner of the Scaffold.](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold.png)
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with a blueGrey [backgroundColor], [body]
/// and [FloatingActionButton]. The [body] is a [Text] placed in a [Center] in
/// order to center the text within the [Scaffold]. The [FloatingActionButton]
/// is connected to a callback that increments a counter.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_background_color.png)
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.1.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with an [AppBar], a [BottomAppBar] and a
/// [FloatingActionButton]. The [body] is a [Text] placed in a [Center] in order
/// to center the text within the [Scaffold]. The [FloatingActionButton] is
/// centered and docked within the [BottomAppBar] using
/// [FloatingActionButtonLocation.centerDocked]. The [FloatingActionButton] is
/// connected to a callback that increments a counter.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_bottom_app_bar.png)
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.2.dart **
/// {@end-tool}
///
/// ## Scaffold layout, the keyboard, and display "notches"
///
/// The scaffold will expand to fill the available space. That usually
/// means that it will occupy its entire window or device screen. When
/// the device's keyboard appears the Scaffold's ancestor [MediaQuery]
/// widget's [MediaQueryData.viewInsets] changes and the Scaffold will
/// be rebuilt. By default the scaffold's [body] is resized to make
/// room for the keyboard. To prevent the resize set
/// [resizeToAvoidBottomInset] to false. In either case the focused
/// widget will be scrolled into view if it's within a scrollable
/// container.
///
/// The [MediaQueryData.padding] value defines areas that might
/// not be completely visible, like the display "notch" on the iPhone
/// X. The scaffold's [body] is not inset by this padding value
/// although an [appBar] or [bottomNavigationBar] will typically
/// cause the body to avoid the padding. The [SafeArea]
/// widget can be used within the scaffold's body to avoid areas
/// like display notches.
///
/// ## Troubleshooting
///
/// ### Nested Scaffolds
///
/// The Scaffold is designed to be a top level container for
/// a [MaterialApp]. This means that adding a Scaffold
/// to each route on a Material app will provide the app with
/// Material's basic visual layout structure.
///
/// It is typically not necessary to nest Scaffolds. For example, in a
/// tabbed UI, where the [bottomNavigationBar] is a [TabBar]
/// and the body is a [TabBarView], you might be tempted to make each tab bar
/// view a scaffold with a differently titled AppBar. Rather, it would be
/// better to add a listener to the [TabController] that updates the
/// AppBar
///
/// {@tool snippet}
/// Add a listener to the app's tab controller so that the [AppBar] title of the
/// app's one and only scaffold is reset each time a new tab is selected.
///
/// ```dart
/// TabController(vsync: tickerProvider, length: tabCount)..addListener(() {
///   if (!tabController.indexIsChanging) {
///     setState(() {
///       // Rebuild the enclosing scaffold with a new AppBar title
///       appBarTitle = 'Tab ${tabController.index}';
///     });
///   }
/// })
/// ```
/// {@end-tool}
///
/// Although there are some use cases, like a presentation app that
/// shows embedded flutter content, where nested scaffolds are
/// appropriate, it's best to avoid nesting scaffolds.
///
/// See also:
///
///  * [AppBar], which is a horizontal bar typically shown at the top of an app
///    using the [appBar] property.
///  * [BottomAppBar], which is a horizontal bar typically shown at the bottom
///    of an app using the [bottomNavigationBar] property.
///  * [FloatingActionButton], which is a circular button typically shown in the
///    bottom right corner of the app using the [floatingActionButton] property.
///  * [Drawer], which is a vertical panel that is typically displayed to the
///    left of the body (and often hidden on phones) using the [drawer]
///    property.
///  * [BottomNavigationBar], which is a horizontal array of buttons typically
///    shown along the bottom of the app using the [bottomNavigationBar]
///    property.
///  * [BottomSheet], which is an overlay typically shown near the bottom of the
///    app. A bottom sheet can either be persistent, in which case it is shown
///    using the [ScaffoldState.showBottomSheet] method, or modal, in which case
///    it is shown using the [showModalBottomSheet] function.
///  * [SnackBar], which is a lightweight message with an optional action which
///    briefly displays at the bottom of the screen. Use the
///    [ScaffoldMessengerState.showSnackBar] method to show snack bars.
///  * [MaterialBanner], which displays an important, succinct message, at the
///    top of the screen, below the app bar. Use the
///    [ScaffoldMessengerState.showMaterialBanner] method to show material banners.
///  * [ScaffoldState], which is the state associated with this widget.
///  * <https://material.io/design/layout/responsive-layout-grid.html>
///  * Cookbook: [Add a Drawer to a screen](https://flutter.dev/docs/cookbook/design/drawer) ¿ ˘.Ñ ¿ ˘q¿ ˘y:/// Creates a visual scaffold for Material Design widgets.¿ ˘Ä	¿ ˘á  ¿ ˘è¿ ˘ï  ¿ ˘†	¿ ˘¶  ¿ ˘Ø¿ ˘µ  ¿ ˘Œ!¿ ˘‘  ¿ ˘ı!¿ ˘˚  ¿ ˙¿ ˙"  ¿ ˙>?¿ ˙D  ¿ ˙É¿ ˙â  ¿ ˙î¿ ˙ö  ¿ ˙Æ¿ ˙¥  ¿ ˙¬¿ ˙»  ¿ ˙ﬂ¿ ˙Â  ¿ ˙˝¿ ˚  ¿ ˚¿ ˚  ¿ ˚-¿ ˚3  ¿ ˚P¿ ˚V  ¿ ˚i6¿ ˚o  ¿ ˚•¿ ˚´  ¿ ˚¬#¿ ˚»  ¿ ˚Î¿ ˚Ò  ¿ ¸¿ ¸  ¿ ¸$'¿ ¸*  ¿ ¸Q*¿ ¸W  ¿ ¸Å¿ ¸á  #¿ ˙_¿ ˙s¿ ˙t¿ ˚_¿ ˚à¿ ˚ô¿ ˚ö¿ ˚∑¿ ˚‡¿ ¸G¿ ¸w¿ ¸ú¿ ¸¢¿ ¸≤¿ ¸´¿ ¸£¿ ¸Æ¿ ¸º¿ ¸¬¿ ¸’¿ ¸Œ¿ ¸√¿ ¸—¿ ¸ﬂ¿ ¸Â¿ ˝¿ ¸˝¿ ¸Ê¿ ˝ ¿ ˝¿ ˝¿ ˝4¿ ˝-¿ ˝¿ ˝0¿ ˝:ÉÆ¿ ﬁÉt/// If true, and [bottomNavigationBar] or [persistentFooterButtons]
/// is specified, then the [body] extends to the bottom of the Scaffold,
/// instead of only extending to the top of the [bottomNavigationBar]
/// or the [persistentFooterButtons].
///
/// If true, a [MediaQuery] widget whose bottom padding matches the height
/// of the [bottomNavigationBar] will be added above the scaffold's [body].
///
/// This property is often useful when the [bottomNavigationBar] has
/// a non-rectangular shape, like [CircularNotchedRectangle], which
/// adds a [FloatingActionButton] sized notch to the top edge of the bar.
/// In this case specifying `extendBody: true` ensures that scaffold's
/// body will be visible through the bottom navigation bar's notch.
///
/// See also:
///
///  * [extendBodyBehindAppBar], which extends the height of the body
///    to the top of the scaffold. ¿ ÌÇ¿ÈÅ÷/// If true, and an [appBar] is specified, then the height of the [body] is
/// extended to include the height of the app bar and the top of the body
/// is aligned with the top of the app bar.
///
/// This is useful if the app bar's [AppBar.backgroundColor] is not
/// completely opaque.
///
/// This property is false by default. It must not be null.
///
/// See also:
///
///  * [extendBody], which extends the height of the body to the bottom
///    of the scaffold. ¿Y¿W5/// An app bar to display at the top of the scaffold. ¿bÑ¿|ÉÁ/// The primary content of the scaffold.
///
/// Displayed below the [appBar], above the bottom of the ambient
/// [MediaQuery]'s [MediaQueryData.viewInsets], and behind the
/// [floatingActionButton] and [drawer]. If [resizeToAvoidBottomInset] is
/// false then the body is not resized when the onscreen keyboard appears,
/// i.e. it is not inset by `viewInsets.bottom`.
///
/// The widget in the body of the scaffold is positioned at the top-left of
/// the available space between the app bar and the bottom of the scaffold. To
/// center this widget instead, consider putting it in a [Center] widget and
/// having that be the body. To expand this widget instead, consider
/// putting it in a [SizedBox.expand].
///
/// If you have a column of widgets that should normally fit on the screen,
/// but may overflow and would in such cases need to scroll, consider using a
/// [ListView] as the body of the scaffold. This is also a good choice for
/// the case where your body is a scrollable list. ¿ÖÄû¿u/// A button displayed floating above [body], in the bottom right corner.
///
/// Typically a [FloatingActionButton]. ¿(Äˇ¿	Ä∏/// Responsible for determining where the [floatingActionButton] should go.
///
/// If null, the [ScaffoldState] will use the default location, [FloatingActionButtonLocation.endFloat]. ¿	,Å¿
Äƒ/// Animator to move the [floatingActionButton] to a new [floatingActionButtonLocation].
///
/// If null, the [ScaffoldState] will use the default animator, [FloatingActionButtonAnimator.scaling]. ¿
<Åæ¿„ÅÄ/// A set of buttons that are displayed at the bottom of the scaffold.
///
/// Typically this is a list of [TextButton] widgets. These buttons are
/// persistently visible, even if the [body] of the scaffold scrolls.
///
/// These widgets will be wrapped in an [OverflowBar].
///
/// The [persistentFooterButtons] are rendered above the
/// [bottomNavigationBar] but below the [body]. ¿ˇÄΩ¿£ÄÇ/// The alignment of the [persistentFooterButtons] inside the [OverflowBar].
///
/// Defaults to [AlignmentDirectional.centerEnd]. ¿¡É'¿‚ÇÏ/// A panel displayed to the side of the [body], often hidden on mobile
/// devices. Swipes in from either left-to-right ([TextDirection.ltr]) or
/// right-to-left ([TextDirection.rtl])
///
/// Typically a [Drawer].
///
/// To open the drawer, use the [ScaffoldState.openDrawer] function.
///
/// To close the drawer, use either [ScaffoldState.closeDrawer], [Navigator.pop]
/// or press the escape key on the keyboard.
///
/// {@tool dartpad}
/// To disable the drawer edge swipe on mobile, set the
/// [Scaffold.drawerEnableOpenDragGesture] to false. Then, use
/// [ScaffoldState.openDrawer] to open the drawer and [Navigator.pop] to close
/// it.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.drawer.0.dart **
/// {@end-tool} ¿Ì|¿ZT/// Optional callback that is called when the [Scaffold.drawer] is opened or closed. ¿nÉ)¿éÇÎ/// A panel displayed to the side of the [body], often hidden on mobile
/// devices. Swipes in from right-to-left ([TextDirection.ltr]) or
/// left-to-right ([TextDirection.rtl])
///
/// Typically a [Drawer].
///
/// To open the drawer, use the [ScaffoldState.openEndDrawer] function.
///
/// To close the drawer, use either [ScaffoldState.closeEndDrawer], [Navigator.pop]
/// or press the escape key on the keyboard.
///
/// {@tool dartpad}
/// To disable the drawer edge swipe, set the
/// [Scaffold.endDrawerEnableOpenDragGesture] to false. Then, use
/// [ScaffoldState.openEndDrawer] to open the drawer and [Navigator.pop] to
/// close it.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.end_drawer.0.dart **
/// {@end-tool} ¿úÄÇ¿W/// Optional callback that is called when the [Scaffold.endDrawer] is opened or closed. ¿#Å¿Ä‹/// The color to use for the scrim that obscures primary content while a drawer is open.
///
/// If this is null, then [DrawerThemeData.scrimColor] is used. If that
/// is also null, then it defaults to [Colors.black54]. ¿*Ä±¿ÃÄé/// The color of the [Material] widget that underlies the entire Scaffold.
///
/// The theme's [ThemeData.scaffoldBackgroundColor] by default. ¿‡ÅJ¿Å/// A bottom navigation bar to display at the bottom of the scaffold.
///
/// Snack bars slide from underneath the bottom navigation bar while bottom
/// sheets are stacked on top.
///
/// The [bottomNavigationBar] is rendered below the [persistentFooterButtons]
/// and the [body]. ¿/Ü2¿VÖ⁄/// The persistent bottom sheet to display.
///
/// A persistent bottom sheet shows information that supplements the primary
/// content of the app. A persistent bottom sheet remains visible even when
/// the user interacts with other parts of the app.
///
/// A closely related widget is a modal bottom sheet, which is an alternative
/// to a menu or a dialog and prevents the user from interacting with the rest
/// of the app. Modal bottom sheets can be created and displayed with the
/// [showModalBottomSheet] function.
///
/// Unlike the persistent bottom sheet displayed by [showBottomSheet]
/// this bottom sheet is not a [LocalHistoryEntry] and cannot be dismissed
/// with the scaffold appbar's back button.
///
/// If a persistent bottom sheet created with [showBottomSheet] is already
/// visible, it must be closed before building the Scaffold with a new
/// [bottomSheet].
///
/// The value of [bottomSheet] can be any widget at all. It's unlikely to
/// actually be a [BottomSheet], which is used by the implementations of
/// [showBottomSheet] and [showModalBottomSheet]. Typically it's a widget
/// that includes [Material].
///
/// See also:
///
///  * [showBottomSheet], which displays a bottom sheet as a route that can
///    be dismissed with the scaffold's back button.
///  * [showModalBottomSheet], which displays a modal bottom sheet.
///  * [BottomSheetThemeData], which can be used to customize the default
///    bottom sheet property values when using a [BottomSheet]. ¿fÇ¿_Å⁄/// If true the [body] and the scaffold's floating widgets should size
/// themselves to avoid the onscreen keyboard whose height is defined by the
/// ambient [MediaQuery]'s [MediaQueryData.viewInsets] `bottom` property.
///
/// For example, if there is an onscreen keyboard displayed above the
/// scaffold, the body can be resized to avoid overlapping the keyboard, which
/// prevents widgets inside the body from being obscured by the keyboard.
///
/// Defaults to true. ¿|Åb¿ ◊ÅA/// Whether this scaffold is being displayed at the top of the screen.
///
/// If true then the height of the [appBar] will be extended by the height
/// of the screen's status bar, i.e. the top padding for [MediaQuery].
///
/// The default value of this property, like the default value of
/// [AppBar.primary], is true. ¿ „r¿!>@/// {@macro flutter.material.DrawerController.dragStartBehavior} ¿!ZÇ¿#MÅ“/// The width of the area within which a horizontal swipe will open the
/// drawer.
///
/// By default, the value used is 20.0 added to the padding edge of
/// `MediaQuery.of(context).padding` that corresponds to the surrounding
/// [TextDirection]. This ensures that the drag area for notched devices is
/// not obscured. For example, if `TextDirection.of(context)` is set to
/// [TextDirection.ltr], 20.0 will be added to
/// `MediaQuery.of(context).padding.left`. ¿#eÅ¿$KÄŒ/// Determines if the [Scaffold.drawer] can be opened with a drag
/// gesture on mobile.
///
/// On desktop platforms, the drawer is not draggable.
///
/// By default, the drag gesture is enabled on mobile. ¿$kÅ¿%OÄÃ/// Determines if the [Scaffold.endDrawer] can be opened with a
/// gesture on mobile.
///
/// On desktop platforms, the drawer is not draggable.
///
/// By default, the drag gesture is enabled on mobile. ¿%rÇ¿'iÅ–/// Restoration ID to save and restore the state of the [Scaffold].
///
/// If it is non-null, the scaffold will persist and restore whether the
/// [drawer] and [endDrawer] was open or closed.
///
/// The state of this widget is persisted in a [RestorationBucket] claimed
/// from the surrounding [RestorationScope] using the provided restoration ID.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.  ¿'{é¿.Ëá/// Finds the [ScaffoldState] from the closest instance of this class that
/// encloses the given context.
///
/// If no instance of this class encloses the given context, will cause an
/// assert in debug mode, and throw an exception in release mode.
///
/// This method can be expensive (it walks the element tree).
///
/// {@tool dartpad}
/// Typical usage of the [Scaffold.of] function is to call it from within the
/// `build` method of a child of a [Scaffold].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.of.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// When the [Scaffold] is actually created in the same `build` function, the
/// `context` argument to the `build` function can't be used to find the
/// [Scaffold] (since it's "above" the widget being returned in the widget
/// tree). In such cases, the following technique with a [Builder] can be used
/// to provide a new scope with a [BuildContext] that is "under" the
/// [Scaffold]:
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.of.1.dart **
/// {@end-tool}
///
/// A more efficient solution is to split your build function into several
/// widgets. This introduces a new context from which you can obtain the
/// [Scaffold]. In this solution, you would have an outer widget that creates
/// the [Scaffold] populated by instances of your new inner widgets, and then
/// in these inner widgets you would use [Scaffold.of].
///
/// A less elegant but more expedient solution is assign a [GlobalKey] to the
/// [Scaffold], then use the `key.currentState` property to obtain the
/// [ScaffoldState] rather than using the [Scaffold.of] function.
///
/// If there is no [Scaffold] in scope, then this will throw an exception.
/// To return null if there is no [Scaffold], use [maybeOf] instead. ¿.Î¿.˘   ¿5ñÇØ¿7»Ç/// Finds the [ScaffoldState] from the closest instance of this class that
/// encloses the given context.
///
/// If no instance of this class encloses the given context, will return null.
/// To throw an exception instead, use [of] instead of this function.
///
/// This method can be expensive (it walks the element tree).
///
/// See also:
///
///  * [of], a similar function to this one that throws if no instance
///    encloses the given context. Also includes some sample code in its
///    documentation. ¿7–¿7ﬁ   ¿8Iâ¸¿<ìÉ¯/// Returns a [ValueListenable] for the [ScaffoldGeometry] for the closest
/// [Scaffold] ancestor of the given context.
///
/// The [ValueListenable.value] is only available at paint time.
///
/// Notifications are guaranteed to be sent before the first paint pass
/// with the new geometry, but there is no guarantee whether a build or
/// layout passes are going to happen between the notification and the next
/// paint pass.
///
/// The closest [Scaffold] ancestor for the context might change, e.g when
/// an element is moved from one scaffold to another. For [StatefulWidget]s
/// using this listenable, a change of the [Scaffold] ancestor will
/// trigger a [State.didChangeDependencies].
///
/// A typical pattern for listening to the scaffold geometry would be to
/// call [Scaffold.geometryOf] in [State.didChangeDependencies], compare the
/// return value with the previous listenable, if it has changed, unregister
/// the listener, and register a listener to the new [ScaffoldGeometry]
/// listenable. ¿<û¿<¨   ¿BIÑÜ¿D˝Çâ/// Whether the Scaffold that most tightly encloses the given context has a
/// drawer.
///
/// If this is being used during a build (for example to decide whether to
/// show an "open drawer" button), set the `registerForUpdates` argument to
/// true. This will then set up an [InheritedWidget] relationship with the
/// [Scaffold] so that the client widget gets rebuilt whenever the [hasDrawer]
/// value changes.
///
/// This method can be expensive (it walks the element tree).
///
/// See also:
///
///  * [Scaffold.of], which provides access to the [ScaffoldState] object as a
///    whole, from which you can show bottom sheets, and so forth. ¿E¿E  ¿E¿E%  ¿E9¿F”;¿FÌ   ¿F”¿F‘ ¿G¿ çß¿G¨Äì/// State for a [Scaffold].
///
/// Can display [BottomSheet]s. Retrieve a [ScaffoldState] from the current
/// [BuildContext] using [Scaffold.of].  ¿I.V¿IU ¿Ib¿Ik¿IÅ¿Il¿IÇ¿IÉ¿IàY¿IØ ¿Iø¿I»¿Iﬁ¿I…¿Iﬂ¿I‡¿IÊ&¿Iˆ ¿J¿J
¿J¿K˘¿L  ¿L»:¿L› ¿LÌ¿L˚¿M¿L¸¿M=¿M ¿M.¿M<¿MB¿M=¿W*¿W  ¿WHM¿WÉ  ¿Y˘_¿Z@  ¿]R¿]= ¿]l¿]m¿]V¿]k¿]W¿]r=¿]ú  ¿]≥4¿]√ ¿]‹¿]Â¿]Ê¿]Î/¿]˛  ¿à¶<¿àø  ¿àÊ?¿â  ¿â)C¿âG  ¿âp;¿âé  ¿â∞B¿â…  ¿îc0¿îÇ  ¿≠Ë¿≠Ì ¿≠˛¿Æ$¿Æ ¿Æ¿Æ%¿Æ&¿H>¿H   ¿H¿H¿Jj¿JX;/// Whether this scaffold has a non-null [Scaffold.appBar].   ¿J~j¿J≈;/// Whether this scaffold has a non-null [Scaffold.drawer].   ¿JÎs¿K5>/// Whether this scaffold has a non-null [Scaffold.endDrawer].   ¿KaÄî¿K∂I/// Whether this scaffold has a non-null [Scaffold.floatingActionButton].   ¿LÄ∞¿L°y/// The max height the [Scaffold.appBar] uses.
///
/// This is based on the appBar preferred height plus the top padding.   ¿MHÄŸ¿M˝Äü/// Whether the [Scaffold.drawer] is opened.
///
/// See also:
///
///  * [ScaffoldState.openDrawer], which opens the [Scaffold.drawer] of a
///    [Scaffold].   ¿N%ÄË¿N„Ä®/// Whether the [Scaffold.endDrawer] is opened.
///
/// See also:
///
///  * [ScaffoldState.openEndDrawer], which opens the [Scaffold.endDrawer] of
///    a [Scaffold].   ¿â˜ÄÀ¿äjc/// Gets the current value of the visibility animation for the
/// [Scaffold.floatingActionButton].   ¿ä∆Å≠¿ãOÄÄ/// Sets the current value of the visibility animation for the
/// [Scaffold.floatingActionButton]. This value must not be null. ¿ãt¿ã|   ¿îò\¿î°    ¿HHÄ—¿HY  ¿Hf¿Hz  ¿HÑ¿Hä  ¿HH¿HI¿OÄ˜¿O  ¿O,¿O2   ¿PÅ¿P  ¿P*¿P0   ¿QÇœ¿S5Åˇ/// Opens the [Drawer] (if any).
///
/// If the scaffold has a non-null [Scaffold.drawer], this function will cause
/// the drawer to begin its entrance animation.
///
/// Normally this is not needed since the [Scaffold] automatically shows an
/// appropriate [IconButton], and handles the edge-swipe gesture, to show the
/// drawer.
///
/// To close the drawer, use either [ScaffoldState.closeEndDrawer] or
/// [Navigator.pop].
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿SÈÇ·¿VÇ/// Opens the end side [Drawer] (if any).
///
/// If the scaffold has a non-null [Scaffold.endDrawer], this function will cause
/// the end side drawer to begin its entrance animation.
///
/// Normally this is not needed since the [Scaffold] automatically shows an
/// appropriate [IconButton], and handles the edge-swipe gesture, to show the
/// drawer.
///
/// To close the drawer, use either [ScaffoldState.closeEndDrawer] or
/// [Navigator.pop].
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿WÁÅf¿WÏ    ¿Z∞Å¢¿Zµ    ¿^âL¿^$    ¿goÅg¿gt    ¿h⁄Ä˘¿ipÄä/// Closes [Scaffold.drawer] if it is currently opened.
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿i◊Å¿jpÄç/// Closes [Scaffold.endDrawer] if it is currently opened.
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿jÊc¿jÎ    ¿kMéq¿kp ¿kÇ¿kÇ
¿kä¿kô  ¿kß¿k∂  ¿k«0¿kÂ  ¿k˝¿l  ¿l¿l"  ¿l0¿l>  ¿lH¿lO  ¿l`¿lq  ¿lÅ¿là  ¿ló,¿lù  ¿lø¿y¬é¿¿É,àË/// Shows a Material Design bottom sheet in the nearest [Scaffold]. To show
/// a persistent bottom sheet, use the [Scaffold.bottomSheet].
///
/// Returns a controller that can be used to close and otherwise manipulate the
/// bottom sheet.
///
/// To rebuild the bottom sheet (e.g. if it is stateful), call
/// [PersistentBottomSheetController.setState] on the controller returned by
/// this method.
///
/// The new bottom sheet becomes a [LocalHistoryEntry] for the enclosing
/// [ModalRoute] and a back button is added to the app bar of the [Scaffold]
/// that closes the bottom sheet.
///
/// The [transitionAnimationController] controls the bottom sheet's entrance and
/// exit animations. It's up to the owner of the controller to call
/// [AnimationController.dispose] when the controller is no longer needed.
///
/// To create a persistent bottom sheet that is not a [LocalHistoryEntry] and
/// does not add a back button to the enclosing Scaffold's app bar, use the
/// [Scaffold.bottomSheet] constructor parameter.
///
/// A persistent bottom sheet shows information that supplements the primary
/// content of the app. A persistent bottom sheet remains visible even when
/// the user interacts with other parts of the app.
///
/// A closely related widget is a modal bottom sheet, which is an alternative
/// to a menu or a dialog and prevents the user from interacting with the rest
/// of the app. Modal bottom sheets can be created and displayed with the
/// [showModalBottomSheet] function.
///
/// {@tool dartpad}
/// This example demonstrates how to use [showBottomSheet] to display a
/// bottom sheet when a user taps a button. It also demonstrates how to
/// close a bottom sheet using the Navigator.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_state.show_bottom_sheet.0.dart **
/// {@end-tool}
/// See also:
///
///  * [BottomSheet], which becomes the parent of the widget returned by the
///    `builder`.
///  * [showBottomSheet], which calls this method given a [BuildContext].
///  * [showModalBottomSheet], which can be used to display a modal bottom
///    sheet.
///  * [Scaffold.of], for information about how to obtain the [ScaffoldState].
///  * <https://material.io/design/components/sheets-bottom.html#standard-bottom-sheet>¿É<¿É<¿ÉD¿ÉS  ¿Éa¿Éi  ¿É}¿ÉÜ  ¿Éî¿É¢  ¿É¨¿É≥  ¿Éƒ¿É’  ¿ÉÂ¿ÉÏ  ¿É˚2¿Ñ   ¿åwÄü¿åµ./// Shows the [Scaffold.floatingActionButton].   ¿çlÑx¿çq  ¿çã.¿çØ   ¿í‡Åo¿íÂ    ¿î¯ÇÂ¿ï	   ¿î¯¿î˘¿ó·ÜR¿óÚ  ¿ò¿ò  ¿ó·¿ó‚¿û7É¿ûH   ¿û7¿û8¿°FÅ*¿°W   ¿°F¿°G¿¢tÉÁ¿¢y  	¿¢å¿¢ú  ¿¢©¿¢≤  ¿¢º¿¢ƒ  ¿¢“¿¢·  ¿¢˜¿£  ¿£ ¿£*  ¿£A!¿£P  ¿£h¿£n  ¿£å&¿£í  ¿£Å¿£≠¿¶_ÉÕ¿¶d  ¿¶t¿¶Ñ  ¿¶ç¿¶ú   ¿™0É¥¿™5  ¿™B¿™R  ¿™[¿™j   ¿Æ0Åô¿ÆØs/// Whether to show a [ModalBarrier] over the body of the scaffold.
///
/// The `value` parameter must not be null. ¿ÆΩ
¿Æ√  ¿Æ…¿Æ—   ¿ØÕ§Í¿Ø‡  ¿ØÊ¿ØÙ  ¿ØÕ¿ØŒ ¿‘ªÅì¿‘¡  ¿‘# ¿‘¿’ ¿’¿’   ¿’¿’*   ¿’6Äå¿’G  ¿’Q¿’`  ¿’6¿’7¿’∆ÄÜ¿’◊  ¿’ﬁ¿’Ì  ¿’∆¿’« ¿÷PÇ‡¿÷ˇÄ®/// An interface for controlling a feature of a [Scaffold].
///
/// Commonly obtained from [ScaffoldMessengerState.showSnackBar] or
/// [ScaffoldState.showBottomSheet].¿◊¿◊¿◊+¿◊+¿◊2\¿◊Q¿◊R¿◊S ¿◊T¿◊Z  ¿◊b¿◊h  ¿◊s
¿◊y  ¿◊¿◊Ö   ¿◊ë¿◊ô  ¿◊§¿◊∑  ¿ÿEx¿ÿ∏]/// Remove the feature (e.g., bottom sheet, snack bar, or material banner) from the scaffold. ¿ÿ¬k¿Ÿ%M/// Mark the feature (e.g., bottom sheet or snack bar) as needing to rebuild. ¿◊∆{¿ÿ%N/// Completes when the feature controlled by this object is no longer visible.     ¿ŸŒáë¿›_Éä/// A curve that progresses linearly until a specified [startingPoint], at which
/// point [curve] will begin. Unlike [Interval], [curve] will not start at zero,
/// but will use [startingPoint] as the Y position.
///
/// For example, if [startingPoint] is set to `0.5`, and [curve] is set to
/// [Curves.easeOut], then the bottom-left quarter of the curve will be a
/// straight line, and the top-right quarter will contain the entire contents of
/// [Curves.easeOut].
///
/// This is useful in situations where a widget must track the user's finger
/// (which requires a linear animation), and afterwards can be flung using a
/// curve specified with the [curve] argument, after the finger is released. In
/// such a case, the value of [startingPoint] would be the progress of the
/// animation at the time when the finger was released.
///
/// The [startingPoint] and [curve] arguments must not be null. ¿›ûÄ— ¿›≈¿›ﬂ/// Creates a suspended curve.¿›Á¿›Ì  ¿ﬁ ¿ﬁ  ¿ﬁ¿ﬁ¿ﬁ¿ﬁ2¿ﬁ8¿ﬁN¿ﬁG¿ﬁ9¿ﬁJ¿ﬁY¿ﬁ_¿ﬁm¿ﬁf¿ﬁ`¿ﬁi¿ﬁsÄÜ¿ﬁÏe/// The progress value at which [curve] should begin.
///
/// This defaults to [Curves.easeOutCubic]. ¿ﬁ˛I¿ﬂB5/// The curve to use when [startingPoint] is reached.  ¿ﬂLÅ™¿ﬂ_  ¿ﬂi¿ﬂq  ¿ﬂL¿ﬂM¿‡˙c¿·   ¿‡˙¿‡˚ ¿·aÉª¿·g  ¿·óÅi ¿·ù¿·± ¿·∏	¿·ø  ¿·«!¿·÷  ¿·Ó¿·Ù  ¿‚
¿‚  ¿‚'¿‚6  ¿‚F¿‚U  ¿‚a¿‚g  ¿‚Ä¿‚Ü  ¿‚ö¿‚†  ¿‚Æ
¿‚¥  ¿‚æ¿‚ƒ  ¿‚’¿‚€  ¿‚Î¿‚Ò  ¿‚ ¿‚u¿„-¿„  ¿„v¿„Å  ¿„è¿„£  ¿„∞¿„ƒ  ¿„”¿„Á  ¿„Ù¿‰  ¿‰¿‰  ¿‰.¿‰;  ¿‰N¿‰\  ¿‰i¿‰|  ¿‰Ö¿‰ë  ¿‰°!¿‰∑   ¿‰«S¿‰Ì   ¿‰«¿‰» ¿Âç∆¿Â$   ¿ÂfB¿Â~ ¿Âè 	¿Â≠ÅQ¿Âæ   ¿Â≠¿ÂÆ¿ÁS¿Á   ¿Á¿Á¿ÁYÄµ¿Áj  ¿Áz¿Áê  ¿ÁY¿ÁZ¿ËÄä¿Ë    ¿Ë†Äû¿Ë•  ¿Ë∂¿Ë»   ¿ÈBÅ¿ÈG  ¿ÈV¿Èf  ¿Èp¿Èw   ¿ÍaÄç¿Íf  ¿Íz¿Íã   ¿ÍÚÉj¿Í˜  ¿Î,¿Î&   ¿Ó`ÑÅ¿Ós  ¿Óy¿Óá  ¿Ó`¿Óa ¿ÚÊÇz¿Ù(Å;/// A [ScaffoldFeatureController] for standard bottom sheets.
///
/// This is the type of objects returned by [ScaffoldState.showBottomSheet].
///
/// This controller is used to display both standard and persistent bottom
/// sheets. A bottom sheet is only persistent if it is set as the
/// [Scaffold.bottomSheet].¿ÙH¿ÙH¿ÙäÄ∞¿ÙØ¿Ù∞¿Ù± ¿Ù∑¿Ùæ  ¿Ù…¿Ù–  ¿Ùﬁ¿ÙÂ  ¿ÙÔ¿ı  ¿ı¿ı  ¿ı0¿ı5¿ı6¿ı7¿ı8¿ı>¿ıI     ¿ıbÅá¿ıh  ¿ıìÄì ¿ıô¿ıß ¿ıÆ¿ıΩ  ¿ıÀ¿ı⁄  ¿ıÔ¿ıˇ  ¿ˆ¿ˆ¿ˆ$¿ˆ¿ˆ¿ˆ ¿ˆ*¿ˆ5  ¿ˆB0¿ˆb   ¿ˆwp¿ˆà  ¿ˆõ¿ˆ´  ¿ˆw¿ˆx  Ü5Ä…Ü:   ÜLÜL  ÜTÜT  Ü^	Ü^  ÜkÜk  ÜzÜz  ÜÜÜÜ  ÜòÜò  Ü¨Ü¨  Ü√Ü√  Ü€Ü€  ÜÂ	ÜÂ  ÜÚ	ÜÚ           ÑpÑ4 Ñ\ÑxÑyÑÉoÑ¶ ÑŒÑÍÑÎÑı6Ö ÖÖù3Ö™ ÖÕÖ“/Öﬂ Ö˛Ü/Ü Ü/  åﬂ <ÄÜÄ§Ä•Ä∫Ä‘ÄÅÅÅ=Å|Å£Å§ÅªÅ—ÅÌÇ	ÇÇ5ÇJÇaÇwÇôÇøÇÓÉÉÉ>ÉSÉTÉlÉëÉ∑É”ÉÈÑÑÑÉÑÙÑıÖ-ÖyÖùÖ“ÜÜ4Ü5ÜJÜRÜ\ÜiÜxÜÑÜñÜ™Ü¡ÜŸÜ„ÜÜ˝Üˇá áJáNáëáïáÂàààhà≤à„ââ"âjâªääYä|äÄäîä„äÁã:ãJãNãëãïã£ãßãıåFåòåÏç:çeçøçé<éXégéÄéûéüéœé’èèèèmè|èÇèòè‰ê%ê+êÉêïêõêÓë@ëåë÷ííí'íwíƒììVì¢ì«ìÕî%î7î=îâî√î…îŸîﬂï/ïnïæïÎñ&ñCñxñyñÎóóóójóÅóáó⁄ó‡óóˆò?òéòœòÏòÌô_ôäôéôèôõôﬂô·ô‚öööRö£öÓõ9õGõKõ~õ‹ú.úÊùù≤ùﬁù˜ûûû#ûDûÇû“üülüíüªüÁ†	†1†r†x†µ†ÿ†‹†›°°&°'°D°g°ã°ì°î°Ω°Á°Ô°ı°˘°˙¢'¢]¢ê¢•¢©¢™¢∆¢˝££@£j£r£x£|£}£Õ§§>§õ§÷§⁄§€§Ì§Ó•=•ä•—•ˆ•¸¶K¶ò¶Á¶ı¶˚ßLßRß£ß„®2®a®g®∞®–®÷®Ï©=©C©≠©ø©≈©˘©ˇ™Q™°™Ô´A´ë´Á¨	¨¨%¨ê¨ñ≠ ≠≠≠v≠Ç≠ü≠ÓÆÆ"ÆnÆßÆ≈ÆıØØ!ØpØæ∞∞]∞|∞ ∞Û± ±2±S±^±∑±æ±»±‹≤≤≤(≤B≤U≤~≤Ã≥≥g≥ø≥ﬂ¥.¥Ñ¥ª¥Ã¥Âµ9µèµ‘∂+∂Å∂¿∂—∂ˇ∑N∑_∑n∑•∑±∑ª∑–∑‹∑Î∑Ò∑Ú∏	∏∏∏L∏b∏à∏Ø∏≈∏È∏ıππ6π`πjπyπüπµπﬂ∫0∫<∫X∫g∫ã∫ö∫æ∫Õ∫”∫◊∫ÿª"ª5ª;ªåª⁄º8ºTºrºÄºÜºŸº˚ΩΩ#ΩAΩ\ΩñΩºΩ¿Ω¡æææXæ≤æŒø(ø6ø<øèø±øŸø˚¿ @¿ @G¿ @`¿ @Ü¿ @¨¿ @∂¿ @¿¿ @∆¿ @‰¿ @ˇ¿ A¿ A¿ AM¿ Aé¿ A®¿ B¿ B¿ B¿ B~¿ Bñ¿ Bª¿ B÷¿ B⁄¿ B€¿ BÙ¿ Bı¿ CJ¿ Cù¿ CÍ¿ D¿ D¿ Dj¿ D√¿ E¿ E&¿ E,¿ Eâ¿ E…¿ F¿ FS¿ FY¿ F¢¿ F¬¿ F»¿ Fﬁ¿ G5¿ G;¿ G´¿ GΩ¿ H9¿ HE¿ Hb¿ H∑¿ H‰¿ HÎ¿ IC¿ IÇ¿ I¶¿ I‹¿ J¿ J¿ Ji¿ J√¿ K¿ Ki¿ Kà¿ K‚¿ L¿ L ¿ LV¿ L{¿ LÑ¿ L„¿ LÍ¿ L¸¿ M(¿ M0¿ MH¿ M_¿ Mc¿ Md¿ M®¿ Mæ¿ M‰¿ N¿ N'¿ NQ¿ N]¿ Ny¿ N§¿ N‘¿ Nﬁ¿ NÌ¿ O¿ O/¿ O>¿ Ob¿ Oq¿ Oï¿ O§¿ O™¿ OÆ¿ OØ¿ Oˇ¿ P¿ P¿ Po¿ P√¿ Q3¿ QO¿ Qs¿ QÅ¿ Qá¿ QÊ¿ R¿ R*¿ R0¿ R1¿ Rk¿ Ró¿ Rõ¿ Rú¿ RÌ¿ RÛ¿ S9¿ S•¿ S¡¿ T'¿ T5¿ T;¿ Tö¿ Tº¿ TÍ¿ U¿ U¿ U^¿ Uw¿ Uù¿ U√¿ UÕ¿ U◊¿ U›¿ U·¿ U‚¿ V3¿ V|¿ Vú¿ W¿ W¿ W¿ Wñ¿ W¥¿ WÂ¿ X¿ X
¿ X¿ X¿ X>¿ Xl¿ X™¿ XÁ¿ XË¿ Y	¿ YJ¿ Yx¿ Y¬¿ Z ¿ Z9¿ ZM¿ Zï¿ Zﬂ¿ ZÓ¿ [3¿ [y¿ [«¿ [›¿ [Î¿ \2¿ \@¿ \J¿ \R¿ \X¿ \Y¿ \}¿ \°¿ \º¿ \√¿ \«¿ \»¿ \‘¿ \Á¿ ]¿ ])¿ ]D¿ ]Y¿ ]]¿ ]_¿ ]`¿ ]ò¿ ]∫¿ ]‘¿ ^¿ ^I¿ ^J¿ ^Ç¿ ^É¿ ^è¿ _¿ _¿ _¿ _Q¿ _x¿ _|¿ _∂¿ _˛¿ `:¿ `>¿ `~¿ `≥¿ `æ¿ `‡¿ a1¿ ay¿ aù¿ a¿¿ a·¿ aˇ¿ b+¿ bH¿ bj¿ bä¿ b™¿ b–¿ bÒ¿ b˜¿ b¯¿ c-¿ c3¿ c¿ c¶¿ cß¿ c€¿ c·¿ d#¿ dC¿ da¿ db¿ d™¿ d¡¿ d«¿ e¿ eV¿ e§¿ eª¿ e¡¿ f¿ f^¿ fÆ¿ f»¿ fÊ¿ fÁ¿ g.¿ gE¿ gK¿ gê¿ g◊¿ h¿ h¿ h[¿ h®¿ h¯¿ i¿ i'¿ i(¿ ip¿ iâ¿ iè¿ iŸ¿ i¸¿ jP¿ j}¿ jÉ¿ j¡¿ j˜¿ k¿ k¿ kc¿ k|¿ kÇ¿ k—¿ l¿ lk¿ lª¿ lﬁ¿ m¿ m¿ m,¿ m2¿ mÅ¿ mÕ¿ n¿ n¿ nU¿ n£¿ nÛ¿ o¿ o"¿ oq¿ oî¿ oØ¿ o∞¿ o·¿ oÁ¿ p6¿ pQ¿ pR¿ pâ¿ pè¿ p‰¿ q¿ q¿ qD¿ qi¿ qk¿ ql¿ q∏¿ qº¿ r¿ rf¿ rq¿ rΩ¿ ræ¿ s¿ s¿ sG¿ sq¿ s†¿ sπ¿ s∫¿ s∆¿ t¿ t&¿ tV¿ tÇ¿ tú¿ t£¿ tß¿ t®¿ t¥¿ t ¿ uD¿ uH¿ uJ¿ uK¿ uò¿ uú¿ uﬁ¿ v¿ v¿ v\¿ v∞¿ v¥¿ w ¿ wB¿ w^¿ wb¿ w∞¿ wı¿ x ¿ x¿ x]¿ xx¿ xô¿ xº¿ x¬¿ x√¿ y¿ yY¿ y_¿ yï¿ yΩ¿ yæ¿ y˛¿ z¿ zH¿ zp¿ zq¿ zµ¿ z”¿ zÊ¿ zÏ¿ zÌ¿ {¿ {*¿ {b¿ {k¿ {q¿ {r¿ {õ¿ {œ¿ {Ô¿ |¿ |
¿ |G¿ |K¿ |L¿ |§¿ |∫¿ |ÿ¿ |¸¿ } ¿ }'¿ }D¿ }ô¿ }Ù¿ }˚¿ }ˇ¿ ~¿ ~¿ ~h¿ ~°¿ ~¡¿ ~¬¿ ~‡¿ ¿ "¿ #¿ /¿ N¿ ^¿ £¿ Ì¿ Ä	¿ Ä]¿ Ä≥¿ Å¿ Å¿ Å%¿ Å8¿ ÅB¿ Åé¿ Åí¿ Åì¿ Å®¿ ÅÃ¿ Å¿ Ç¿ Ç¿ ÇÄ¿ Ç¢¿ Çÿ¿ É¿ É¿ É0¿ É4¿ É6¿ É7¿ ÉÉ¿ É’¿ Éÿ¿ Ñ#¿ Ñv¿ Ñ≈¿ Ö¿ Öb¿ ÖÑ¿ Ö∑¿ Ö’¿ ÖÈ¿ Ö˛¿ Ü%¿ ÜE¿ Üm¿ Üô¿ Ü¬¿ ÜÁ¿ á	¿ á6¿ á`¿ áa¿ áÖ¿ á¢¿ á«¿ á»¿ à¿ àj¿ àΩ¿ â¿ â¿ â5¿ âO¿ âc¿ âi¿ âë¿ âœ¿ ä¿ ä:¿ ä>¿ ä?¿ äK¿ ä∑¿ äπ¿ ä∫¿ ã¿ ã^¿ ãz¿ ã}¿ ã“¿ å!¿ åN¿ åe¿ åÉ¿ å≠¿ å≈¿ åË¿ ç¿ ç4¿ ç5¿ çJ¿ çc¿ çà¿ çâ¿ çï¿ çº¿ çÓ¿ é¿ é¿ é¿ é"¿ éf¿ éæ¿ é˝¿ é˛¿ è'¿ èy¿ èù¿ èû¿ è–¿ è˙¿ êM¿ ên¿ êo¿ êä¿ ê¨¿ ê€¿ êÛ¿ ë¿ ë ¿ ë-¿ ëD¿ ëO¿ ëX¿ ë_¿ ëc¿ ëe¿ ëf¿ ëü¿ ë≥¿ ë–¿ ëÚ¿ í¿ í7¿ íY¿ íë¿ í»¿ ì¿ ì;¿ ìa¿ ìÇ¿ ì†¿ ì ¿ ì¸¿ î¿ îD¿ îm¿ î™¿ îÊ¿ ï	¿ ï8¿ ï9¿ ïR¿ ïw¿ ïï¿ ï∏¿ ï›¿ ñ¿ ñ¿ ñ]¿ ñß¿ ñ·¿ ó*¿ ó+¿ óL¿ ók¿ ól¿ óô¿ óö¿ ó¶¿ ó»¿ ò¿ ò¿ ò_¿ òÆ¿ ò˛¿ ô:¿ ô;¿ ôò¿ ôø¿ ô‹¿ ö¿ ö!¿ ö"¿ öL¿ ö°¿ ö·¿ õ¿ õ¿ õ ¿ õD¿ õ{¿ õ˜¿ ú/¿ ú{¿ úÿ¿ úﬁ¿ úﬂ¿ ù¿ ùR¿ ùÉ¿ ù–¿ ùŸ¿ ûL¿ ûÅ¿ û¿ ûˆ¿ û˜¿ ü ¿ üR¿ üÆ¿ ü¸¿ ü˝¿ †0¿ †]¿ †é¿ †ñ¿ †ú¿ †ù¿ †Î¿ °/¿ °Q¿ °ª¿ °º¿ °‰¿ ¢,¿ ¢-¿ ¢E¿ ¢s¿ ¢’¿ £.¿ £6¿ £7¿ £y¿ £™¿ £Ã¿ §¿ §J¿ §n¿ §w¿ §Ø¿ §Ò¿ §˜¿ §¯¿ •J¿ •ô¿ •‡¿ ¶*¿ ¶1¿ ¶Ü¿ ¶…¿ ß¿ ßd¿ ß¥¿ ß€¿ ß‹¿ ®¿ ®%¿ ®R¿ ®õ¿ ®Ã¿ ®Ó¿ ®˜¿ ©@¿ ©{¿ ©Å¿ ©Ç¿ ©»¿ ©Ù¿ ™7¿ ™á¿ ™ç¿ ™é¿ ™Ω¿ ´¿ ´2¿ ´p¿ ´y¿ ´—¿ ¨]¿ ¨c¿ ¨d¿ ¨å¿ ¨ƒ¿ ≠"¿ ≠#¿ ≠q¿ ≠ï¿ ≠Ë¿ Æ¿ Æ8¿ ÆÇ¿ ÆÂ¿ Ø¿ Ø2¿ ØP¿ Øl¿ Øê¿ Ø¿¿ ØÊ¿ ∞¿ ∞¿ ∞}¿ ∞Â¿ ±2¿ ±T¿ ±s¿ ±∞¿ ±π¿ ±˝¿ ≤3¿ ≤9¿ ≤:¿ ≤f¿ ≤æ¿ ≤Â¿ ≥	¿ ≥+¿ ≥o¿ ≥z¿ ≥Ç¿ ≥É¿ ≥´¿ ≥˘¿ ¥5¿ ¥D¿ ¥à¿ ¥ÿ¿ µ)¿ µu¿ µä¿ µ÷¿ ∂¿ ∂<¿ ∂W¿ ∂_¿ ∂`¿ ∂∑¿ ∑ ¿ ∑!¿ ∑2¿ ∑v¿ ∑Å¿ ∑Á¿ ∏I¿ ∏¥¿ ∏÷¿ π/¿ πQ¿ πç¿ π‘¿ πÙ¿ ∫S¿ ∫™¿ ª¿ ªS¿ ªd¿ ª}¿ ªÓ¿ ªˇ¿ º¿ º¿ º%¿ º:¿ ºF¿ ºL¿ ºM¿ ºz¿ º€¿ Ω¿ Ω¿ Ω¿ ΩG¿ Ωå¿ Ωƒ¿ Ω ¿ ΩÀ¿ Ω¯¿ æ@¿ æ{¿ æÅ¿ æÇ¿ æ§¿ æ⁄¿ ø¿ ø¿ ø¿ ø ¿ ø,¿ øa¿ øè¿ ø≈¿ ø˘¿ ¿e¿ ¿«¿ ¡'¿ ¡U¿ ¡ú¿ ¡†¿ ¡¢¿ ¡£¿ ¡¿ ¡Ù¿ ¬=¿ ¬A¿ ¬|¿ ¬¡¿ √ ¿ √:¿ √y¿ √£¿ √º¿ √‡¿ ƒ¿ ƒ)¿ ƒN¿ ƒw¿ ƒ°¿ ƒÀ¿ ƒÃ¿ ƒ„¿ ≈¿ ≈G¿ ≈{¿ ≈|¿ ≈∑¿ ≈Ê¿ ≈Á¿ ≈Û¿ ∆S¿ ∆U¿ ∆V¿ ∆–¿ «*¿ «_¿ «è¿ «¡¿ «ˆ¿ »o¿ »†¿ »Ÿ¿ …¿ …'¿ …(¿ …4¿ …I¿ …`¿ …a¿ …ê¿ …º¿ …œ¿  ¿  )¿  *¿  J¿  ù¿  ∑¿  „¿  ¿ À:¿ Àä¿ À´¿ À±¿ Àµ¿ À∂¿ À¬¿ À’¿ À¯¿ Ã¿ Ã¿ Ã¿ Ã¿ Ãb¿ Ãà¿ Õ¿ ÕQ¿ Õl¿ Õr¿ Õ´¿ Õ·¿ Œ:¿ ŒH¿ ŒN¿ Œë¿ Œ”¿ œ¿ œ^¿ œô¿ œ∏¿ œ‹¿ –
¿ –¿ –#¿ –r¿ –¿¿ —¿ —5¿ —Q¿ —r¿ —â¿ —∑¿ —ø¿ —≈¿ —…¿ — ¿ “¿ “D¿ “R¿ “¿ “Ä¿ “ù¿ “Œ¿ ”¿ ”9¿ ”U¿ ”\¿ ”≈¿ ”‹¿ ‘¿ ‘¿ ‘(¿ ‘/¿ ‘0¿ ‘{¿ ‘£¿ ‘ø¿ ‘∆¿ ’9¿ ’:¿ ’p¿ ’Ó¿ ÷r¿ ÷s¿ ÷î¿ ÷¯¿ ◊^¿ ◊Œ¿ ◊œ¿ ÿ=¿ ÿ≠¿ ÿÆ¿ ÿÍ¿ Ÿ'¿ Ÿ+¿ Ÿ,¿ Ÿs¿ ŸÖ¿ Ÿ∂¿ ⁄¿ ⁄(¿ ⁄V¿ ⁄`¿ ⁄h¿ ⁄p¿ ⁄t¿ ⁄u¿ ⁄Æ¿ ⁄ÿ¿ ⁄ˆ¿ ⁄˙¿ ⁄˚¿ €¿ €.¿ €@¿ €h¿ €Ç¿ €«¿ ‹¿ ‹"¿ ‹R¿ ‹w¿ ‹Ö¿ ‹î¿ ‹±¿ ‹ﬂ¿ ›¿ ›;¿ ›b¿ ›s¿ ›Ç¿ ›Ω¿ ›ÿ¿ ﬁ¿ ﬁ.¿ ﬁ]¿ ﬁÄ¿ ﬁè¿ ﬁõ¿ ﬁ®¿ ﬁ√¿ ﬁÓ¿ ﬂ¿ ﬂE¿ ﬂh¿ ﬂw¿ ﬂÑ¿ ﬂç¿ ﬂî¿ ﬂò¿ ﬂô¿ ﬂ∑¿ ‡¿ ‡¿ ‡¿ ‡I¿ ‡r¿ ‡ö¿ ‡°¿ ‡•¿ ‡ß¿ ‡®¿ ‡Í¿ ‡Ó¿ ·2¿ ·6¿ ·k¿ ·º¿ ·Í¿ ·Ó¿ ‚¿ ‚P¿ ‚ú¿ ‚‰¿ „¿ „¿ „¸¿ ‰ ¿ ‰I¿ ‰Y¿ ‰]¿ ‰q¿ ‰ø¿ Â¿ Â]¿ Âó¿ Âõ¿ Ê ¿ Ê¿ ÊM¿ Ê]¿ Êa¿ Êu¿ Ê¬¿ Á¿ Á_¿ Áó¿ ÁÊ¿ Ë¿ Ë!¿ ËÑ¿ Ëà¿ Ë—¿ Ë·¿ ËÂ¿ È!¿ È%¿ Èl¿ È≥¿ È˙¿ ÍA¿ ÍÖ¿ Í∫¿ Í˛¿ Î@¿ ÎO¿ ÎS¿ Îì¿ ÎŸ¿ Ï¿ ÏZ¿ Ïí¿ Ï”¿ ÏÌ¿ ÏÒ¿ Ì¿ Ì¿ Ì%¿ Ì)¿ Ìf¿ Ìù¿ Ì€¿ Ó	¿ Ó¿ ÓT¿ Óë¿ Óﬂ¿ Ô)¿ Ôn¿ Ôy¿ Ô}¿ Ôë¿ Ô‚¿ ,¿ 0¿ <¿ â¿ µ¿ À¿ Ò¿ ÒE¿ ÒQ¿ ÒY¿ Ò`¿ Òh¿ Òx¿ Ò|¿ Ò¿¿ Òˇ¿ Ú6¿ Ú:¿ ÚH¿ ÚL¿ Úú¿ Ú¿¿ Û¿ ÛJ¿ Ûõ¿ ÛÏ¿ Ù:¿ ÙÇ¿ Ùì¿ Ù‚¿ ı+¿ ı<¿ ıç¿ ı‹¿ ˆ-¿ ˆk¿ ˆª¿ ˆ¯¿ ˜@¿ ˜è¿ ˜ƒ¿ ¯¿ ¯`¿ ¯ß¿ ˘¿ ˘,¿ ˘i¿ ˘|¿ ˘ã¿ ˘ú¿ ˘´¿ ˘ ¿ ˘Ò¿ ˙¿ ˙:¿ ˙¿ ˙ê¿ ˙™¿ ˙æ¿ ˙€¿ ˙˘¿ ˚¿ ˚)¿ ˚L¿ ˚e¿ ˚°¿ ˚æ¿ ˚Á¿ ¸¿ ¸ ¿ ¸M¿ ¸}¿ ¸ï¿ ¸µ¿ ¸ÿ¿ ˝¿ ˝7¿ ˝8¿ ˝~¿ ˝…¿ ˛¿ ˛9¿ ˛?¿ ˛å¿ ˛⁄¿ ˛‡¿ ˇ'¿ ˇm¿ ˇπ¿ ¿ H¿ N¿ ^¿ d¿ ¨¿ —¿ Í¿ Î¿9¿Ö¿≥¿π¿ˇ¿¿¿\¿b¿r¿x¿¬¿‹¿¿¿:¿_¿`¿ã¿ë¿’¿¿b¿Ø¿‚¿Ë¿6¿á¿÷¿¿F¿L¿ö¿Í¿7¿l¿Ç¿É¿œ¿’¿ˇ¿%¿&¿t¿z¿Â¿	)¿	*¿	Ö¿	ã¿	ı¿
9¿
:¿
É¿
â¿
”¿¿!¿Z¿`¿õ¿Õ¿¸¿˝¿L¿R¿Ü¿æ¿ø¿	¿U¿¿Ö¿°¿ß¿Ó¿Ù¿G¿v¿|¿í¿Ã¿¿^¿h¿n¿¿¿“¿Í¿Î¿B¿k¿l¿∂¿˚¿%¿+¿G¿M¿ó¿ù¿Û¿"¿(¿>¿n¿≤¿ ¿¿¿l¿~¿ô¿ö¿Ù¿ ¿!¿|¿Ç¿Ã¿¿'¿(¿u¿{¿Ω¿›¿ﬁ¿&¿,¿z¿õ¿°¿Ò¿¿,¿-¿[¿a¿∞¿˛¿4¿:¿ä¿€¿'¿N¿T¿ú¿È¿¿¿j¿≥¿»¿Œ¿¿e¿±¿—¿◊¿Á¿Ì¿;¿r¿∏¿¿F¿c¿d¿≠¿¸¿H¿N¿ñ¿Á¿3¿9¿Q¿y¿z¿√¿…¿ ¿ _¿ e¿ ©¿  ¿ ‡¿ ·¿!$¿!W¿!X¿!¢¿!∞¿!∂¿!¸¿"G¿"ï¿"ﬂ¿#¿#=¿#b¿#c¿#ß¿#¿¿#∆¿#ˇ¿$¿$>¿$h¿$i¿$´¿$ƒ¿$ ¿%¿%	¿%B¿%o¿%p¿%∂¿%º¿&¿&:¿&@¿&ç¿&ﬁ¿&‰¿&Ù¿&˙¿'G¿'Y¿'x¿'y¿'∆¿'Ë¿'Ó¿(;¿(¿(Ö¿(≈¿(À¿(·¿)1¿)b¿)h¿)∂¿)»¿)Œ¿)‰¿*4¿*¿*Ã¿+¿+d¿+v¿+|¿+ ¿+‹¿+‚¿,/¿,z¿, ¿-¿-T¿-Z¿-™¿-Û¿.7¿.=¿.ä¿.—¿/¿/ ¿/t¿/é¿/£¿/©¿/›¿/Ò¿0B¿0K¿0c¿0Œ¿10¿1É¿1å¿1ù¿2 ¿2X¿2Ö¿2Ã¿2’¿2Ê¿3F¿3§¿4¿4c¿4¿¿5¿5G¿5P¿5á¿5è¿5ì¿5î¿5·¿6¿6	¿6Z¿6¢¿6®¿6Ë¿6Ó¿6˛¿7¿7M¿7ò¿7∞¿7Ë¿8¿8B¿8F¿8G¿8î¿8ƒ¿8 ¿9¿9¿9]¿9ß¿9ı¿:¿:¿:Z¿:®¿:Ó¿;¿;#¿;n¿;Ω¿<¿<V¿<h¿<∂¿=¿=?¿=u¿=ã¿=Ê¿=Ò¿>¿>o¿>ƒ¿>œ¿>‚¿?G¿?°¿?–¿@¿@$¿@7¿@ô¿@˘¿AY¿A√¿AŒ¿B¿B¿B¿BB¿BF¿BG¿Bï¿B£¿B©¿Bˆ¿CD¿Cë¿C‚¿C˜¿C˝¿D=¿DC¿DS¿DY¿D™¿DÔ¿EC¿Ek¿Eà¿E¶¿F¿F6¿FC¿Fõ¿F∆¿FÃ¿F–¿F—¿F›¿G¿G¿G¿G.¿G2¿G~¿G¶¿H¿H¿HE¿HF¿HR¿Hõ¿H’¿I¿I¿I¿I+¿I,¿IÜ¿I„¿I‰¿J¿J¿JM¿J|¿J∫¿JÈ¿K*¿K_¿K´¿Kˆ¿K˜¿L¿LD¿LJ¿Lì¿L∆¿M¿ME¿MF¿Mu¿M{¿Mã¿Më¿M›¿MÚ¿N"¿N#¿NU¿N[¿Nk¿Nq¿N¡¿Nÿ¿O¿O¿O=¿Oã¿Oü¿O«¿O—¿Oˇ¿P¿P	¿P
¿P;¿Pè¿P£¿PŒ¿Pÿ¿Q	¿Q¿Q¿Q¿Q7¿Q=¿Qé¿Q¿¿Q∆¿R¿Rd¿Rr¿Rx¿R¿¿R◊¿R›¿S.¿SD¿Så¿S∑¿SΩ¿S‚¿SÊ¿SÁ¿T¿T¿Tm¿T®¿TÆ¿T¸¿UL¿UZ¿U`¿U®¿Uø¿U≈¿V¿V/¿Vq¿Vô¿Vü¿V«¿VÀ¿VÃ¿W¿W3¿W4¿WF¿Wó¿Wò¿WÂ¿X ¿XÉ¿X≤¿X¬¿X√¿Xˆ¿Y
¿Y:¿YD¿YJ¿YN¿YO¿Yh¿Yi¿Y¬¿Y˜¿ZZ¿Z[¿ZÆ¿Zœ¿[j¿[ü¿[Ø¿[∞¿[Ô¿\¿\?¿\I¿\O¿\S¿\T¿\u¿\v¿\ª¿]¿]¿]p¿]±¿]È¿^¿^¿^I¿^é¿^„¿_5¿_`¿_–¿`.¿`à¿`æ¿a
¿aQ¿az¿a¥¿aÁ¿a˜¿bP¿b\¿bó¿b…¿b”¿bÈ¿bÒ¿bÚ¿cJ¿c§¿c¿¿cÔ¿di¿d§¿d—¿d€¿e¿e¿e¿eI¿ej¿e≤¿eÚ¿f"¿fH¿fu¿f”¿f‰¿fÛ¿g ¿g¿g'¿gY¿gb¿gh¿gl¿gm¿gë¿g∏¿g¿h¿h¿h0¿hq¿h†¿h¨¿h¡¿hÕ¿h”¿h◊¿hÿ¿i¿i¿ii¿iÄ¿i§¿iÀ¿i–¿i‘¿i’¿j¿j¿ji¿jÉ¿jÆ¿jŸ¿jﬂ¿j„¿j‰¿k¿kF¿kJ¿kK¿kÜ¿k£¿k√¿k˘¿l¿l,¿lD¿l\¿l}¿lì¿l≈¿lÃ¿l‹¿m3¿mO¿mö¿m€¿n7¿nB¿nJ¿n]¿ng¿nh¿nõ¿o¿o.¿o/¿oN¿om¿on¿o•¿o¡¿oÛ¿p#¿pP¿pX¿p^¿p_¿pÖ¿p†¿p…¿pŸ¿p·¿q¿qO¿qr¿qs¿qç¿q¬¿q ¿qÀ¿q˜¿r¿r/¿r9¿r:¿r¿r∞¿r∏¿r‘¿r⁄¿r€¿s¿s¿sC¿s¢¿s ¿s÷¿s‚¿s„¿t¿t0¿tO¿th¿tÖ¿tç¿tì¿tî¿tº¿t◊¿u¿u6¿uL¿uw¿uâ¿uì¿u–¿uÔ¿u¯¿v¿vL¿vd¿vú¿v™¿v¥¿vΩ¿v”¿v¿w¿w?¿wh¿wr¿w{¿wì¿wµ¿w›¿w˘¿x¿x/¿xO¿xV¿xW¿xp¿x¨¿x≤¿x≥¿x‰¿x˜¿y¿y¿y3¿yW¿yü¿y¥¿yª¿yø¿y¿¿z¿zO¿zU¿zß¿zª¿z¡¿{¿{Q¿{d¿{j¿{µ¿|¿|(¿|.¿|Å¿|«¿}¿}¿}j¿}∏¿}Ï¿}Ú¿~A¿~è¿~≈¿~À¿¿l¿∏¿ﬂ¿Â¿˚¿ÄE¿Äè¿Äø¿Ä≈¿Å(¿Å:¿ÅJ¿ÅP¿Åü¿Å≥¿Åˇ¿ÇL¿Ç\¿Ç≠¿É¿É@¿É]¿Éy¿Éê¿É®¿É¿¿É·¿É˜¿Ñ/¿Ñ6¿ÑF¿Ñn¿Ñä¿Ñ’¿Ö¿Ör¿Ö}¿ÖÖ¿Öò¿Ö¢¿Ö–¿Ö—¿ÖÒ¿Üw¿Üâ¿Üª¿ÜÃ¿ÜÈ¿á¿á<¿áZ¿áp¿áî¿á∂¿á÷¿à'¿à0¿à8¿à¿àÉ¿àÑ¿à§¿à‰¿â'¿ân¿â≠¿âÆ¿âÙ¿âı¿ä6¿ä]¿ä√¿äƒ¿ã¿ãI¿ãá¿ã•¿ãÒ¿å-¿åi¿åp¿åt¿åu¿å¶¿å”¿ç¿ç¿ç¿çj¿çΩ¿é¿é8¿éÆ¿éÈ¿è¥¿ê/¿ê5¿ê6¿êH¿êà¿êª¿ê√¿êƒ¿ë"¿ë¿ëî¿ë·¿ëÂ¿ëÊ¿í¿í¿íh¿í¥¿íﬁ¿í˝¿ì]¿ìÆ¿ì◊¿ì‰¿î¿î=¿îF¿îL¿îP¿îQ¿î`¿îa¿îï¿îñ¿îΩ¿îÒ¿îı¿îˆ¿ï¿ï¿ï.¿ïÑ¿ïˆ¿ñh¿ñ≥¿ñÚ¿ó¿ó¿óG¿óN¿óO¿óî¿ó¿¿ó”¿ó⁄¿óﬁ¿óﬂ¿óÎ¿ò¿ò>¿ò±¿ô
¿ô~¿ôÑ¿ô›¿öL¿öR¿öâ¿öõ¿ö˝¿õ7¿õQ¿õ™¿õ‰¿õÛ¿ú
¿úC¿ú†¿ú€¿úÍ¿ú¯¿ù¿ù¿ù#¿ùK¿ùo¿ùø¿ùÎ¿ù˙¿û"¿û*¿û0¿û4¿û5¿ûA¿ûb¿û≥¿ûÍ¿üK¿üõ¿ü¡¿†¿†L¿†R¿†ó¿† ¿†Û¿†Ù¿°¿°?¿°C¿°D¿°P¿°c¿°Ñ¿°∑¿°¿¢¿¢8¿¢X¿¢m¿¢q¿¢r¿¢à¿¢•¿¢∏¿¢Œ¿¢Û¿£¿£=¿£d¿£à¿£¥¿£ª¿£˚¿§ ¿§C¿§j¿§ì¿§ö¿§∑¿§Ô¿§ı¿§ˆ¿•<¿•X¿•°¿•™¿•∞¿•±¿• ¿•ﬁ¿•¿¶¿¶>¿¶I¿¶R¿¶X¿¶\¿¶]¿¶¨¿¶–¿¶Ï¿ß¿ß¿ß-¿ßK¿ßu¿ß©¿ßÊ¿®¿®J¿®í¿®¬¿®Ê¿®Ò¿©¿©V¿©ï¿©∂¿©ˆ¿™¿™#¿™)¿™-¿™.¿™z¿™õ¿™¥¿™…¿™€¿™ı¿´¿´<¿´m¿´™¿´Ÿ¿¨¿¨S¿¨Ä¿¨°¿¨¨¿¨ ¿≠¿≠M¿≠n¿≠Æ¿≠“¿≠€¿≠·¿≠Â¿≠Ê¿Æ¿Æ-¿Æ.¿Æt¿Æz¿Æ®¿Æ€¿Æˆ¿Ø?¿ØM¿ØS¿Øe¿ØÉ¿Øæ¿Ø∆¿Ø ¿ØÀ¿Ø◊¿Ø˛¿∞,¿∞^¿∞ú¿∞œ¿±¿±¿±F¿±Y¿±i¿±ö¿±¡¿≤ ¿≤@¿≤I¿≤c¿≤É¿≤≤¿≤”¿≥<¿≥p¿≥w¿≥ë¿≥¶¿≥∏¿≥Œ¿≥Ï¿¥¿¥¿¥:¿¥[¿¥{¿¥ù¿¥¿¿¥…¿¥œ¿¥–¿¥Ò¿µ@¿µ®¿µÓ¿∂¿∂¿∂-¿∂r¿∂§¿∂“¿∂ı¿∑¿∑¿∑+¿∑M¿∑n¿∑ë¿∑¥¿∑Ω¿∑√¿∑ƒ¿∑È¿∏¿∏¿∏Q¿∏s¿∏û¿∏∫¿∏ﬂ¿π(¿π3¿π<¿πQ¿πc¿πr¿πï¿π∑¿π◊¿π˙¿∫2¿∫;¿∫A¿∫B¿∫k¿∫ë¿∫Ê¿ª¿ª5¿ª¿ªŸ¿ª⁄¿ªÔ¿º¿º&¿ºF¿ºh¿ºà¿º´¿Ω¿ΩU¿Ω^¿Ωd¿Ωe¿Ωñ¿Ω≈¿ΩÒ¿æD¿æ∞¿æÈ¿æÍ¿æˇ¿ø¿ø<¿øb¿øÑ¿øµ¿øÿ¿ø˚¿¿:¿¿C¿¿I¿¿J¿¿|¿¿ë¿¿£¿¿∂¿¿€¿¿˜¿¡9¿¡H¿¡U¿¡p¿¡à¿¡¨¿¡Ã¿¬	¿¬;¿¬_¿¬}¿¬º¿¬˘¿√¿√¿√,¿√9¿√D¿√l¿√é¿√Æ¿√—¿ƒ¿ƒQ¿ƒZ¿ƒ`¿ƒa¿ƒè¿ƒ§¿ƒ∂¿ƒ⁄¿≈¿≈'¿≈G¿≈j¿≈é¿≈Õ¿≈÷¿≈‹¿≈›¿≈¿∆ ¿∆'¿∆f¿∆†¿∆Õ¿«¿«?¿«H¿«r¿«ë¿«Ø¿«œ¿«¿«˜¿«¯¿»¿»9¿»Z¿»q¿»Ö¿»†¿»Œ¿»ˆ¿…W¿…¿…å¿…Ø¿…”¿…ı¿ ¿ ?¿ J¿ Y¿ |¿ ü¿ ¿¿ „¿ Ú¿ ¯¿ ˘¿À¿ÀH¿Àx¿ÀÖ¿Àµ¿À‚¿ÀË¿ÀÈ¿Ã1¿Ão¿ÃΩ¿Ãƒ¿Ã≈¿Õ¿ÕF¿Õç¿ÕÍ¿ÕÒ¿ÕÚ¿Œ!¿Œi¿Œj¿ŒÖ¿Œ°¿ŒÃ¿Œı¿œ¿œ\¿œﬁ¿œ˙¿–)¿–g¿–x¿–•¿––¿–˙¿—C¿—k¿—ù¿—Ù¿“\¿“±¿“Ë¿”H¿”x¿”≤¿‘¿‘4¿‘G¿‘k¿‘|¿‘ã¿‘ô¿‘§¿‘≠¿‘¥¿‘∏¿‘∫¿‘ª¿‘Ó¿’¿’¿’3¿’4¿’@¿’i¿’ø¿’√¿’ƒ¿’–¿’ˆ¿÷¿÷I¿÷M¿÷O¿÷P¿÷å¿÷ê¿÷‘¿÷˘¿◊0¿◊è¿◊¢¿◊√¿◊ƒ¿ÿ¿ÿB¿ÿC¿ÿ£¿ÿø¿ÿ¿¿Ÿ¿Ÿ/¿Ÿ1¿Ÿ2¿Ÿ~¿ŸŒ¿⁄¿⁄p¿⁄§¿⁄®¿⁄Û¿€=¿€é¿€§¿€®¿€ı¿‹B¿‹í¿‹›¿›¿›¿›Y¿›ú¿›Ω¿›·¿›˝¿ﬁ'¿ﬁQ¿ﬁp¿ﬁq¿ﬁ©¿ﬁØ¿ﬁ›¿ﬁ˚¿ﬁ¸¿ﬂ4¿ﬂI¿ﬂJ¿ﬂV¿ﬂu¿ﬂó¿ﬂ—¿ﬂ“¿ﬂÔ¿ﬂˇ¿‡¿‡¿‡¿‡*¿‡0¿‡1¿‡}¿‡º¿‡Û¿‡˜¿‡¯¿·¿·¿·Z¿·^¿·`¿·a¿·ï¿·¥¿·√¿·Í¿‚¿‚#¿‚B¿‚]¿‚|¿‚ñ¿‚™¿‚∫¿‚—¿‚Á¿‚˚¿„¿„¿„t¿„ç¿„Æ¿„—¿„Ú¿‰¿‰,¿‰L¿‰g¿‰É¿‰ü¿‰ƒ¿‰≈¿‰—¿Â¿Â¿Â¿Âd¿Â™¿Â´¿Â∑¿ÂÃ¿Â„¿Ê¿Ê¿Êb¿Ê≠¿Ê¥¿Ê˚¿Êˇ¿Á ¿Á¿Á¿Á=¿ÁR¿ÁV¿ÁW¿Ác¿Áú¿Á¬¿Ë¿Ë¿Ë¿Ë!¿ËQ¿Ë{¿Ëô¿Ëù¿Ëû¿Ë“¿È¿È;¿È?¿È@¿ÈÖ¿È“¿Í¿Í+¿ÍS¿ÍZ¿Í^¿Í_¿Íî¿Í√¿ÍÂ¿ÍÎ¿ÍÔ¿Í¿Î5¿Îs¿Î¨¿ÎÍ¿ÏY¿Ïá¿Ï≠¿Ì¿Ì¿Ì¿ÌU¿Ì¿ÌÖ¿Ì“¿Ó2¿ÓA¿ÓG¿ÓY¿Ó]¿Ó^¿Ój¿Óë¿Ó≠¿Ó⁄¿Ô¿Ô'¿Ô[¿ÔØ¿Ô«¿Ô“¿Ô€¿ÔÛ¿¿D¿ã¿¥¿“¿Ò¿Ò:¿Òe¿Òå¿Ò∂¿Ò€¿Ú¿Ú9¿ÚZ¿Úâ¿Ú∂¿Ú√¿ÚŒ¿Ú◊¿Úﬁ¿Ú‚¿Ú„¿ÚÂ¿ÚÊ¿Û$¿Û(¿Ûu¿Ûy¿Ûƒ¿Ù¿Ù"¿Ùà¿Ù≥¿Ù≈¿Ù⁄¿ÙÎ¿ı¿ı*¿ı;¿ı<¿ı_¿ıa¿ıb¿ıë¿ı™¿ı«¿ıÎ¿ˆ¿ˆ'¿ˆ(¿ˆ@¿ˆt¿ˆu¿ˆÅ¿ˆ∑¿ˆ‰¿ˆË¿ˆÍ    %_kDefaultFloatingActionButtonLocation%_kDefaultFloatingActionButtonAnimator_standardBottomSheetCurve _kBottomSheetDominatesPercentage_kMinBottomSheetScrimOpacity_kMaxBottomSheetScrimOpacity_ScaffoldSlotScaffoldMessengerScaffoldMessengerState_ScaffoldMessengerScopeScaffoldPrelayoutGeometry_TransitionSnapshotFabLocationScaffoldGeometry_ScaffoldGeometryNotifier_BodyBoxConstraints_BodyBuilder_ScaffoldLayout_FloatingActionButtonTransition$_FloatingActionButtonTransitionStateScaffoldScaffoldState_DismissDrawerActionScaffoldFeatureController_BottomSheetSuspendedCurve_StandardBottomSheet_StandardBottomSheetStatePersistentBottomSheetController_ScaffoldScope ‚˝